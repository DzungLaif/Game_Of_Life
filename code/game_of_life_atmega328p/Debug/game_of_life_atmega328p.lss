
game_of_life_atmega328p.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000018e  00800100  0000334a  000033de  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000334a  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000002f  0080028e  0080028e  0000356c  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  0000356c  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  0000359c  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000308  00000000  00000000  000035dc  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00004ca2  00000000  00000000  000038e4  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00001061  00000000  00000000  00008586  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000232a  00000000  00000000  000095e7  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000ba8  00000000  00000000  0000b914  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000b3b  00000000  00000000  0000c4bc  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00003f51  00000000  00000000  0000cff7  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000408  00000000  00000000  00010f48  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 8a 0a 	jmp	0x1514	; 0x1514 <__ctors_end>
       4:	0c 94 a7 0a 	jmp	0x154e	; 0x154e <__bad_interrupt>
       8:	0c 94 a7 0a 	jmp	0x154e	; 0x154e <__bad_interrupt>
       c:	0c 94 a7 0a 	jmp	0x154e	; 0x154e <__bad_interrupt>
      10:	0c 94 a7 0a 	jmp	0x154e	; 0x154e <__bad_interrupt>
      14:	0c 94 a7 0a 	jmp	0x154e	; 0x154e <__bad_interrupt>
      18:	0c 94 a7 0a 	jmp	0x154e	; 0x154e <__bad_interrupt>
      1c:	0c 94 a7 0a 	jmp	0x154e	; 0x154e <__bad_interrupt>
      20:	0c 94 a7 0a 	jmp	0x154e	; 0x154e <__bad_interrupt>
      24:	0c 94 a7 0a 	jmp	0x154e	; 0x154e <__bad_interrupt>
      28:	0c 94 a7 0a 	jmp	0x154e	; 0x154e <__bad_interrupt>
      2c:	0c 94 a7 0a 	jmp	0x154e	; 0x154e <__bad_interrupt>
      30:	0c 94 a7 0a 	jmp	0x154e	; 0x154e <__bad_interrupt>
      34:	0c 94 a7 0a 	jmp	0x154e	; 0x154e <__bad_interrupt>
      38:	0c 94 a7 0a 	jmp	0x154e	; 0x154e <__bad_interrupt>
      3c:	0c 94 a7 0a 	jmp	0x154e	; 0x154e <__bad_interrupt>
      40:	0c 94 a7 0a 	jmp	0x154e	; 0x154e <__bad_interrupt>
      44:	0c 94 a7 0a 	jmp	0x154e	; 0x154e <__bad_interrupt>
      48:	0c 94 a7 0a 	jmp	0x154e	; 0x154e <__bad_interrupt>
      4c:	0c 94 a7 0a 	jmp	0x154e	; 0x154e <__bad_interrupt>
      50:	0c 94 a7 0a 	jmp	0x154e	; 0x154e <__bad_interrupt>
      54:	0c 94 a7 0a 	jmp	0x154e	; 0x154e <__bad_interrupt>
      58:	0c 94 a7 0a 	jmp	0x154e	; 0x154e <__bad_interrupt>
      5c:	0c 94 a7 0a 	jmp	0x154e	; 0x154e <__bad_interrupt>
      60:	0c 94 a7 0a 	jmp	0x154e	; 0x154e <__bad_interrupt>
      64:	0c 94 a7 0a 	jmp	0x154e	; 0x154e <__bad_interrupt>

00000068 <Terminal12x16>:
      68:	0c 10 20 60 07 00 00 00 00 00 00 00 00 00 00 00     .. `............
	...
      84:	00 08 00 00 00 00 00 00 7c 00 ff 33 ff 33 ff 33     ........|..3.3.3
      94:	7c 00 00 00 00 00 00 00 00 00 09 00 00 00 00 3c     |..............<
      a4:	00 3c 00 3c 00 00 00 3c 00 3c 00 3c 00 00 00 00     .<.<...<.<.<....
      b4:	00 00 00 0c 00 02 10 1e 90 1f f0 1f fe 03 7e 1e     ..............~.
      c4:	9e 1f f0 1f fe 03 7e 02 1e 00 10 00 0a 00 00 78     ......~........x
      d4:	04 fc 0c fc 0c ff 3f ff 3f ff 3f cc 0f cc 0f 88     ......?.?.?.....
      e4:	07 00 00 00 00 0c 00 30 38 38 38 3c 38 1e 38 0f     .......0888<8.8.
      f4:	80 07 c0 03 e0 39 f0 38 78 38 3c 38 1c 00 0b 00     .....9.8x8<8....
     104:	00 00 1f b8 3f fc 3f fe 31 e6 37 fe 3f 3e 1e 1c     ....?.?.1.7.?>..
     114:	3e 00 36 00 22 00 00 07 00 00 00 00 00 00 27 00     >.6.".........'.
     124:	3f 00 3f 00 1f 00 00 00 00 00 00 00 00 00 00 00     ?.?.............
     134:	09 00 00 00 00 f0 03 fc 0f fe 1f ff 3f 07 38 01     ............?.8.
     144:	20 01 20 00 00 00 00 00 00 09 00 00 00 00 01 20      . ............ 
     154:	01 20 07 38 ff 3f fe 1f fc 0f f0 03 00 00 00 00     . .8.?..........
     164:	00 00 0a 00 00 98 0c b8 0e f8 0f f8 0f f8 0f f8     ................
     174:	0f f8 0f b8 0e 98 0c 00 00 00 00 0a 00 00 80 01     ................
     184:	80 01 80 01 f0 0f f0 0f f0 0f 80 01 80 01 80 01     ................
     194:	00 00 00 00 07 00 00 00 00 00 00 00 b8 00 f8 00     ................
     1a4:	f8 00 78 00 00 00 00 00 00 00 00 00 00 0a 00 00     ..x.............
     1b4:	80 01 80 01 80 01 80 01 80 01 80 01 80 01 80 01     ................
     1c4:	80 01 00 00 00 00 07 00 00 00 00 00 00 00 38 00     ..............8.
     1d4:	38 00 38 00 38 00 00 00 00 00 00 00 00 00 00 0c     8.8.8...........
     1e4:	00 18 00 1c 00 1e 00 0f 80 07 c0 03 e0 01 f0 00     ................
     1f4:	78 00 3c 00 1e 00 0e 00 0c f8 07 fe 1f fe 1f 07     x.<.............
     204:	3f 83 33 c3 31 e3 30 73 30 3f 38 fe 1f fe 1f f8     ?.3.1.0s0?8.....
     214:	07 0b 00 00 00 00 0c 30 0c 30 0e 30 ff 3f ff 3f     .......0.0.0.?.?
     224:	ff 3f 00 30 00 30 00 30 00 00 0c 1c 30 1e 38 1f     .?.0.0.0....0.8.
     234:	3c 07 3e 03 3f 83 37 c3 33 e3 31 f7 30 7f 30 3e     <.>.?.7.3.1.0.0>
     244:	30 1c 30 0c 0c 0c 0e 1c 0f 3c c7 38 c3 30 c3 30     0.0......<.8.0.0
     254:	c3 30 c3 30 e7 39 ff 3f 7e 1f 3c 0e 0c c0 03 e0     .0.0.9.?~.<.....
     264:	03 f0 03 78 03 3c 03 1e 03 0f 03 ff 3f ff 3f ff     ...x.<......?.?.
     274:	3f 00 03 00 03 0c 3f 0c 7f 1c 7f 3c 63 38 63 30     ?.....?....<c8c0
     284:	63 30 63 30 63 30 e3 38 e3 3f c3 1f 83 0f 0c c0     c0c0c0.8.?......
     294:	0f f0 1f f8 3f fc 39 de 30 cf 30 c7 30 c3 30 c3     ....?.9.0.0.0.0.
     2a4:	39 c3 3f 80 1f 00 0f 0c 03 00 03 00 03 00 03 30     9.?............0
     2b4:	03 3c 03 3f c3 0f f3 03 ff 00 3f 00 0f 00 03 00     .<.?......?.....
     2c4:	0c 00 0f bc 1f fe 3f ff 39 e7 30 c3 30 c3 30 e7     ......?.9.0.0.0.
     2d4:	30 ff 39 fe 3f bc 1f 00 0f 0c 3c 00 7e 00 ff 30     0.9.?.....<.~..0
     2e4:	e7 30 c3 30 c3 38 c3 3c c3 1e e7 0f ff 07 fe 03     .0.0.8.<........
     2f4:	fc 00 07 00 00 00 00 00 00 70 1c 70 1c 70 1c 70     .........p.p.p.p
     304:	1c 00 00 00 00 00 00 00 00 00 00 07 00 00 00 00     ................
     314:	00 00 70 9c 70 fc 70 fc 70 7c 00 00 00 00 00 00     ..p.p.p.p|......
     324:	00 00 00 00 0a 00 00 c0 00 e0 01 f0 03 f8 07 3c     ...............<
     334:	0f 1e 1e 0f 3c 07 38 03 30 00 00 00 00 0b 00 00     ....<.8.0.......
     344:	60 06 60 06 60 06 60 06 60 06 60 06 60 06 60 06     `.`.`.`.`.`.`.`.
     354:	60 06 60 06 00 00 0a 00 00 03 30 07 38 0f 3c 1e     `.`.......0.8.<.
     364:	1e 3c 0f f8 07 f0 03 e0 01 c0 00 00 00 00 00 0b     .<..............
     374:	1c 00 1e 00 1f 00 07 00 83 37 c3 37 e3 37 f7 00     .........7.7.7..
     384:	7f 00 3e 00 1c 00 00 00 0c f8 0f fe 1f ff 1f f7     ..>.............
     394:	3b fb 37 fb 37 fb 37 fb 37 ff 37 ff 37 fe 03 f8     ;.7.7.7.7.7.7...
     3a4:	01 0b 00 38 00 3f e0 3f fc 07 ff 06 1f 06 ff 06     ...8.?.?........
     3b4:	fc 07 e0 3f 00 3f 00 38 00 00 0b ff 3f ff 3f ff     ...?.?.8....?.?.
     3c4:	3f c3 30 c3 30 c3 30 e7 30 ff 39 fe 3f bc 1f 00     ?.0.0.0.0.9.?...
     3d4:	0f 00 00 0b f0 03 fc 0f fe 1f 0f 3c 07 38 03 30     ...........<.8.0
     3e4:	03 30 07 38 0f 3c 0e 1c 0c 0c 00 00 0b ff 3f ff     .0.8.<........?.
     3f4:	3f ff 3f 03 30 03 30 03 30 07 38 0f 3c fe 1f fc     ?.?.0.0.0.8.<...
     404:	0f f0 03 00 00 0b ff 3f ff 3f ff 3f c3 30 c3 30     .......?.?.?.0.0
     414:	c3 30 c3 30 c3 30 c3 30 03 30 03 30 00 00 0b ff     .0.0.0.0.0.0....
     424:	3f ff 3f ff 3f c3 00 c3 00 c3 00 c3 00 c3 00 c3     ?.?.?...........
     434:	00 03 00 03 00 00 00 0b f0 03 fc 0f fe 1f 0f 3c     ...............<
     444:	07 38 c3 30 c3 30 c3 30 c7 3f c7 3f c6 3f 00 00     .8.0.0.0.?.?.?..
     454:	0b ff 3f ff 3f ff 3f c0 00 c0 00 c0 00 c0 00 c0     ..?.?.?.........
     464:	00 ff 3f ff 3f ff 3f 00 00 09 00 00 00 00 03 30     ..?.?.?........0
     474:	03 30 ff 3f ff 3f ff 3f 03 30 03 30 00 00 00 00     .0.?.?.?.0.0....
     484:	00 00 0b 00 0e 00 1e 00 3e 00 38 00 30 00 30 00     ........>.8.0.0.
     494:	30 00 38 ff 3f ff 1f ff 07 00 00 0b ff 3f ff 3f     0.8.?........?.?
     4a4:	ff 3f e0 01 f0 03 f8 07 3c 0f 1e 1e 0f 3c 07 38     .?......<....<.8
     4b4:	03 30 00 00 0b ff 3f ff 3f ff 3f 00 30 00 30 00     .0....?.?.?.0.0.
     4c4:	30 00 30 00 30 00 30 00 30 00 30 00 00 0b ff 3f     0.0.0.0.0.0....?
     4d4:	ff 3f ff 3f 7e 00 f8 01 e0 01 f8 01 7e 00 ff 3f     .?.?~.......~..?
     4e4:	ff 3f ff 3f 00 00 0b ff 3f ff 3f ff 3f 3e 00 f8     .?.?....?.?.?>..
     4f4:	00 f0 03 c0 07 00 1f ff 3f ff 3f ff 3f 00 00 0b     ........?.?.?...
     504:	f0 03 fc 0f fe 1f 0f 3c 07 38 03 30 07 38 0f 3c     .......<.8.0.8.<
     514:	fe 1f fc 0f f0 03 00 00 0b ff 3f ff 3f ff 3f 83     ..........?.?.?.
     524:	01 83 01 83 01 83 01 c7 01 ff 01 fe 00 7c 00 00     .............|..
     534:	00 0b f0 03 fc 0f fe 1f 0f 3c 07 38 03 36 07 3e     .........<.8.6.>
     544:	0f 3e fe 3f fc 3f f0 33 00 00 0b ff 3f ff 3f ff     .>.?.?.3....?.?.
     554:	3f 83 01 83 03 83 07 83 0f c7 1f ff 3d fe 38 7c     ?...........=.8|
     564:	30 00 00 0b 3c 0c 7e 1c ff 3c e7 38 c3 30 c3 30     0...<.~..<.8.0.0
     574:	c3 30 c7 39 cf 3f 8e 1f 0c 0f 00 00 0a 00 00 03     .0.9.?..........
     584:	00 03 00 03 00 ff 3f ff 3f ff 3f 03 00 03 00 03     ......?.?.?.....
     594:	00 00 00 00 00 0b ff 07 ff 1f ff 3f 00 38 00 30     ...........?.8.0
     5a4:	00 30 00 30 00 38 ff 3f ff 1f ff 07 00 00 0b 07     .0.0.8.?........
     5b4:	00 3f 00 ff 01 f8 0f c0 3f 00 3e c0 3f f8 0f ff     .?......?.>.?...
     5c4:	01 3f 00 07 00 00 00 0b ff 3f ff 3f ff 3f 00 1e     .?.......?.?.?..
     5d4:	80 07 80 03 80 07 00 1e ff 3f ff 3f ff 3f 00 00     .........?.?.?..
     5e4:	0b 03 30 0f 3c 1f 3e 3c 0f f0 03 e0 01 f0 03 3c     ..0.<.><.......<
     5f4:	0f 1f 3e 0f 3c 03 30 00 00 0b 03 00 0f 00 3f 00     ..>.<.0.......?.
     604:	fc 00 f0 3f c0 3f f0 3f fc 00 3f 00 0f 00 03 00     ...?.?.?..?.....
     614:	00 00 0b 03 30 03 3c 03 3e 03 3f c3 33 e3 31 f3     ....0.<.>.?.3.1.
     624:	30 3f 30 1f 30 0f 30 03 30 00 00 09 00 00 00 00     0?0.0.0.0.......
     634:	ff 3f ff 3f ff 3f 03 30 03 30 03 30 03 30 00 00     .?.?.?.0.0.0.0..
     644:	00 00 00 00 0c 0e 00 1e 00 3c 00 78 00 f0 00 e0     .........<.x....
     654:	01 c0 03 80 07 00 0f 00 1e 00 1c 00 18 09 00 00     ................
     664:	00 00 03 30 03 30 03 30 03 30 ff 3f ff 3f ff 3f     ...0.0.0.0.?.?.?
     674:	00 00 00 00 00 00 0c 60 00 70 00 78 00 3c 00 1e     .......`.p.x.<..
     684:	00 0f 00 0f 00 1e 00 3c 00 78 00 70 00 60 00 0c     .......<.x.p.`..
     694:	00 c0 00 c0 00 c0 00 c0 00 c0 00 c0 00 c0 00 c0     ................
     6a4:	00 c0 00 c0 00 c0 00 c0 08 00 00 00 00 00 00 00     ................
     6b4:	00 3e 00 7e 00 7e 00 4e 00 00 00 00 00 00 00 00     .>.~.~.N........
     6c4:	00 0b 00 1c 40 3e 60 3f 60 33 60 33 60 33 60 33     ....@>`?`3`3`3`3
     6d4:	60 33 e0 3f e0 3f c0 3f 00 00 0b ff 3f ff 3f ff     `3.?.?.?....?.?.
     6e4:	3f e0 30 60 30 60 30 60 30 e0 38 e0 3f c0 1f 80     ?.0`0`0`0.8.?...
     6f4:	0f 00 00 0b 80 0f c0 1f e0 3f e0 38 60 30 60 30     .........?.8`0`0
     704:	60 30 60 30 e0 38 c0 18 80 08 00 00 0b 80 0f c0     `0`0.8..........
     714:	1f e0 3f e0 38 60 30 60 30 e0 30 e0 30 ff 3f ff     ..?.8`0`0.0.0.?.
     724:	3f ff 3f 00 00 0b 80 0f c0 1f e0 3f e0 3b 60 33     ?.?........?.;`3
     734:	60 33 60 33 60 33 e0 33 c0 13 80 01 00 00 09 c0     `3`3`3.3........
     744:	00 c0 00 fc 3f fe 3f ff 3f c7 00 c3 00 c3 00 03     ....?.?.?.......
     754:	00 00 00 00 00 00 00 0b 80 03 c0 c7 e0 cf e0 ce     ................
     764:	60 cc 60 cc 60 cc 60 ee e0 ff e0 7f e0 3f 00 00     `.`.`.`......?..
     774:	0a ff 3f ff 3f ff 3f e0 00 60 00 60 00 e0 00 e0     ..?.?.?..`.`....
     784:	3f c0 3f 80 3f 00 00 00 00 09 00 00 00 00 00 30     ?.?.?..........0
     794:	60 30 ec 3f ec 3f ec 3f 00 30 00 30 00 00 00 00     `0.?.?.?.0.0....
     7a4:	00 00 09 00 00 00 00 00 60 00 e0 00 e0 60 c0 ec     ........`....`..
     7b4:	ff ec ff ec 7f 00 00 00 00 00 00 0a 00 00 ff 3f     ...............?
     7c4:	ff 3f ff 3f 80 07 c0 0f e0 1f e0 3c 60 38 00 30     .?.?.......<`8.0
     7d4:	00 00 00 00 09 00 00 00 00 00 30 03 30 ff 3f ff     ..........0.0.?.
     7e4:	3f ff 3f 00 30 00 30 00 00 00 00 00 00 0b e0 3f     ?.?.0.0........?
     7f4:	e0 3f e0 3f e0 00 e0 3f c0 3f e0 3f e0 00 e0 3f     .?.?...?.?.?...?
     804:	c0 3f 80 3f 00 00 0b 00 00 e0 3f e0 3f e0 3f 60     .?.?......?.?.?`
     814:	00 60 00 60 00 e0 00 e0 3f c0 3f 80 3f 00 00 0b     .`.`....?.?.?...
     824:	80 0f c0 1f e0 3f e0 38 60 30 60 30 60 30 e0 38     .....?.8`0`0`0.8
     834:	e0 3f c0 1f 80 0f 00 00 0b e0 ff e0 ff e0 ff 60     .?.............`
     844:	1c 60 18 60 18 60 18 e0 1c e0 1f c0 0f 80 07 00     .`.`.`..........
     854:	00 0b 80 07 c0 0f e0 1f e0 1c 60 18 60 18 60 18     ..........`.`.`.
     864:	60 1c e0 ff e0 ff e0 ff 00 00 0b 00 00 e0 3f e0     `.............?.
     874:	3f e0 3f e0 00 60 00 60 00 60 00 e0 00 e0 00 c0     ?.?..`.`.`......
     884:	00 00 00 09 c0 11 e0 33 e0 33 60 33 60 33 60 33     .......3.3`3`3`3
     894:	60 3f 60 3f 40 1e 00 00 00 00 00 00 09 60 00 60     `?`?@........`.`
     8a4:	00 fe 1f fe 3f fe 3f 60 30 60 30 60 30 00 30 00     ....?.?`0`0`0.0.
     8b4:	00 00 00 00 00 0b e0 0f e0 1f e0 3f 00 38 00 30     ...........?.8.0
     8c4:	00 30 00 30 00 38 e0 3f e0 3f e0 3f 00 00 0b 60     .0.0.8.?.?.?...`
     8d4:	00 e0 01 e0 07 80 1f 00 3e 00 38 00 3e 80 1f e0     ........>.8.>...
     8e4:	07 e0 01 60 00 00 00 0b e0 07 e0 1f e0 3f 00 3c     ...`.........?.<
     8f4:	e0 1f e0 0f e0 1f 00 3c e0 3f e0 1f e0 07 00 00     .......<.?......
     904:	0a 60 30 e0 38 e0 3d c0 1f 80 0f 80 0f c0 1f e0     .`0.8.=.........
     914:	3d e0 38 60 30 00 00 00 00 0a 00 00 60 00 e0 81     =.8`0.......`...
     924:	e0 e7 80 ff 00 7e 80 1f e0 07 e0 01 60 00 00 00     .....~......`...
     934:	00 00 0a 60 30 60 38 60 3c 60 3e 60 37 e0 33 e0     ...`0`8`<`>`7.3.
     944:	31 e0 30 60 30 20 30 00 00 00 00 0a 00 00 80 00     1.0`0 0.........
     954:	c0 01 fc 1f fe 3f 7f 7f 07 70 03 60 03 60 03 60     .....?...p.`.`.`
     964:	00 00 00 00 07 00 00 00 00 00 00 00 00 ff 3f ff     ..............?.
     974:	3f ff 3f 00 00 00 00 00 00 00 00 00 00 0a 00 00     ?.?.............
     984:	03 60 03 60 03 60 07 70 7f 7f fe 3f fc 1f c0 01     .`.`.`.p...?....
     994:	80 00 00 00 00 00 0b 10 00 18 00 1c 00 0c 00 0c     ................
     9a4:	00 1c 00 18 00 18 00 1c 00 0c 00 04 00 00 00 0b     ................
     9b4:	00 0f 80 0f c0 0f e0 0c 70 0c 30 0c 70 0c e0 0c     ........p.0.p...
     9c4:	c0 0f 80 0f 00 0f 00 00                             ........

000009cc <Terminal11x16>:
     9cc:	0b 10 20 60 06 00 00 00 00 00 00 00 00 00 00 00     .. `............
	...
     9e4:	00 00 00 07 00 00 00 00 00 00 7c 00 ff 33 ff 33     ..........|..3.3
     9f4:	7c 00 00 00 00 00 00 00 00 00 08 00 00 00 00 3c     |..............<
     a04:	00 3c 00 00 00 00 00 3c 00 3c 00 00 00 00 00 00     .<.....<.<......
     a14:	00 0b 00 02 10 1e 90 1f f0 03 7e 02 1e 1e 90 1f     ..........~.....
     a24:	f0 03 7e 02 1e 00 10 00 09 00 00 78 04 fc 0c cc     ..~........x....
     a34:	0c ff 3f ff 3f cc 0c cc 0f 88 07 00 00 00 00 0b     ..?.?...........
     a44:	00 30 38 38 38 1c 38 0e 00 07 80 03 c0 01 e0 38     .0888.8........8
     a54:	70 38 38 38 1c 00 0a 00 00 00 1f b8 3f fc 31 c6     p888........?.1.
     a64:	21 e2 37 3e 1e 1c 1c 00 36 00 22 00 00 06 00 00     !.7>....6.".....
     a74:	00 00 00 00 27 00 3f 00 1f 00 00 00 00 00 00 00     ....'.?.........
     a84:	00 00 00 00 08 00 00 00 00 f0 03 fc 0f fe 1f 07     ................
     a94:	38 01 20 01 20 00 00 00 00 00 00 08 00 00 00 00     8. . ...........
     aa4:	01 20 01 20 07 38 fe 1f fc 0f f0 03 00 00 00 00     . . .8..........
     ab4:	00 00 09 00 00 98 0c b8 0e e0 03 f8 0f f8 0f e0     ................
     ac4:	03 b8 0e 98 0c 00 00 00 00 09 00 00 80 01 80 01     ................
     ad4:	80 01 f0 0f f0 0f 80 01 80 01 80 01 00 00 00 00     ................
     ae4:	06 00 00 00 00 00 00 00 b8 00 f8 00 78 00 00 00     ............x...
     af4:	00 00 00 00 00 00 00 09 00 00 80 01 80 01 80 01     ................
     b04:	80 01 80 01 80 01 80 01 80 01 00 00 00 00 06 00     ................
     b14:	00 00 00 00 00 00 38 00 38 00 38 00 00 00 00 00     ......8.8.8.....
     b24:	00 00 00 00 00 0b 00 18 00 1c 00 0e 00 07 80 03     ................
     b34:	c0 01 e0 00 70 00 38 00 1c 00 0e 00 0b f8 07 fe     ....p.8.........
     b44:	1f 06 1e 03 33 83 31 c3 30 63 30 33 30 1e 18 fe     ....3.1.0c030...
     b54:	1f f8 07 0a 00 00 00 00 0c 30 0c 30 0e 30 ff 3f     .........0.0.0.?
     b64:	ff 3f 00 30 00 30 00 30 00 00 0b 1c 30 1e 38 07     .?.0.0.0....0.8.
     b74:	3c 03 3e 03 37 83 33 c3 31 e3 30 77 30 3e 30 1c     <.>.7.3.1.0w0>0.
     b84:	30 0b 0c 0c 0e 1c 07 38 c3 30 c3 30 c3 30 c3 30     0......8.0.0.0.0
     b94:	c3 30 e7 39 7e 1f 3c 0e 0b c0 03 e0 03 70 03 38     .0.9~.<......p.8
     ba4:	03 1c 03 0e 03 07 03 ff 3f ff 3f 00 03 00 03 0b     ........?.?.....
     bb4:	3f 0c 7f 1c 63 38 63 30 63 30 63 30 63 30 63 30     ?...c8c0c0c0c0c0
     bc4:	e3 38 c3 1f 83 0f 0b c0 0f f0 1f f8 39 dc 30 ce     .8..........9.0.
     bd4:	30 c7 30 c3 30 c3 30 c3 39 80 1f 00 0f 0b 03 00     0.0.0.0.9.......
     be4:	03 00 03 00 03 30 03 3c 03 0f c3 03 f3 00 3f 00     .....0.<......?.
     bf4:	0f 00 03 00 0b 00 0f bc 1f fe 39 e7 30 c3 30 c3     ..........9.0.0.
     c04:	30 c3 30 e7 30 fe 39 bc 1f 00 0f 0b 3c 00 7e 00     0.0.0.9.....<.~.
     c14:	e7 30 c3 30 c3 30 c3 38 c3 1c c3 0e e7 07 fe 03     .0.0.0.8........
     c24:	fc 00 06 00 00 00 00 00 00 70 1c 70 1c 70 1c 00     .........p.p.p..
	...
     c3c:	00 06 00 00 00 00 00 00 70 9c 70 fc 70 7c 00 00     ........p.p.p|..
	...
     c54:	09 00 00 c0 00 e0 01 f0 03 38 07 1c 0e 0e 1c 07     .........8......
     c64:	38 03 30 00 00 00 00 0a 00 00 60 06 60 06 60 06     8.0.......`.`.`.
     c74:	60 06 60 06 60 06 60 06 60 06 60 06 00 00 09 00     `.`.`.`.`.`.....
     c84:	00 03 30 07 38 0e 1c 1c 0e 38 07 f0 03 e0 01 c0     ..0.8....8......
     c94:	00 00 00 00 00 0a 1c 00 1e 00 07 00 03 00 83 37     ...............7
     ca4:	c3 37 e3 00 77 00 3e 00 1c 00 00 00 0b f8 0f fe     .7..w.>.........
     cb4:	1f 07 18 f3 33 fb 37 1b 36 fb 37 fb 37 07 36 fe     ....3.7.6.7.7.6.
     cc4:	03 f8 01 0a 00 38 00 3f e0 07 fc 06 1f 06 1f 06     .....8.?........
     cd4:	fc 06 e0 07 00 3f 00 38 00 00 0a ff 3f ff 3f c3     .....?.8....?.?.
     ce4:	30 c3 30 c3 30 c3 30 e7 30 fe 39 bc 1f 00 0f 00     0.0.0.0.0.9.....
     cf4:	00 0a f0 03 fc 0f 0e 1c 07 38 03 30 03 30 03 30     .........8.0.0.0
     d04:	07 38 0e 1c 0c 0c 00 00 0a ff 3f ff 3f 03 30 03     .8........?.?.0.
     d14:	30 03 30 03 30 07 38 0e 1c fc 0f f0 03 00 00 0a     0.0.0.8.........
     d24:	ff 3f ff 3f c3 30 c3 30 c3 30 c3 30 c3 30 c3 30     .?.?.0.0.0.0.0.0
     d34:	03 30 03 30 00 00 0a ff 3f ff 3f c3 00 c3 00 c3     .0.0....?.?.....
     d44:	00 c3 00 c3 00 c3 00 03 00 03 00 00 00 0a f0 03     ................
     d54:	fc 0f 0e 1c 07 38 03 30 c3 30 c3 30 c3 30 c7 3f     .....8.0.0.0.0.?
     d64:	c6 3f 00 00 0a ff 3f ff 3f c0 00 c0 00 c0 00 c0     .?....?.?.......
     d74:	00 c0 00 c0 00 ff 3f ff 3f 00 00 08 00 00 00 00     ......?.?.......
     d84:	03 30 03 30 ff 3f ff 3f 03 30 03 30 00 00 00 00     .0.0.?.?.0.0....
     d94:	00 00 0a 00 0e 00 1e 00 38 00 30 00 30 00 30 00     ........8.0.0.0.
     da4:	30 00 38 ff 1f ff 07 00 00 0a ff 3f ff 3f c0 00     0.8........?.?..
     db4:	e0 01 f0 03 38 07 1c 0e 0e 1c 07 38 03 30 00 00     ....8......8.0..
     dc4:	0a ff 3f ff 3f 00 30 00 30 00 30 00 30 00 30 00     ..?.?.0.0.0.0.0.
     dd4:	30 00 30 00 30 00 00 0a ff 3f ff 3f 1e 00 78 00     0.0.0....?.?..x.
     de4:	e0 01 e0 01 78 00 1e 00 ff 3f ff 3f 00 00 0a ff     ....x....?.?....
     df4:	3f ff 3f 0e 00 38 00 f0 00 c0 03 00 07 00 1c ff     ?.?..8..........
     e04:	3f ff 3f 00 00 0a f0 03 fc 0f 0e 1c 07 38 03 30     ?.?..........8.0
     e14:	03 30 07 38 0e 1c fc 0f f0 03 00 00 0a ff 3f ff     .0.8..........?.
     e24:	3f 83 01 83 01 83 01 83 01 83 01 c7 01 fe 00 7c     ?..............|
     e34:	00 00 00 0a f0 03 fc 0f 0e 1c 07 38 03 30 03 36     ...........8.0.6
     e44:	07 3e 0e 1c fc 3f f0 33 00 00 0a ff 3f ff 3f 83     .>...?.3....?.?.
     e54:	01 83 01 83 03 83 07 83 0f c7 1d fe 38 7c 30 00     ............8|0.
     e64:	00 0a 3c 0c 7e 1c e7 38 c3 30 c3 30 c3 30 c3 30     ..<.~..8.0.0.0.0
     e74:	c7 39 8e 1f 0c 0f 00 00 09 00 00 03 00 03 00 03     .9..............
     e84:	00 ff 3f ff 3f 03 00 03 00 03 00 00 00 00 00 0a     ..?.?...........
     e94:	ff 07 ff 1f 00 38 00 30 00 30 00 30 00 30 00 38     .....8.0.0.0.0.8
     ea4:	ff 1f ff 07 00 00 0a 07 00 3f 00 f8 01 c0 0f 00     .........?......
     eb4:	3e 00 3e c0 0f f8 01 3f 00 07 00 00 00 0a ff 3f     >.>....?.......?
     ec4:	ff 3f 00 1c 00 06 80 03 80 03 00 06 00 1c ff 3f     .?.............?
     ed4:	ff 3f 00 00 0a 03 30 0f 3c 1c 0e 30 03 e0 01 e0     .?....0.<..0....
     ee4:	01 30 03 1c 0e 0f 3c 03 30 00 00 0a 03 00 0f 00     .0....<.0.......
     ef4:	3c 00 f0 00 c0 3f c0 3f f0 00 3c 00 0f 00 03 00     <....?.?..<.....
     f04:	00 00 0a 03 30 03 3c 03 3e 03 33 c3 31 e3 30 33     ....0.<.>.3.1.03
     f14:	30 1f 30 0f 30 03 30 00 00 08 00 00 00 00 ff 3f     0.0.0.0........?
     f24:	ff 3f 03 30 03 30 03 30 03 30 00 00 00 00 00 00     .?.0.0.0.0......
     f34:	0b 0e 00 1c 00 38 00 70 00 e0 00 c0 01 80 03 00     .....8.p........
     f44:	07 00 0e 00 1c 00 18 08 00 00 00 00 03 30 03 30     .............0.0
     f54:	03 30 03 30 ff 3f ff 3f 00 00 00 00 00 00 0b 60     .0.0.?.?.......`
     f64:	00 70 00 38 00 1c 00 0e 00 07 00 0e 00 1c 00 38     .p.8...........8
     f74:	00 70 00 60 00 0b 00 c0 00 c0 00 c0 00 c0 00 c0     .p.`............
     f84:	00 c0 00 c0 00 c0 00 c0 00 c0 00 c0 07 00 00 00     ................
     f94:	00 00 00 00 00 3e 00 7e 00 4e 00 00 00 00 00 00     .....>.~.N......
     fa4:	00 00 00 0a 00 1c 40 3e 60 33 60 33 60 33 60 33     ......@>`3`3`3`3
     fb4:	60 33 60 33 e0 3f c0 3f 00 00 0a ff 3f ff 3f c0     `3`3.?.?....?.?.
     fc4:	30 60 30 60 30 60 30 60 30 e0 38 c0 1f 80 0f 00     0`0`0`0`0.8.....
     fd4:	00 0a 80 0f c0 1f e0 38 60 30 60 30 60 30 60 30     .......8`0`0`0`0
     fe4:	60 30 c0 18 80 08 00 00 0a 80 0f c0 1f e0 38 60     `0............8`
     ff4:	30 60 30 60 30 e0 30 c0 30 ff 3f ff 3f 00 00 0a     0`0`0.0.0.?.?...
    1004:	80 0f c0 1f e0 3b 60 33 60 33 60 33 60 33 60 33     .....;`3`3`3`3`3
    1014:	c0 13 80 01 00 00 08 c0 00 c0 00 fc 3f fe 3f c7     ............?.?.
    1024:	00 c3 00 c3 00 03 00 00 00 00 00 00 00 0a 80 03     ................
    1034:	c0 c7 e0 ce 60 cc 60 cc 60 cc 60 cc 60 e6 e0 7f     ....`.`.`.`.`...
    1044:	e0 3f 00 00 09 ff 3f ff 3f c0 00 60 00 60 00 60     .?....?.?..`.`.`
    1054:	00 e0 00 c0 3f 80 3f 00 00 00 00 08 00 00 00 00     ....?.?.........
    1064:	00 30 60 30 ec 3f ec 3f 00 30 00 30 00 00 00 00     .0`0.?.?.0.0....
    1074:	00 00 08 00 00 00 00 00 60 00 e0 00 c0 60 c0 ec     ........`....`..
    1084:	ff ec 7f 00 00 00 00 00 00 09 00 00 ff 3f ff 3f     .............?.?
    1094:	00 03 80 07 c0 0f e0 1c 60 38 00 30 00 00 00 00     ........`8.0....
    10a4:	08 00 00 00 00 00 30 03 30 ff 3f ff 3f 00 30 00     ......0.0.?.?.0.
    10b4:	30 00 00 00 00 00 00 0a e0 3f c0 3f e0 00 e0 00     0........?.?....
    10c4:	c0 3f c0 3f e0 00 e0 00 c0 3f 80 3f 00 00 0a 00     .?.?.....?.?....
    10d4:	00 e0 3f e0 3f 60 00 60 00 60 00 60 00 e0 00 c0     ..?.?`.`.`.`....
    10e4:	3f 80 3f 00 00 0a 80 0f c0 1f e0 38 60 30 60 30     ?.?........8`0`0
    10f4:	60 30 60 30 e0 38 c0 1f 80 0f 00 00 0a e0 ff e0     `0`0.8..........
    1104:	ff 60 0c 60 18 60 18 60 18 60 18 e0 1c c0 0f 80     .`.`.`.`.`......
    1114:	07 00 00 0a 80 07 c0 0f e0 1c 60 18 60 18 60 18     ..........`.`.`.
    1124:	60 18 60 0c e0 ff e0 ff 00 00 0a 00 00 e0 3f e0     `.`...........?.
    1134:	3f c0 00 60 00 60 00 60 00 60 00 e0 00 c0 00 00     ?..`.`.`.`......
    1144:	00 08 c0 11 e0 33 60 33 60 33 60 33 60 33 60 3f     .....3`3`3`3`3`?
    1154:	40 1e 00 00 00 00 00 00 08 60 00 60 00 fe 1f fe     @........`.`....
    1164:	3f 60 30 60 30 60 30 00 30 00 00 00 00 00 00 0a     ?`0`0`0.0.......
    1174:	e0 0f e0 1f 00 38 00 30 00 30 00 30 00 30 00 18     .....8.0.0.0.0..
    1184:	e0 3f e0 3f 00 00 0a 60 00 e0 01 80 07 00 1e 00     .?.?...`........
    1194:	38 00 38 00 1e 80 07 e0 01 60 00 00 00 0a e0 07     8.8......`......
    11a4:	e0 1f 00 38 00 1c e0 0f e0 0f 00 1c 00 38 e0 1f     ...8.........8..
    11b4:	e0 07 00 00 09 60 30 e0 38 c0 1d 80 0f 00 07 80     .....`0.8.......
    11c4:	0f c0 1d e0 38 60 30 00 00 00 00 09 00 00 60 00     ....8`0.......`.
    11d4:	e0 81 80 e7 00 7e 00 1e 80 07 e0 01 60 00 00 00     .....~......`...
    11e4:	00 00 09 60 30 60 38 60 3c 60 36 60 33 e0 31 e0     ...`0`8`<`6`3.1.
    11f4:	30 60 30 20 30 00 00 00 00 09 00 00 80 00 c0 01     0`0 0...........
    1204:	fc 1f 7e 3f 07 70 03 60 03 60 03 60 00 00 00 00     ..~?.p.`.`.`....
    1214:	06 00 00 00 00 00 00 00 00 ff 3f ff 3f 00 00 00     ..........?.?...
    1224:	00 00 00 00 00 00 00 09 00 00 03 60 03 60 03 60     ...........`.`.`
    1234:	07 70 7e 3f fc 1f c0 01 80 00 00 00 00 00 0a 10     .p~?............
    1244:	00 18 00 0c 00 04 00 0c 00 18 00 10 00 18 00 0c     ................
    1254:	00 04 00 00 00 0a 00 0f 80 0f c0 0c 60 0c 30 0c     ............`.0.
    1264:	30 0c 60 0c c0 0c 80 0f 00 0f 00 00                 0.`.........

00001270 <Terminal6x8>:
    1270:	06 08 20 60 04 00 00 00 00 00 00 05 00 00 06 5f     .. `..........._
    1280:	06 00 06 00 07 03 00 07 03 06 00 24 7e 24 7e 24     ...........$~$~$
    1290:	05 00 24 2b 6a 12 00 06 00 63 13 08 64 63 06 00     ..$+j....c..dc..
    12a0:	36 49 56 20 50 04 00 00 07 03 00 00 04 00 00 3e     6IV P..........>
    12b0:	41 00 00 04 00 00 41 3e 00 00 06 00 08 3e 1c 3e     A.....A>.....>.>
    12c0:	08 06 00 08 08 3e 08 08 04 00 00 e0 60 00 00 06     .....>......`...
    12d0:	00 08 08 08 08 08 04 00 00 60 60 00 00 06 00 20     .........``.... 
    12e0:	10 08 04 02 06 00 3e 51 49 45 3e 05 00 00 42 7f     ......>QIE>...B.
    12f0:	40 00 06 00 62 51 49 49 46 06 00 22 49 49 49 36     @...bQIIF.."III6
    1300:	06 00 18 14 12 7f 10 06 00 2f 49 49 49 31 06 00     ........./III1..
    1310:	3c 4a 49 49 30 06 00 01 71 09 05 03 06 00 36 49     <JII0...q.....6I
    1320:	49 49 36 06 00 06 49 49 29 1e 04 00 00 6c 6c 00     II6...II)....ll.
    1330:	00 04 00 00 ec 6c 00 00 05 00 08 14 22 41 00 06     .....l......"A..
    1340:	00 24 24 24 24 24 06 00 00 41 22 14 08 06 00 02     .$$$$$...A".....
    1350:	01 59 09 06 06 00 3e 41 5d 55 1e 06 00 7e 11 11     .Y....>A]U...~..
    1360:	11 7e 06 00 7f 49 49 49 36 06 00 3e 41 41 41 22     .~...III6..>AAA"
    1370:	06 00 7f 41 41 41 3e 06 00 7f 49 49 49 41 06 00     ...AAA>...IIIA..
    1380:	7f 09 09 09 01 06 00 3e 41 49 49 7a 06 00 7f 08     .......>AIIz....
    1390:	08 08 7f 05 00 00 41 7f 41 00 06 00 30 40 40 40     ......A.A...0@@@
    13a0:	3f 06 00 7f 08 14 22 41 06 00 7f 40 40 40 40 06     ?....."A...@@@@.
    13b0:	00 7f 02 04 02 7f 06 00 7f 02 04 08 7f 06 00 3e     ...............>
    13c0:	41 41 41 3e 06 00 7f 09 09 09 06 06 00 3e 41 51     AAA>.........>AQ
    13d0:	21 5e 06 00 7f 09 09 19 66 06 00 26 49 49 49 32     !^......f..&III2
    13e0:	06 00 01 01 7f 01 01 06 00 3f 40 40 40 3f 06 00     .........?@@@?..
    13f0:	1f 20 40 20 1f 06 00 3f 40 3c 40 3f 06 00 63 14     . @ ...?@<@?..c.
    1400:	08 14 63 06 00 07 08 70 08 07 05 00 71 49 45 43     ..c....p....qIEC
    1410:	00 05 00 00 7f 41 41 00 06 00 02 04 08 10 20 05     .....AA....... .
    1420:	00 00 41 41 7f 00 06 00 04 02 01 02 04 06 80 80     ..AA............
    1430:	80 80 80 80 04 00 00 03 07 00 00 06 00 20 54 54     ............. TT
    1440:	54 78 06 00 7f 44 44 44 38 06 00 38 44 44 44 28     Tx...DDD8..8DDD(
    1450:	06 00 38 44 44 44 7f 06 00 38 54 54 54 08 05 00     ..8DDD...8TTT...
    1460:	08 7e 09 09 00 06 00 18 a4 a4 a4 7c 05 00 7f 04     .~.........|....
    1470:	04 78 00 05 00 00 00 7d 40 00 05 00 40 80 84 7d     .x.....}@...@..}
    1480:	00 05 00 7f 10 28 44 00 05 00 00 00 7f 40 00 06     .....(D......@..
    1490:	00 7c 04 18 04 78 05 00 7c 04 04 78 00 06 00 38     .|...x..|..x...8
    14a0:	44 44 44 38 06 00 fc 44 44 44 38 06 00 38 44 44     DDD8...DDD8..8DD
    14b0:	44 fc 06 00 44 78 44 04 08 06 00 08 54 54 54 20     D...DxD.....TTT 
    14c0:	05 00 04 3e 44 24 00 05 00 3c 40 20 7c 00 06 00     ...>D$...<@ |...
    14d0:	1c 20 40 20 1c 06 00 3c 60 30 60 3c 05 00 6c 10     . @ ...<`0`<..l.
    14e0:	10 6c 00 05 00 9c a0 60 3c 00 05 00 64 54 54 4c     .l.....`<...dTTL
    14f0:	00 05 00 08 3e 41 41 00 04 00 00 00 77 00 00 06     ....>AA.....w...
    1500:	00 00 41 41 3e 08 05 00 02 01 02 01 00 06 00 3c     ..AA>..........<
    1510:	26 23 26 3c                                         &#&<

00001514 <__ctors_end>:
    1514:	11 24       	eor	r1, r1
    1516:	1f be       	out	0x3f, r1	; 63
    1518:	cf ef       	ldi	r28, 0xFF	; 255
    151a:	d8 e0       	ldi	r29, 0x08	; 8
    151c:	de bf       	out	0x3e, r29	; 62
    151e:	cd bf       	out	0x3d, r28	; 61

00001520 <__do_copy_data>:
    1520:	12 e0       	ldi	r17, 0x02	; 2
    1522:	a0 e0       	ldi	r26, 0x00	; 0
    1524:	b1 e0       	ldi	r27, 0x01	; 1
    1526:	ea e4       	ldi	r30, 0x4A	; 74
    1528:	f3 e3       	ldi	r31, 0x33	; 51
    152a:	02 c0       	rjmp	.+4      	; 0x1530 <__do_copy_data+0x10>
    152c:	05 90       	lpm	r0, Z+
    152e:	0d 92       	st	X+, r0
    1530:	ae 38       	cpi	r26, 0x8E	; 142
    1532:	b1 07       	cpc	r27, r17
    1534:	d9 f7       	brne	.-10     	; 0x152c <__do_copy_data+0xc>

00001536 <__do_clear_bss>:
    1536:	22 e0       	ldi	r18, 0x02	; 2
    1538:	ae e8       	ldi	r26, 0x8E	; 142
    153a:	b2 e0       	ldi	r27, 0x02	; 2
    153c:	01 c0       	rjmp	.+2      	; 0x1540 <.do_clear_bss_start>

0000153e <.do_clear_bss_loop>:
    153e:	1d 92       	st	X+, r1

00001540 <.do_clear_bss_start>:
    1540:	ad 3b       	cpi	r26, 0xBD	; 189
    1542:	b2 07       	cpc	r27, r18
    1544:	e1 f7       	brne	.-8      	; 0x153e <.do_clear_bss_loop>
    1546:	0e 94 72 18 	call	0x30e4	; 0x30e4 <main>
    154a:	0c 94 a3 19 	jmp	0x3346	; 0x3346 <_exit>

0000154e <__bad_interrupt>:
    154e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00001552 <strobe_sck>:

void eeprom_ew_disable(void)
{
	eeprom_opcode(EWDS_OPCODE);				// ERASE/WRITE DISABLE instruction
	eeprom_address(EWDS_ADDRESS);
	PORTB &= ~(1 << EEPROM_CS_BIT);			// Put 93C86A into Standby Mode
    1552:	85 b1       	in	r24, 0x05	; 5
    1554:	88 60       	ori	r24, 0x08	; 8
    1556:	85 b9       	out	0x05, r24	; 5
    1558:	8f e9       	ldi	r24, 0x9F	; 159
    155a:	9f e0       	ldi	r25, 0x0F	; 15
    155c:	01 97       	sbiw	r24, 0x01	; 1
    155e:	f1 f7       	brne	.-4      	; 0x155c <strobe_sck+0xa>
    1560:	00 c0       	rjmp	.+0      	; 0x1562 <strobe_sck+0x10>
    1562:	00 00       	nop
    1564:	85 b1       	in	r24, 0x05	; 5
    1566:	87 7f       	andi	r24, 0xF7	; 247
    1568:	85 b9       	out	0x05, r24	; 5
    156a:	08 95       	ret

0000156c <eeprom_opcode>:
    156c:	cf 93       	push	r28
    156e:	c8 2f       	mov	r28, r24
    1570:	85 b1       	in	r24, 0x05	; 5
    1572:	8b 7f       	andi	r24, 0xFB	; 251
    1574:	85 b9       	out	0x05, r24	; 5
    1576:	0e 94 a9 0a 	call	0x1552	; 0x1552 <strobe_sck>
    157a:	85 b1       	in	r24, 0x05	; 5
    157c:	84 61       	ori	r24, 0x14	; 20
    157e:	85 b9       	out	0x05, r24	; 5
    1580:	0e 94 a9 0a 	call	0x1552	; 0x1552 <strobe_sck>
    1584:	c1 ff       	sbrs	r28, 1
    1586:	04 c0       	rjmp	.+8      	; 0x1590 <eeprom_opcode+0x24>
    1588:	85 b1       	in	r24, 0x05	; 5
    158a:	80 61       	ori	r24, 0x10	; 16
    158c:	85 b9       	out	0x05, r24	; 5
    158e:	03 c0       	rjmp	.+6      	; 0x1596 <eeprom_opcode+0x2a>
    1590:	85 b1       	in	r24, 0x05	; 5
    1592:	8f 7e       	andi	r24, 0xEF	; 239
    1594:	85 b9       	out	0x05, r24	; 5
    1596:	0e 94 a9 0a 	call	0x1552	; 0x1552 <strobe_sck>
    159a:	c0 ff       	sbrs	r28, 0
    159c:	04 c0       	rjmp	.+8      	; 0x15a6 <eeprom_opcode+0x3a>
    159e:	85 b1       	in	r24, 0x05	; 5
    15a0:	80 61       	ori	r24, 0x10	; 16
    15a2:	85 b9       	out	0x05, r24	; 5
    15a4:	03 c0       	rjmp	.+6      	; 0x15ac <eeprom_opcode+0x40>
    15a6:	85 b1       	in	r24, 0x05	; 5
    15a8:	8f 7e       	andi	r24, 0xEF	; 239
    15aa:	85 b9       	out	0x05, r24	; 5
    15ac:	0e 94 a9 0a 	call	0x1552	; 0x1552 <strobe_sck>
    15b0:	cf 91       	pop	r28
    15b2:	08 95       	ret

000015b4 <eeprom_address>:
    15b4:	1f 93       	push	r17
    15b6:	cf 93       	push	r28
    15b8:	df 93       	push	r29
    15ba:	18 2f       	mov	r17, r24
    15bc:	c0 e0       	ldi	r28, 0x00	; 0
    15be:	d0 e0       	ldi	r29, 0x00	; 0
    15c0:	0d c0       	rjmp	.+26     	; 0x15dc <eeprom_address+0x28>
    15c2:	11 23       	and	r17, r17
    15c4:	24 f4       	brge	.+8      	; 0x15ce <eeprom_address+0x1a>
    15c6:	85 b1       	in	r24, 0x05	; 5
    15c8:	80 61       	ori	r24, 0x10	; 16
    15ca:	85 b9       	out	0x05, r24	; 5
    15cc:	03 c0       	rjmp	.+6      	; 0x15d4 <eeprom_address+0x20>
    15ce:	85 b1       	in	r24, 0x05	; 5
    15d0:	8f 7e       	andi	r24, 0xEF	; 239
    15d2:	85 b9       	out	0x05, r24	; 5
    15d4:	0e 94 a9 0a 	call	0x1552	; 0x1552 <strobe_sck>
    15d8:	11 0f       	add	r17, r17
    15da:	21 96       	adiw	r28, 0x01	; 1
    15dc:	cb 30       	cpi	r28, 0x0B	; 11
    15de:	d1 05       	cpc	r29, r1
    15e0:	84 f3       	brlt	.-32     	; 0x15c2 <eeprom_address+0xe>
    15e2:	df 91       	pop	r29
    15e4:	cf 91       	pop	r28
    15e6:	1f 91       	pop	r17
    15e8:	08 95       	ret

000015ea <eeprom_ew_enable>:
}

void eeprom_ew_enable(void)
{
	eeprom_opcode(EWEN_OPCODE);				// ERASE/WRITE ENABLE instruction
    15ea:	80 e0       	ldi	r24, 0x00	; 0
    15ec:	0e 94 b6 0a 	call	0x156c	; 0x156c <eeprom_opcode>
	eeprom_address(EWEN_ADDRESS);
    15f0:	80 ec       	ldi	r24, 0xC0	; 192
    15f2:	0e 94 da 0a 	call	0x15b4	; 0x15b4 <eeprom_address>
	PORTB &= ~(1 << EEPROM_CS_BIT);			// Put 93C86A into Standby Mode
    15f6:	85 b1       	in	r24, 0x05	; 5
    15f8:	8b 7f       	andi	r24, 0xFB	; 251
    15fa:	85 b9       	out	0x05, r24	; 5
    15fc:	08 95       	ret

000015fe <eeprom_init>:

#include "eeprom_handle.h"

void eeprom_init(void)
{
	DDRB |= (1 << EEPROM_DI_BIT)| (1 << EEPROM_CLK_BIT)| (1 << EEPROM_CS_BIT);
    15fe:	84 b1       	in	r24, 0x04	; 4
    1600:	8c 61       	ori	r24, 0x1C	; 28
    1602:	84 b9       	out	0x04, r24	; 4
	
	eeprom_ew_enable();
    1604:	0e 94 f5 0a 	call	0x15ea	; 0x15ea <eeprom_ew_enable>
    1608:	08 95       	ret

0000160a <eeprom_read>:
	eeprom_address(EWEN_ADDRESS);
	PORTB &= ~(1 << EEPROM_CS_BIT);			// Put 93C86A into Standby Mode
}

uint8_t eeprom_read(uint8_t address)
{
    160a:	1f 93       	push	r17
    160c:	cf 93       	push	r28
    160e:	df 93       	push	r29
    1610:	c8 2f       	mov	r28, r24
	uint8_t divider = 0x80;
	uint8_t dataword = 0x00;
	
	eeprom_opcode(READ_OPCODE);				// READ instruction
    1612:	82 e0       	ldi	r24, 0x02	; 2
    1614:	0e 94 b6 0a 	call	0x156c	; 0x156c <eeprom_opcode>
	eeprom_address(address);
    1618:	8c 2f       	mov	r24, r28
    161a:	0e 94 da 0a 	call	0x15b4	; 0x15b4 <eeprom_address>
	
	strobe_sck();							// Fix a bit offset
    161e:	0e 94 a9 0a 	call	0x1552	; 0x1552 <strobe_sck>
	for (uint8_t i = 0; i <= 7; i++)
    1622:	c0 e0       	ldi	r28, 0x00	; 0
}

uint8_t eeprom_read(uint8_t address)
{
	uint8_t divider = 0x80;
	uint8_t dataword = 0x00;
    1624:	10 e0       	ldi	r17, 0x00	; 0
	PORTB &= ~(1 << EEPROM_CS_BIT);			// Put 93C86A into Standby Mode
}

uint8_t eeprom_read(uint8_t address)
{
	uint8_t divider = 0x80;
    1626:	d0 e8       	ldi	r29, 0x80	; 128
	
	eeprom_opcode(READ_OPCODE);				// READ instruction
	eeprom_address(address);
	
	strobe_sck();							// Fix a bit offset
	for (uint8_t i = 0; i <= 7; i++)
    1628:	06 c0       	rjmp	.+12     	; 0x1636 <eeprom_read+0x2c>
	{
		if (PINB & (1 << EEPROM_DO_BIT)) dataword = dataword + divider;
    162a:	1d 99       	sbic	0x03, 5	; 3
    162c:	1d 0f       	add	r17, r29
		divider = divider >> 1;
    162e:	d6 95       	lsr	r29
		strobe_sck();
    1630:	0e 94 a9 0a 	call	0x1552	; 0x1552 <strobe_sck>
	
	eeprom_opcode(READ_OPCODE);				// READ instruction
	eeprom_address(address);
	
	strobe_sck();							// Fix a bit offset
	for (uint8_t i = 0; i <= 7; i++)
    1634:	cf 5f       	subi	r28, 0xFF	; 255
    1636:	c8 30       	cpi	r28, 0x08	; 8
    1638:	c0 f3       	brcs	.-16     	; 0x162a <eeprom_read+0x20>
	{
		if (PINB & (1 << EEPROM_DO_BIT)) dataword = dataword + divider;
		divider = divider >> 1;
		strobe_sck();
	}
	PORTB &= ~(1 << EEPROM_CS_BIT);			// Put 93C86A into Standby Mode
    163a:	85 b1       	in	r24, 0x05	; 5
    163c:	8b 7f       	andi	r24, 0xFB	; 251
    163e:	85 b9       	out	0x05, r24	; 5
	
	return dataword;
}
    1640:	81 2f       	mov	r24, r17
    1642:	df 91       	pop	r29
    1644:	cf 91       	pop	r28
    1646:	1f 91       	pop	r17
    1648:	08 95       	ret

0000164a <eeprom_write>:

void eeprom_write(uint8_t address, uint8_t data)
{
    164a:	cf 93       	push	r28
    164c:	df 93       	push	r29
    164e:	c8 2f       	mov	r28, r24
    1650:	d6 2f       	mov	r29, r22
	eeprom_opcode(WRITE_OPCODE);			// WRITE instruction
    1652:	81 e0       	ldi	r24, 0x01	; 1
    1654:	0e 94 b6 0a 	call	0x156c	; 0x156c <eeprom_opcode>
	eeprom_address(address);
    1658:	8c 2f       	mov	r24, r28
    165a:	0e 94 da 0a 	call	0x15b4	; 0x15b4 <eeprom_address>
	
	for (uint8_t bit = 0x80; bit; bit >>= 1)
    165e:	c0 e8       	ldi	r28, 0x80	; 128
    1660:	0d c0       	rjmp	.+26     	; 0x167c <eeprom_write+0x32>
	{
		if (data & bit) PORTB |= (1 << EEPROM_DI_BIT);
    1662:	8c 2f       	mov	r24, r28
    1664:	8d 23       	and	r24, r29
    1666:	21 f0       	breq	.+8      	; 0x1670 <eeprom_write+0x26>
    1668:	85 b1       	in	r24, 0x05	; 5
    166a:	80 61       	ori	r24, 0x10	; 16
    166c:	85 b9       	out	0x05, r24	; 5
    166e:	03 c0       	rjmp	.+6      	; 0x1676 <eeprom_write+0x2c>
		else PORTB &= ~(1 << EEPROM_DI_BIT);
    1670:	85 b1       	in	r24, 0x05	; 5
    1672:	8f 7e       	andi	r24, 0xEF	; 239
    1674:	85 b9       	out	0x05, r24	; 5
		strobe_sck();
    1676:	0e 94 a9 0a 	call	0x1552	; 0x1552 <strobe_sck>
void eeprom_write(uint8_t address, uint8_t data)
{
	eeprom_opcode(WRITE_OPCODE);			// WRITE instruction
	eeprom_address(address);
	
	for (uint8_t bit = 0x80; bit; bit >>= 1)
    167a:	c6 95       	lsr	r28
    167c:	c1 11       	cpse	r28, r1
    167e:	f1 cf       	rjmp	.-30     	; 0x1662 <eeprom_write+0x18>
		if (data & bit) PORTB |= (1 << EEPROM_DI_BIT);
		else PORTB &= ~(1 << EEPROM_DI_BIT);
		strobe_sck();
	}
	
	PORTB &= ~(1 << EEPROM_CS_BIT);			// Put 93C86A into Standby Mode
    1680:	85 b1       	in	r24, 0x05	; 5
    1682:	8b 7f       	andi	r24, 0xFB	; 251
    1684:	85 b9       	out	0x05, r24	; 5
}
    1686:	df 91       	pop	r29
    1688:	cf 91       	pop	r28
    168a:	08 95       	ret

0000168c <write_world_to_eeprom>:

void generate_empty_world() {
	for (int h = 0; h < TOTAL_ROWS; h++)
	for (int w = 0; w < TOTAL_COLS; w++)
	current_world[h][w] = 0x00;
}
    168c:	0f 93       	push	r16
    168e:	1f 93       	push	r17
    1690:	cf 93       	push	r28
    1692:	df 93       	push	r29
    1694:	00 e0       	ldi	r16, 0x00	; 0
    1696:	10 e0       	ldi	r17, 0x00	; 0
    1698:	27 c0       	rjmp	.+78     	; 0x16e8 <write_world_to_eeprom+0x5c>
    169a:	c8 01       	movw	r24, r16
    169c:	82 95       	swap	r24
    169e:	92 95       	swap	r25
    16a0:	90 7f       	andi	r25, 0xF0	; 240
    16a2:	98 27       	eor	r25, r24
    16a4:	80 7f       	andi	r24, 0xF0	; 240
    16a6:	98 27       	eor	r25, r24
    16a8:	13 fd       	sbrc	r17, 3
    16aa:	07 96       	adiw	r24, 0x07	; 7
    16ac:	95 95       	asr	r25
    16ae:	87 95       	ror	r24
    16b0:	95 95       	asr	r25
    16b2:	87 95       	ror	r24
    16b4:	95 95       	asr	r25
    16b6:	87 95       	ror	r24
    16b8:	f8 01       	movw	r30, r16
    16ba:	ee 0f       	add	r30, r30
    16bc:	ff 1f       	adc	r31, r31
    16be:	e2 57       	subi	r30, 0x72	; 114
    16c0:	fd 4f       	sbci	r31, 0xFD	; 253
    16c2:	ec 0f       	add	r30, r28
    16c4:	fd 1f       	adc	r31, r29
    16c6:	60 81       	ld	r22, Z
    16c8:	8c 0f       	add	r24, r28
    16ca:	0e 94 25 0b 	call	0x164a	; 0x164a <eeprom_write>
    16ce:	85 e0       	ldi	r24, 0x05	; 5
    16d0:	8a 95       	dec	r24
    16d2:	f1 f7       	brne	.-4      	; 0x16d0 <write_world_to_eeprom+0x44>
    16d4:	00 00       	nop
    16d6:	21 96       	adiw	r28, 0x01	; 1
    16d8:	02 c0       	rjmp	.+4      	; 0x16de <write_world_to_eeprom+0x52>
    16da:	c0 e0       	ldi	r28, 0x00	; 0
    16dc:	d0 e0       	ldi	r29, 0x00	; 0
    16de:	c2 30       	cpi	r28, 0x02	; 2
    16e0:	d1 05       	cpc	r29, r1
    16e2:	dc f2       	brlt	.-74     	; 0x169a <write_world_to_eeprom+0xe>
    16e4:	0f 5f       	subi	r16, 0xFF	; 255
    16e6:	1f 4f       	sbci	r17, 0xFF	; 255
    16e8:	00 31       	cpi	r16, 0x10	; 16
    16ea:	11 05       	cpc	r17, r1
    16ec:	b4 f3       	brlt	.-20     	; 0x16da <write_world_to_eeprom+0x4e>
    16ee:	df 91       	pop	r29
    16f0:	cf 91       	pop	r28
    16f2:	1f 91       	pop	r17
    16f4:	0f 91       	pop	r16
    16f6:	08 95       	ret

000016f8 <read_world_from_eeprom>:
    16f8:	0f 93       	push	r16
    16fa:	1f 93       	push	r17
    16fc:	cf 93       	push	r28
    16fe:	df 93       	push	r29
    1700:	00 e0       	ldi	r16, 0x00	; 0
    1702:	10 e0       	ldi	r17, 0x00	; 0
    1704:	23 c0       	rjmp	.+70     	; 0x174c <read_world_from_eeprom+0x54>
    1706:	c8 01       	movw	r24, r16
    1708:	82 95       	swap	r24
    170a:	92 95       	swap	r25
    170c:	90 7f       	andi	r25, 0xF0	; 240
    170e:	98 27       	eor	r25, r24
    1710:	80 7f       	andi	r24, 0xF0	; 240
    1712:	98 27       	eor	r25, r24
    1714:	13 fd       	sbrc	r17, 3
    1716:	07 96       	adiw	r24, 0x07	; 7
    1718:	95 95       	asr	r25
    171a:	87 95       	ror	r24
    171c:	95 95       	asr	r25
    171e:	87 95       	ror	r24
    1720:	95 95       	asr	r25
    1722:	87 95       	ror	r24
    1724:	8c 0f       	add	r24, r28
    1726:	0e 94 05 0b 	call	0x160a	; 0x160a <eeprom_read>
    172a:	f8 01       	movw	r30, r16
    172c:	ee 0f       	add	r30, r30
    172e:	ff 1f       	adc	r31, r31
    1730:	e2 57       	subi	r30, 0x72	; 114
    1732:	fd 4f       	sbci	r31, 0xFD	; 253
    1734:	ec 0f       	add	r30, r28
    1736:	fd 1f       	adc	r31, r29
    1738:	80 83       	st	Z, r24
    173a:	21 96       	adiw	r28, 0x01	; 1
    173c:	02 c0       	rjmp	.+4      	; 0x1742 <read_world_from_eeprom+0x4a>
    173e:	c0 e0       	ldi	r28, 0x00	; 0
    1740:	d0 e0       	ldi	r29, 0x00	; 0
    1742:	c2 30       	cpi	r28, 0x02	; 2
    1744:	d1 05       	cpc	r29, r1
    1746:	fc f2       	brlt	.-66     	; 0x1706 <read_world_from_eeprom+0xe>
    1748:	0f 5f       	subi	r16, 0xFF	; 255
    174a:	1f 4f       	sbci	r17, 0xFF	; 255
    174c:	00 31       	cpi	r16, 0x10	; 16
    174e:	11 05       	cpc	r17, r1
    1750:	b4 f3       	brlt	.-20     	; 0x173e <read_world_from_eeprom+0x46>
    1752:	df 91       	pop	r29
    1754:	cf 91       	pop	r28
    1756:	1f 91       	pop	r17
    1758:	0f 91       	pop	r16
    175a:	08 95       	ret

0000175c <game_rule_check>:
    175c:	ef 92       	push	r14
    175e:	ff 92       	push	r15
    1760:	0f 93       	push	r16
    1762:	1f 93       	push	r17
    1764:	cf 93       	push	r28
    1766:	df 93       	push	r29
    1768:	cd b7       	in	r28, 0x3d	; 61
    176a:	de b7       	in	r29, 0x3e	; 62
    176c:	60 97       	sbiw	r28, 0x10	; 16
    176e:	0f b6       	in	r0, 0x3f	; 63
    1770:	f8 94       	cli
    1772:	de bf       	out	0x3e, r29	; 62
    1774:	0f be       	out	0x3f, r0	; 63
    1776:	cd bf       	out	0x3d, r28	; 61
    1778:	20 e0       	ldi	r18, 0x00	; 0
    177a:	30 e0       	ldi	r19, 0x00	; 0
    177c:	0d c0       	rjmp	.+26     	; 0x1798 <game_rule_check+0x3c>
    177e:	f9 01       	movw	r30, r18
    1780:	ee 0f       	add	r30, r30
    1782:	ff 1f       	adc	r31, r31
    1784:	01 e0       	ldi	r16, 0x01	; 1
    1786:	10 e0       	ldi	r17, 0x00	; 0
    1788:	0c 0f       	add	r16, r28
    178a:	1d 1f       	adc	r17, r29
    178c:	e0 0f       	add	r30, r16
    178e:	f1 1f       	adc	r31, r17
    1790:	11 82       	std	Z+1, r1	; 0x01
    1792:	10 82       	st	Z, r1
    1794:	2f 5f       	subi	r18, 0xFF	; 255
    1796:	3f 4f       	sbci	r19, 0xFF	; 255
    1798:	28 30       	cpi	r18, 0x08	; 8
    179a:	31 05       	cpc	r19, r1
    179c:	84 f3       	brlt	.-32     	; 0x177e <game_rule_check+0x22>
    179e:	18 16       	cp	r1, r24
    17a0:	19 06       	cpc	r1, r25
    17a2:	0c f0       	brlt	.+2      	; 0x17a6 <game_rule_check+0x4a>
    17a4:	82 c0       	rjmp	.+260    	; 0x18aa <game_rule_check+0x14e>
    17a6:	7c 01       	movw	r14, r24
    17a8:	11 e0       	ldi	r17, 0x01	; 1
    17aa:	e1 1a       	sub	r14, r17
    17ac:	f1 08       	sbc	r15, r1
    17ae:	f7 01       	movw	r30, r14
    17b0:	ee 0f       	add	r30, r30
    17b2:	ff 1f       	adc	r31, r31
    17b4:	e2 57       	subi	r30, 0x72	; 114
    17b6:	fd 4f       	sbci	r31, 0xFD	; 253
    17b8:	e6 0f       	add	r30, r22
    17ba:	f7 1f       	adc	r31, r23
    17bc:	e0 81       	ld	r30, Z
    17be:	f0 e0       	ldi	r31, 0x00	; 0
    17c0:	20 e8       	ldi	r18, 0x80	; 128
    17c2:	30 e0       	ldi	r19, 0x00	; 0
    17c4:	04 2e       	mov	r0, r20
    17c6:	02 c0       	rjmp	.+4      	; 0x17cc <game_rule_check+0x70>
    17c8:	35 95       	asr	r19
    17ca:	27 95       	ror	r18
    17cc:	0a 94       	dec	r0
    17ce:	e2 f7       	brpl	.-8      	; 0x17c8 <game_rule_check+0x6c>
    17d0:	2e 23       	and	r18, r30
    17d2:	3f 23       	and	r19, r31
    17d4:	07 e0       	ldi	r16, 0x07	; 7
    17d6:	10 e0       	ldi	r17, 0x00	; 0
    17d8:	04 1b       	sub	r16, r20
    17da:	15 0b       	sbc	r17, r21
    17dc:	02 c0       	rjmp	.+4      	; 0x17e2 <game_rule_check+0x86>
    17de:	35 95       	asr	r19
    17e0:	27 95       	ror	r18
    17e2:	0a 95       	dec	r16
    17e4:	e2 f7       	brpl	.-8      	; 0x17de <game_rule_check+0x82>
    17e6:	3c 83       	std	Y+4, r19	; 0x04
    17e8:	2b 83       	std	Y+3, r18	; 0x03
    17ea:	14 16       	cp	r1, r20
    17ec:	15 06       	cpc	r1, r21
    17ee:	c4 f4       	brge	.+48     	; 0x1820 <game_rule_check+0xc4>
    17f0:	8a 01       	movw	r16, r20
    17f2:	01 50       	subi	r16, 0x01	; 1
    17f4:	11 09       	sbc	r17, r1
    17f6:	20 e8       	ldi	r18, 0x80	; 128
    17f8:	30 e0       	ldi	r19, 0x00	; 0
    17fa:	02 c0       	rjmp	.+4      	; 0x1800 <game_rule_check+0xa4>
    17fc:	35 95       	asr	r19
    17fe:	27 95       	ror	r18
    1800:	0a 95       	dec	r16
    1802:	e2 f7       	brpl	.-8      	; 0x17fc <game_rule_check+0xa0>
    1804:	2e 23       	and	r18, r30
    1806:	3f 23       	and	r19, r31
    1808:	08 e0       	ldi	r16, 0x08	; 8
    180a:	10 e0       	ldi	r17, 0x00	; 0
    180c:	04 1b       	sub	r16, r20
    180e:	15 0b       	sbc	r17, r21
    1810:	02 c0       	rjmp	.+4      	; 0x1816 <game_rule_check+0xba>
    1812:	35 95       	asr	r19
    1814:	27 95       	ror	r18
    1816:	0a 95       	dec	r16
    1818:	e2 f7       	brpl	.-8      	; 0x1812 <game_rule_check+0xb6>
    181a:	3a 83       	std	Y+2, r19	; 0x02
    181c:	29 83       	std	Y+1, r18	; 0x01
    181e:	15 c0       	rjmp	.+42     	; 0x184a <game_rule_check+0xee>
    1820:	16 16       	cp	r1, r22
    1822:	17 06       	cpc	r1, r23
    1824:	84 f4       	brge	.+32     	; 0x1846 <game_rule_check+0xea>
    1826:	97 01       	movw	r18, r14
    1828:	22 0f       	add	r18, r18
    182a:	33 1f       	adc	r19, r19
    182c:	22 57       	subi	r18, 0x72	; 114
    182e:	3d 4f       	sbci	r19, 0xFD	; 253
    1830:	8b 01       	movw	r16, r22
    1832:	01 50       	subi	r16, 0x01	; 1
    1834:	11 09       	sbc	r17, r1
    1836:	20 0f       	add	r18, r16
    1838:	31 1f       	adc	r19, r17
    183a:	d9 01       	movw	r26, r18
    183c:	2c 91       	ld	r18, X
    183e:	21 70       	andi	r18, 0x01	; 1
    1840:	29 83       	std	Y+1, r18	; 0x01
    1842:	1a 82       	std	Y+2, r1	; 0x02
    1844:	02 c0       	rjmp	.+4      	; 0x184a <game_rule_check+0xee>
    1846:	1a 82       	std	Y+2, r1	; 0x02
    1848:	19 82       	std	Y+1, r1	; 0x01
    184a:	47 30       	cpi	r20, 0x07	; 7
    184c:	51 05       	cpc	r21, r1
    184e:	bc f4       	brge	.+46     	; 0x187e <game_rule_check+0x122>
    1850:	da 01       	movw	r26, r20
    1852:	11 96       	adiw	r26, 0x01	; 1
    1854:	20 e8       	ldi	r18, 0x80	; 128
    1856:	30 e0       	ldi	r19, 0x00	; 0
    1858:	02 c0       	rjmp	.+4      	; 0x185e <game_rule_check+0x102>
    185a:	35 95       	asr	r19
    185c:	27 95       	ror	r18
    185e:	aa 95       	dec	r26
    1860:	e2 f7       	brpl	.-8      	; 0x185a <game_rule_check+0xfe>
    1862:	e2 23       	and	r30, r18
    1864:	f3 23       	and	r31, r19
    1866:	26 e0       	ldi	r18, 0x06	; 6
    1868:	30 e0       	ldi	r19, 0x00	; 0
    186a:	24 1b       	sub	r18, r20
    186c:	35 0b       	sbc	r19, r21
    186e:	02 c0       	rjmp	.+4      	; 0x1874 <game_rule_check+0x118>
    1870:	f5 95       	asr	r31
    1872:	e7 95       	ror	r30
    1874:	2a 95       	dec	r18
    1876:	e2 f7       	brpl	.-8      	; 0x1870 <game_rule_check+0x114>
    1878:	fe 83       	std	Y+6, r31	; 0x06
    187a:	ed 83       	std	Y+5, r30	; 0x05
    187c:	1c c0       	rjmp	.+56     	; 0x18b6 <game_rule_check+0x15a>
    187e:	6f 30       	cpi	r22, 0x0F	; 15
    1880:	71 05       	cpc	r23, r1
    1882:	84 f4       	brge	.+32     	; 0x18a4 <game_rule_check+0x148>
    1884:	d7 01       	movw	r26, r14
    1886:	aa 0f       	add	r26, r26
    1888:	bb 1f       	adc	r27, r27
    188a:	a2 57       	subi	r26, 0x72	; 114
    188c:	bd 4f       	sbci	r27, 0xFD	; 253
    188e:	9b 01       	movw	r18, r22
    1890:	2f 5f       	subi	r18, 0xFF	; 255
    1892:	3f 4f       	sbci	r19, 0xFF	; 255
    1894:	a2 0f       	add	r26, r18
    1896:	b3 1f       	adc	r27, r19
    1898:	2c 91       	ld	r18, X
    189a:	20 78       	andi	r18, 0x80	; 128
    189c:	30 e0       	ldi	r19, 0x00	; 0
    189e:	3e 83       	std	Y+6, r19	; 0x06
    18a0:	2d 83       	std	Y+5, r18	; 0x05
    18a2:	09 c0       	rjmp	.+18     	; 0x18b6 <game_rule_check+0x15a>
    18a4:	1e 82       	std	Y+6, r1	; 0x06
    18a6:	1d 82       	std	Y+5, r1	; 0x05
    18a8:	06 c0       	rjmp	.+12     	; 0x18b6 <game_rule_check+0x15a>
    18aa:	1a 82       	std	Y+2, r1	; 0x02
    18ac:	19 82       	std	Y+1, r1	; 0x01
    18ae:	1c 82       	std	Y+4, r1	; 0x04
    18b0:	1b 82       	std	Y+3, r1	; 0x03
    18b2:	1e 82       	std	Y+6, r1	; 0x06
    18b4:	1d 82       	std	Y+5, r1	; 0x05
    18b6:	8f 30       	cpi	r24, 0x0F	; 15
    18b8:	91 05       	cpc	r25, r1
    18ba:	0c f0       	brlt	.+2      	; 0x18be <game_rule_check+0x162>
    18bc:	83 c0       	rjmp	.+262    	; 0x19c4 <game_rule_check+0x268>
    18be:	7c 01       	movw	r14, r24
    18c0:	bf ef       	ldi	r27, 0xFF	; 255
    18c2:	eb 1a       	sub	r14, r27
    18c4:	fb 0a       	sbc	r15, r27
    18c6:	f7 01       	movw	r30, r14
    18c8:	ee 0f       	add	r30, r30
    18ca:	ff 1f       	adc	r31, r31
    18cc:	e2 57       	subi	r30, 0x72	; 114
    18ce:	fd 4f       	sbci	r31, 0xFD	; 253
    18d0:	e6 0f       	add	r30, r22
    18d2:	f7 1f       	adc	r31, r23
    18d4:	e0 81       	ld	r30, Z
    18d6:	f0 e0       	ldi	r31, 0x00	; 0
    18d8:	20 e8       	ldi	r18, 0x80	; 128
    18da:	30 e0       	ldi	r19, 0x00	; 0
    18dc:	04 2e       	mov	r0, r20
    18de:	02 c0       	rjmp	.+4      	; 0x18e4 <game_rule_check+0x188>
    18e0:	35 95       	asr	r19
    18e2:	27 95       	ror	r18
    18e4:	0a 94       	dec	r0
    18e6:	e2 f7       	brpl	.-8      	; 0x18e0 <game_rule_check+0x184>
    18e8:	2e 23       	and	r18, r30
    18ea:	3f 23       	and	r19, r31
    18ec:	07 e0       	ldi	r16, 0x07	; 7
    18ee:	10 e0       	ldi	r17, 0x00	; 0
    18f0:	04 1b       	sub	r16, r20
    18f2:	15 0b       	sbc	r17, r21
    18f4:	02 c0       	rjmp	.+4      	; 0x18fa <game_rule_check+0x19e>
    18f6:	35 95       	asr	r19
    18f8:	27 95       	ror	r18
    18fa:	0a 95       	dec	r16
    18fc:	e2 f7       	brpl	.-8      	; 0x18f6 <game_rule_check+0x19a>
    18fe:	3c 87       	std	Y+12, r19	; 0x0c
    1900:	2b 87       	std	Y+11, r18	; 0x0b
    1902:	14 16       	cp	r1, r20
    1904:	15 06       	cpc	r1, r21
    1906:	c4 f4       	brge	.+48     	; 0x1938 <game_rule_check+0x1dc>
    1908:	8a 01       	movw	r16, r20
    190a:	01 50       	subi	r16, 0x01	; 1
    190c:	11 09       	sbc	r17, r1
    190e:	20 e8       	ldi	r18, 0x80	; 128
    1910:	30 e0       	ldi	r19, 0x00	; 0
    1912:	02 c0       	rjmp	.+4      	; 0x1918 <game_rule_check+0x1bc>
    1914:	35 95       	asr	r19
    1916:	27 95       	ror	r18
    1918:	0a 95       	dec	r16
    191a:	e2 f7       	brpl	.-8      	; 0x1914 <game_rule_check+0x1b8>
    191c:	2e 23       	and	r18, r30
    191e:	3f 23       	and	r19, r31
    1920:	08 e0       	ldi	r16, 0x08	; 8
    1922:	10 e0       	ldi	r17, 0x00	; 0
    1924:	04 1b       	sub	r16, r20
    1926:	15 0b       	sbc	r17, r21
    1928:	02 c0       	rjmp	.+4      	; 0x192e <game_rule_check+0x1d2>
    192a:	35 95       	asr	r19
    192c:	27 95       	ror	r18
    192e:	0a 95       	dec	r16
    1930:	e2 f7       	brpl	.-8      	; 0x192a <game_rule_check+0x1ce>
    1932:	3e 87       	std	Y+14, r19	; 0x0e
    1934:	2d 87       	std	Y+13, r18	; 0x0d
    1936:	16 c0       	rjmp	.+44     	; 0x1964 <game_rule_check+0x208>
    1938:	16 16       	cp	r1, r22
    193a:	17 06       	cpc	r1, r23
    193c:	8c f4       	brge	.+34     	; 0x1960 <game_rule_check+0x204>
    193e:	97 01       	movw	r18, r14
    1940:	22 0f       	add	r18, r18
    1942:	33 1f       	adc	r19, r19
    1944:	89 01       	movw	r16, r18
    1946:	02 57       	subi	r16, 0x72	; 114
    1948:	1d 4f       	sbci	r17, 0xFD	; 253
    194a:	9b 01       	movw	r18, r22
    194c:	21 50       	subi	r18, 0x01	; 1
    194e:	31 09       	sbc	r19, r1
    1950:	20 0f       	add	r18, r16
    1952:	31 1f       	adc	r19, r17
    1954:	d9 01       	movw	r26, r18
    1956:	2c 91       	ld	r18, X
    1958:	21 70       	andi	r18, 0x01	; 1
    195a:	2d 87       	std	Y+13, r18	; 0x0d
    195c:	1e 86       	std	Y+14, r1	; 0x0e
    195e:	02 c0       	rjmp	.+4      	; 0x1964 <game_rule_check+0x208>
    1960:	1e 86       	std	Y+14, r1	; 0x0e
    1962:	1d 86       	std	Y+13, r1	; 0x0d
    1964:	47 30       	cpi	r20, 0x07	; 7
    1966:	51 05       	cpc	r21, r1
    1968:	bc f4       	brge	.+46     	; 0x1998 <game_rule_check+0x23c>
    196a:	da 01       	movw	r26, r20
    196c:	11 96       	adiw	r26, 0x01	; 1
    196e:	20 e8       	ldi	r18, 0x80	; 128
    1970:	30 e0       	ldi	r19, 0x00	; 0
    1972:	02 c0       	rjmp	.+4      	; 0x1978 <game_rule_check+0x21c>
    1974:	35 95       	asr	r19
    1976:	27 95       	ror	r18
    1978:	aa 95       	dec	r26
    197a:	e2 f7       	brpl	.-8      	; 0x1974 <game_rule_check+0x218>
    197c:	e2 23       	and	r30, r18
    197e:	f3 23       	and	r31, r19
    1980:	26 e0       	ldi	r18, 0x06	; 6
    1982:	30 e0       	ldi	r19, 0x00	; 0
    1984:	24 1b       	sub	r18, r20
    1986:	35 0b       	sbc	r19, r21
    1988:	02 c0       	rjmp	.+4      	; 0x198e <game_rule_check+0x232>
    198a:	f5 95       	asr	r31
    198c:	e7 95       	ror	r30
    198e:	2a 95       	dec	r18
    1990:	e2 f7       	brpl	.-8      	; 0x198a <game_rule_check+0x22e>
    1992:	fa 87       	std	Y+10, r31	; 0x0a
    1994:	e9 87       	std	Y+9, r30	; 0x09
    1996:	1c c0       	rjmp	.+56     	; 0x19d0 <game_rule_check+0x274>
    1998:	6f 30       	cpi	r22, 0x0F	; 15
    199a:	71 05       	cpc	r23, r1
    199c:	84 f4       	brge	.+32     	; 0x19be <game_rule_check+0x262>
    199e:	d7 01       	movw	r26, r14
    19a0:	aa 0f       	add	r26, r26
    19a2:	bb 1f       	adc	r27, r27
    19a4:	a2 57       	subi	r26, 0x72	; 114
    19a6:	bd 4f       	sbci	r27, 0xFD	; 253
    19a8:	9b 01       	movw	r18, r22
    19aa:	2f 5f       	subi	r18, 0xFF	; 255
    19ac:	3f 4f       	sbci	r19, 0xFF	; 255
    19ae:	a2 0f       	add	r26, r18
    19b0:	b3 1f       	adc	r27, r19
    19b2:	2c 91       	ld	r18, X
    19b4:	20 78       	andi	r18, 0x80	; 128
    19b6:	30 e0       	ldi	r19, 0x00	; 0
    19b8:	3a 87       	std	Y+10, r19	; 0x0a
    19ba:	29 87       	std	Y+9, r18	; 0x09
    19bc:	09 c0       	rjmp	.+18     	; 0x19d0 <game_rule_check+0x274>
    19be:	1a 86       	std	Y+10, r1	; 0x0a
    19c0:	19 86       	std	Y+9, r1	; 0x09
    19c2:	06 c0       	rjmp	.+12     	; 0x19d0 <game_rule_check+0x274>
    19c4:	1a 86       	std	Y+10, r1	; 0x0a
    19c6:	19 86       	std	Y+9, r1	; 0x09
    19c8:	1c 86       	std	Y+12, r1	; 0x0c
    19ca:	1b 86       	std	Y+11, r1	; 0x0b
    19cc:	1e 86       	std	Y+14, r1	; 0x0e
    19ce:	1d 86       	std	Y+13, r1	; 0x0d
    19d0:	14 16       	cp	r1, r20
    19d2:	15 06       	cpc	r1, r21
    19d4:	14 f5       	brge	.+68     	; 0x1a1a <game_rule_check+0x2be>
    19d6:	fc 01       	movw	r30, r24
    19d8:	ee 0f       	add	r30, r30
    19da:	ff 1f       	adc	r31, r31
    19dc:	e2 57       	subi	r30, 0x72	; 114
    19de:	fd 4f       	sbci	r31, 0xFD	; 253
    19e0:	e6 0f       	add	r30, r22
    19e2:	f7 1f       	adc	r31, r23
    19e4:	a0 81       	ld	r26, Z
    19e6:	fa 01       	movw	r30, r20
    19e8:	31 97       	sbiw	r30, 0x01	; 1
    19ea:	20 e8       	ldi	r18, 0x80	; 128
    19ec:	30 e0       	ldi	r19, 0x00	; 0
    19ee:	89 01       	movw	r16, r18
    19f0:	02 c0       	rjmp	.+4      	; 0x19f6 <game_rule_check+0x29a>
    19f2:	15 95       	asr	r17
    19f4:	07 95       	ror	r16
    19f6:	ea 95       	dec	r30
    19f8:	e2 f7       	brpl	.-8      	; 0x19f2 <game_rule_check+0x296>
    19fa:	2a 2f       	mov	r18, r26
    19fc:	30 e0       	ldi	r19, 0x00	; 0
    19fe:	20 23       	and	r18, r16
    1a00:	31 23       	and	r19, r17
    1a02:	e8 e0       	ldi	r30, 0x08	; 8
    1a04:	f0 e0       	ldi	r31, 0x00	; 0
    1a06:	e4 1b       	sub	r30, r20
    1a08:	f5 0b       	sbc	r31, r21
    1a0a:	02 c0       	rjmp	.+4      	; 0x1a10 <game_rule_check+0x2b4>
    1a0c:	35 95       	asr	r19
    1a0e:	27 95       	ror	r18
    1a10:	ea 95       	dec	r30
    1a12:	e2 f7       	brpl	.-8      	; 0x1a0c <game_rule_check+0x2b0>
    1a14:	38 8b       	std	Y+16, r19	; 0x10
    1a16:	2f 87       	std	Y+15, r18	; 0x0f
    1a18:	14 c0       	rjmp	.+40     	; 0x1a42 <game_rule_check+0x2e6>
    1a1a:	16 16       	cp	r1, r22
    1a1c:	17 06       	cpc	r1, r23
    1a1e:	7c f4       	brge	.+30     	; 0x1a3e <game_rule_check+0x2e2>
    1a20:	fc 01       	movw	r30, r24
    1a22:	ee 0f       	add	r30, r30
    1a24:	ff 1f       	adc	r31, r31
    1a26:	e2 57       	subi	r30, 0x72	; 114
    1a28:	fd 4f       	sbci	r31, 0xFD	; 253
    1a2a:	9b 01       	movw	r18, r22
    1a2c:	21 50       	subi	r18, 0x01	; 1
    1a2e:	31 09       	sbc	r19, r1
    1a30:	e2 0f       	add	r30, r18
    1a32:	f3 1f       	adc	r31, r19
    1a34:	20 81       	ld	r18, Z
    1a36:	21 70       	andi	r18, 0x01	; 1
    1a38:	2f 87       	std	Y+15, r18	; 0x0f
    1a3a:	18 8a       	std	Y+16, r1	; 0x10
    1a3c:	02 c0       	rjmp	.+4      	; 0x1a42 <game_rule_check+0x2e6>
    1a3e:	18 8a       	std	Y+16, r1	; 0x10
    1a40:	1f 86       	std	Y+15, r1	; 0x0f
    1a42:	47 30       	cpi	r20, 0x07	; 7
    1a44:	51 05       	cpc	r21, r1
    1a46:	14 f5       	brge	.+68     	; 0x1a8c <game_rule_check+0x330>
    1a48:	fc 01       	movw	r30, r24
    1a4a:	ee 0f       	add	r30, r30
    1a4c:	ff 1f       	adc	r31, r31
    1a4e:	e2 57       	subi	r30, 0x72	; 114
    1a50:	fd 4f       	sbci	r31, 0xFD	; 253
    1a52:	e6 0f       	add	r30, r22
    1a54:	f7 1f       	adc	r31, r23
    1a56:	a0 81       	ld	r26, Z
    1a58:	fa 01       	movw	r30, r20
    1a5a:	31 96       	adiw	r30, 0x01	; 1
    1a5c:	20 e8       	ldi	r18, 0x80	; 128
    1a5e:	30 e0       	ldi	r19, 0x00	; 0
    1a60:	89 01       	movw	r16, r18
    1a62:	02 c0       	rjmp	.+4      	; 0x1a68 <game_rule_check+0x30c>
    1a64:	15 95       	asr	r17
    1a66:	07 95       	ror	r16
    1a68:	ea 95       	dec	r30
    1a6a:	e2 f7       	brpl	.-8      	; 0x1a64 <game_rule_check+0x308>
    1a6c:	2a 2f       	mov	r18, r26
    1a6e:	30 e0       	ldi	r19, 0x00	; 0
    1a70:	20 23       	and	r18, r16
    1a72:	31 23       	and	r19, r17
    1a74:	e6 e0       	ldi	r30, 0x06	; 6
    1a76:	f0 e0       	ldi	r31, 0x00	; 0
    1a78:	e4 1b       	sub	r30, r20
    1a7a:	f5 0b       	sbc	r31, r21
    1a7c:	02 c0       	rjmp	.+4      	; 0x1a82 <game_rule_check+0x326>
    1a7e:	35 95       	asr	r19
    1a80:	27 95       	ror	r18
    1a82:	ea 95       	dec	r30
    1a84:	e2 f7       	brpl	.-8      	; 0x1a7e <game_rule_check+0x322>
    1a86:	38 87       	std	Y+8, r19	; 0x08
    1a88:	2f 83       	std	Y+7, r18	; 0x07
    1a8a:	15 c0       	rjmp	.+42     	; 0x1ab6 <game_rule_check+0x35a>
    1a8c:	6f 30       	cpi	r22, 0x0F	; 15
    1a8e:	71 05       	cpc	r23, r1
    1a90:	84 f4       	brge	.+32     	; 0x1ab2 <game_rule_check+0x356>
    1a92:	fc 01       	movw	r30, r24
    1a94:	ee 0f       	add	r30, r30
    1a96:	ff 1f       	adc	r31, r31
    1a98:	e2 57       	subi	r30, 0x72	; 114
    1a9a:	fd 4f       	sbci	r31, 0xFD	; 253
    1a9c:	9b 01       	movw	r18, r22
    1a9e:	2f 5f       	subi	r18, 0xFF	; 255
    1aa0:	3f 4f       	sbci	r19, 0xFF	; 255
    1aa2:	e2 0f       	add	r30, r18
    1aa4:	f3 1f       	adc	r31, r19
    1aa6:	20 81       	ld	r18, Z
    1aa8:	20 78       	andi	r18, 0x80	; 128
    1aaa:	30 e0       	ldi	r19, 0x00	; 0
    1aac:	38 87       	std	Y+8, r19	; 0x08
    1aae:	2f 83       	std	Y+7, r18	; 0x07
    1ab0:	02 c0       	rjmp	.+4      	; 0x1ab6 <game_rule_check+0x35a>
    1ab2:	18 86       	std	Y+8, r1	; 0x08
    1ab4:	1f 82       	std	Y+7, r1	; 0x07
    1ab6:	88 0f       	add	r24, r24
    1ab8:	99 1f       	adc	r25, r25
    1aba:	82 57       	subi	r24, 0x72	; 114
    1abc:	9d 4f       	sbci	r25, 0xFD	; 253
    1abe:	fc 01       	movw	r30, r24
    1ac0:	e6 0f       	add	r30, r22
    1ac2:	f7 1f       	adc	r31, r23
    1ac4:	20 81       	ld	r18, Z
    1ac6:	60 e8       	ldi	r22, 0x80	; 128
    1ac8:	70 e0       	ldi	r23, 0x00	; 0
    1aca:	cb 01       	movw	r24, r22
    1acc:	04 2e       	mov	r0, r20
    1ace:	02 c0       	rjmp	.+4      	; 0x1ad4 <game_rule_check+0x378>
    1ad0:	95 95       	asr	r25
    1ad2:	87 95       	ror	r24
    1ad4:	0a 94       	dec	r0
    1ad6:	e2 f7       	brpl	.-8      	; 0x1ad0 <game_rule_check+0x374>
    1ad8:	62 2f       	mov	r22, r18
    1ada:	70 e0       	ldi	r23, 0x00	; 0
    1adc:	68 23       	and	r22, r24
    1ade:	79 23       	and	r23, r25
    1ae0:	87 e0       	ldi	r24, 0x07	; 7
    1ae2:	90 e0       	ldi	r25, 0x00	; 0
    1ae4:	84 1b       	sub	r24, r20
    1ae6:	95 0b       	sbc	r25, r21
    1ae8:	02 c0       	rjmp	.+4      	; 0x1aee <game_rule_check+0x392>
    1aea:	75 95       	asr	r23
    1aec:	67 95       	ror	r22
    1aee:	8a 95       	dec	r24
    1af0:	e2 f7       	brpl	.-8      	; 0x1aea <game_rule_check+0x38e>
    1af2:	80 e0       	ldi	r24, 0x00	; 0
    1af4:	90 e0       	ldi	r25, 0x00	; 0
    1af6:	40 e0       	ldi	r20, 0x00	; 0
    1af8:	50 e0       	ldi	r21, 0x00	; 0
    1afa:	10 c0       	rjmp	.+32     	; 0x1b1c <game_rule_check+0x3c0>
    1afc:	fc 01       	movw	r30, r24
    1afe:	ee 0f       	add	r30, r30
    1b00:	ff 1f       	adc	r31, r31
    1b02:	21 e0       	ldi	r18, 0x01	; 1
    1b04:	30 e0       	ldi	r19, 0x00	; 0
    1b06:	2c 0f       	add	r18, r28
    1b08:	3d 1f       	adc	r19, r29
    1b0a:	e2 0f       	add	r30, r18
    1b0c:	f3 1f       	adc	r31, r19
    1b0e:	20 81       	ld	r18, Z
    1b10:	31 81       	ldd	r19, Z+1	; 0x01
    1b12:	23 2b       	or	r18, r19
    1b14:	11 f0       	breq	.+4      	; 0x1b1a <game_rule_check+0x3be>
    1b16:	4f 5f       	subi	r20, 0xFF	; 255
    1b18:	5f 4f       	sbci	r21, 0xFF	; 255
    1b1a:	01 96       	adiw	r24, 0x01	; 1
    1b1c:	88 30       	cpi	r24, 0x08	; 8
    1b1e:	91 05       	cpc	r25, r1
    1b20:	6c f3       	brlt	.-38     	; 0x1afc <game_rule_check+0x3a0>
    1b22:	81 e0       	ldi	r24, 0x01	; 1
    1b24:	90 e0       	ldi	r25, 0x00	; 0
    1b26:	9a 01       	movw	r18, r20
    1b28:	22 50       	subi	r18, 0x02	; 2
    1b2a:	31 09       	sbc	r19, r1
    1b2c:	22 30       	cpi	r18, 0x02	; 2
    1b2e:	31 05       	cpc	r19, r1
    1b30:	10 f4       	brcc	.+4      	; 0x1b36 <game_rule_check+0x3da>
    1b32:	80 e0       	ldi	r24, 0x00	; 0
    1b34:	90 e0       	ldi	r25, 0x00	; 0
    1b36:	86 23       	and	r24, r22
    1b38:	97 23       	and	r25, r23
    1b3a:	89 2b       	or	r24, r25
    1b3c:	71 f4       	brne	.+28     	; 0x1b5a <game_rule_check+0x3fe>
    1b3e:	91 e0       	ldi	r25, 0x01	; 1
    1b40:	43 30       	cpi	r20, 0x03	; 3
    1b42:	51 05       	cpc	r21, r1
    1b44:	09 f0       	breq	.+2      	; 0x1b48 <game_rule_check+0x3ec>
    1b46:	90 e0       	ldi	r25, 0x00	; 0
    1b48:	81 e0       	ldi	r24, 0x01	; 1
    1b4a:	67 2b       	or	r22, r23
    1b4c:	09 f0       	breq	.+2      	; 0x1b50 <game_rule_check+0x3f4>
    1b4e:	80 e0       	ldi	r24, 0x00	; 0
    1b50:	89 23       	and	r24, r25
    1b52:	31 f4       	brne	.+12     	; 0x1b60 <game_rule_check+0x404>
    1b54:	81 e0       	ldi	r24, 0x01	; 1
    1b56:	90 e0       	ldi	r25, 0x00	; 0
    1b58:	05 c0       	rjmp	.+10     	; 0x1b64 <game_rule_check+0x408>
    1b5a:	83 e0       	ldi	r24, 0x03	; 3
    1b5c:	90 e0       	ldi	r25, 0x00	; 0
    1b5e:	02 c0       	rjmp	.+4      	; 0x1b64 <game_rule_check+0x408>
    1b60:	82 e0       	ldi	r24, 0x02	; 2
    1b62:	90 e0       	ldi	r25, 0x00	; 0
    1b64:	60 96       	adiw	r28, 0x10	; 16
    1b66:	0f b6       	in	r0, 0x3f	; 63
    1b68:	f8 94       	cli
    1b6a:	de bf       	out	0x3e, r29	; 62
    1b6c:	0f be       	out	0x3f, r0	; 63
    1b6e:	cd bf       	out	0x3d, r28	; 61
    1b70:	df 91       	pop	r29
    1b72:	cf 91       	pop	r28
    1b74:	1f 91       	pop	r17
    1b76:	0f 91       	pop	r16
    1b78:	ff 90       	pop	r15
    1b7a:	ef 90       	pop	r14
    1b7c:	08 95       	ret

00001b7e <next_world_generation>:
    1b7e:	cf 92       	push	r12
    1b80:	df 92       	push	r13
    1b82:	ef 92       	push	r14
    1b84:	ff 92       	push	r15
    1b86:	0f 93       	push	r16
    1b88:	1f 93       	push	r17
    1b8a:	cf 93       	push	r28
    1b8c:	df 93       	push	r29
    1b8e:	cd b7       	in	r28, 0x3d	; 61
    1b90:	de b7       	in	r29, 0x3e	; 62
    1b92:	a0 97       	sbiw	r28, 0x20	; 32
    1b94:	0f b6       	in	r0, 0x3f	; 63
    1b96:	f8 94       	cli
    1b98:	de bf       	out	0x3e, r29	; 62
    1b9a:	0f be       	out	0x3f, r0	; 63
    1b9c:	cd bf       	out	0x3d, r28	; 61
    1b9e:	40 e0       	ldi	r20, 0x00	; 0
    1ba0:	50 e0       	ldi	r21, 0x00	; 0
    1ba2:	1d c0       	rjmp	.+58     	; 0x1bde <next_world_generation+0x60>
    1ba4:	ca 01       	movw	r24, r20
    1ba6:	88 0f       	add	r24, r24
    1ba8:	99 1f       	adc	r25, r25
    1baa:	fc 01       	movw	r30, r24
    1bac:	e2 57       	subi	r30, 0x72	; 114
    1bae:	fd 4f       	sbci	r31, 0xFD	; 253
    1bb0:	e2 0f       	add	r30, r18
    1bb2:	f3 1f       	adc	r31, r19
    1bb4:	60 81       	ld	r22, Z
    1bb6:	e1 e0       	ldi	r30, 0x01	; 1
    1bb8:	f0 e0       	ldi	r31, 0x00	; 0
    1bba:	ec 0f       	add	r30, r28
    1bbc:	fd 1f       	adc	r31, r29
    1bbe:	8e 0f       	add	r24, r30
    1bc0:	9f 1f       	adc	r25, r31
    1bc2:	fc 01       	movw	r30, r24
    1bc4:	e2 0f       	add	r30, r18
    1bc6:	f3 1f       	adc	r31, r19
    1bc8:	60 83       	st	Z, r22
    1bca:	2f 5f       	subi	r18, 0xFF	; 255
    1bcc:	3f 4f       	sbci	r19, 0xFF	; 255
    1bce:	02 c0       	rjmp	.+4      	; 0x1bd4 <next_world_generation+0x56>
    1bd0:	20 e0       	ldi	r18, 0x00	; 0
    1bd2:	30 e0       	ldi	r19, 0x00	; 0
    1bd4:	22 30       	cpi	r18, 0x02	; 2
    1bd6:	31 05       	cpc	r19, r1
    1bd8:	2c f3       	brlt	.-54     	; 0x1ba4 <next_world_generation+0x26>
    1bda:	4f 5f       	subi	r20, 0xFF	; 255
    1bdc:	5f 4f       	sbci	r21, 0xFF	; 255
    1bde:	40 31       	cpi	r20, 0x10	; 16
    1be0:	51 05       	cpc	r21, r1
    1be2:	b4 f3       	brlt	.-20     	; 0x1bd0 <next_world_generation+0x52>
    1be4:	c1 2c       	mov	r12, r1
    1be6:	d1 2c       	mov	r13, r1
    1be8:	4e c0       	rjmp	.+156    	; 0x1c86 <next_world_generation+0x108>
    1bea:	a8 01       	movw	r20, r16
    1bec:	b7 01       	movw	r22, r14
    1bee:	c6 01       	movw	r24, r12
    1bf0:	0e 94 ae 0b 	call	0x175c	; 0x175c <game_rule_check>
    1bf4:	82 30       	cpi	r24, 0x02	; 2
    1bf6:	91 05       	cpc	r25, r1
    1bf8:	19 f0       	breq	.+6      	; 0x1c00 <next_world_generation+0x82>
    1bfa:	03 97       	sbiw	r24, 0x03	; 3
    1bfc:	c1 f0       	breq	.+48     	; 0x1c2e <next_world_generation+0xb0>
    1bfe:	2d c0       	rjmp	.+90     	; 0x1c5a <next_world_generation+0xdc>
    1c00:	f6 01       	movw	r30, r12
    1c02:	ee 0f       	add	r30, r30
    1c04:	ff 1f       	adc	r31, r31
    1c06:	81 e0       	ldi	r24, 0x01	; 1
    1c08:	90 e0       	ldi	r25, 0x00	; 0
    1c0a:	8c 0f       	add	r24, r28
    1c0c:	9d 1f       	adc	r25, r29
    1c0e:	e8 0f       	add	r30, r24
    1c10:	f9 1f       	adc	r31, r25
    1c12:	ee 0d       	add	r30, r14
    1c14:	ff 1d       	adc	r31, r15
    1c16:	20 81       	ld	r18, Z
    1c18:	80 e8       	ldi	r24, 0x80	; 128
    1c1a:	90 e0       	ldi	r25, 0x00	; 0
    1c1c:	00 2e       	mov	r0, r16
    1c1e:	02 c0       	rjmp	.+4      	; 0x1c24 <next_world_generation+0xa6>
    1c20:	95 95       	asr	r25
    1c22:	87 95       	ror	r24
    1c24:	0a 94       	dec	r0
    1c26:	e2 f7       	brpl	.-8      	; 0x1c20 <next_world_generation+0xa2>
    1c28:	82 2b       	or	r24, r18
    1c2a:	80 83       	st	Z, r24
    1c2c:	16 c0       	rjmp	.+44     	; 0x1c5a <next_world_generation+0xdc>
    1c2e:	f6 01       	movw	r30, r12
    1c30:	ee 0f       	add	r30, r30
    1c32:	ff 1f       	adc	r31, r31
    1c34:	81 e0       	ldi	r24, 0x01	; 1
    1c36:	90 e0       	ldi	r25, 0x00	; 0
    1c38:	8c 0f       	add	r24, r28
    1c3a:	9d 1f       	adc	r25, r29
    1c3c:	e8 0f       	add	r30, r24
    1c3e:	f9 1f       	adc	r31, r25
    1c40:	ee 0d       	add	r30, r14
    1c42:	ff 1d       	adc	r31, r15
    1c44:	20 81       	ld	r18, Z
    1c46:	80 e8       	ldi	r24, 0x80	; 128
    1c48:	90 e0       	ldi	r25, 0x00	; 0
    1c4a:	00 2e       	mov	r0, r16
    1c4c:	02 c0       	rjmp	.+4      	; 0x1c52 <next_world_generation+0xd4>
    1c4e:	95 95       	asr	r25
    1c50:	87 95       	ror	r24
    1c52:	0a 94       	dec	r0
    1c54:	e2 f7       	brpl	.-8      	; 0x1c4e <next_world_generation+0xd0>
    1c56:	82 27       	eor	r24, r18
    1c58:	80 83       	st	Z, r24
    1c5a:	0f 5f       	subi	r16, 0xFF	; 255
    1c5c:	1f 4f       	sbci	r17, 0xFF	; 255
    1c5e:	02 c0       	rjmp	.+4      	; 0x1c64 <next_world_generation+0xe6>
    1c60:	00 e0       	ldi	r16, 0x00	; 0
    1c62:	10 e0       	ldi	r17, 0x00	; 0
    1c64:	08 30       	cpi	r16, 0x08	; 8
    1c66:	11 05       	cpc	r17, r1
    1c68:	0c f4       	brge	.+2      	; 0x1c6c <next_world_generation+0xee>
    1c6a:	bf cf       	rjmp	.-130    	; 0x1bea <next_world_generation+0x6c>
    1c6c:	9f ef       	ldi	r25, 0xFF	; 255
    1c6e:	e9 1a       	sub	r14, r25
    1c70:	f9 0a       	sbc	r15, r25
    1c72:	02 c0       	rjmp	.+4      	; 0x1c78 <next_world_generation+0xfa>
    1c74:	e1 2c       	mov	r14, r1
    1c76:	f1 2c       	mov	r15, r1
    1c78:	e2 e0       	ldi	r30, 0x02	; 2
    1c7a:	ee 16       	cp	r14, r30
    1c7c:	f1 04       	cpc	r15, r1
    1c7e:	84 f3       	brlt	.-32     	; 0x1c60 <next_world_generation+0xe2>
    1c80:	ff ef       	ldi	r31, 0xFF	; 255
    1c82:	cf 1a       	sub	r12, r31
    1c84:	df 0a       	sbc	r13, r31
    1c86:	80 e1       	ldi	r24, 0x10	; 16
    1c88:	c8 16       	cp	r12, r24
    1c8a:	d1 04       	cpc	r13, r1
    1c8c:	9c f3       	brlt	.-26     	; 0x1c74 <next_world_generation+0xf6>
    1c8e:	40 e0       	ldi	r20, 0x00	; 0
    1c90:	50 e0       	ldi	r21, 0x00	; 0
    1c92:	1c c0       	rjmp	.+56     	; 0x1ccc <next_world_generation+0x14e>
    1c94:	ca 01       	movw	r24, r20
    1c96:	88 0f       	add	r24, r24
    1c98:	99 1f       	adc	r25, r25
    1c9a:	e1 e0       	ldi	r30, 0x01	; 1
    1c9c:	f0 e0       	ldi	r31, 0x00	; 0
    1c9e:	ec 0f       	add	r30, r28
    1ca0:	fd 1f       	adc	r31, r29
    1ca2:	e8 0f       	add	r30, r24
    1ca4:	f9 1f       	adc	r31, r25
    1ca6:	e2 0f       	add	r30, r18
    1ca8:	f3 1f       	adc	r31, r19
    1caa:	60 81       	ld	r22, Z
    1cac:	82 57       	subi	r24, 0x72	; 114
    1cae:	9d 4f       	sbci	r25, 0xFD	; 253
    1cb0:	fc 01       	movw	r30, r24
    1cb2:	e2 0f       	add	r30, r18
    1cb4:	f3 1f       	adc	r31, r19
    1cb6:	60 83       	st	Z, r22
    1cb8:	2f 5f       	subi	r18, 0xFF	; 255
    1cba:	3f 4f       	sbci	r19, 0xFF	; 255
    1cbc:	02 c0       	rjmp	.+4      	; 0x1cc2 <next_world_generation+0x144>
    1cbe:	20 e0       	ldi	r18, 0x00	; 0
    1cc0:	30 e0       	ldi	r19, 0x00	; 0
    1cc2:	22 30       	cpi	r18, 0x02	; 2
    1cc4:	31 05       	cpc	r19, r1
    1cc6:	34 f3       	brlt	.-52     	; 0x1c94 <next_world_generation+0x116>
    1cc8:	4f 5f       	subi	r20, 0xFF	; 255
    1cca:	5f 4f       	sbci	r21, 0xFF	; 255
    1ccc:	40 31       	cpi	r20, 0x10	; 16
    1cce:	51 05       	cpc	r21, r1
    1cd0:	b4 f3       	brlt	.-20     	; 0x1cbe <next_world_generation+0x140>
    1cd2:	a0 96       	adiw	r28, 0x20	; 32
    1cd4:	0f b6       	in	r0, 0x3f	; 63
    1cd6:	f8 94       	cli
    1cd8:	de bf       	out	0x3e, r29	; 62
    1cda:	0f be       	out	0x3f, r0	; 63
    1cdc:	cd bf       	out	0x3d, r28	; 61
    1cde:	df 91       	pop	r29
    1ce0:	cf 91       	pop	r28
    1ce2:	1f 91       	pop	r17
    1ce4:	0f 91       	pop	r16
    1ce6:	ff 90       	pop	r15
    1ce8:	ef 90       	pop	r14
    1cea:	df 90       	pop	r13
    1cec:	cf 90       	pop	r12
    1cee:	08 95       	ret

00001cf0 <display_cellular>:

void display_cellular( int h, int w, int i, int state, int color_mode) {
    1cf0:	af 92       	push	r10
    1cf2:	bf 92       	push	r11
    1cf4:	cf 92       	push	r12
    1cf6:	df 92       	push	r13
    1cf8:	ef 92       	push	r14
    1cfa:	ff 92       	push	r15
    1cfc:	0f 93       	push	r16
    1cfe:	1f 93       	push	r17
    1d00:	cf 93       	push	r28
    1d02:	df 93       	push	r29
    1d04:	7c 01       	movw	r14, r24
    1d06:	eb 01       	movw	r28, r22
    1d08:	6a 01       	movw	r12, r20
    1d0a:	59 01       	movw	r10, r18
	uint16_t color = COLOR_BLACK;
	
	if (!color_mode) color = (state?COLOR_WHITE:COLOR_BLACK);
    1d0c:	01 2b       	or	r16, r17
    1d0e:	29 f4       	brne	.+10     	; 0x1d1a <display_cellular+0x2a>
    1d10:	23 2b       	or	r18, r19
    1d12:	c1 f0       	breq	.+48     	; 0x1d44 <display_cellular+0x54>
    1d14:	0f ef       	ldi	r16, 0xFF	; 255
    1d16:	1f ef       	ldi	r17, 0xFF	; 255
    1d18:	1d c0       	rjmp	.+58     	; 0x1d54 <display_cellular+0x64>
	else {
		int state_color = game_rule_check(h, w, i);
    1d1a:	0e 94 ae 0b 	call	0x175c	; 0x175c <game_rule_check>
		
		switch(state_color) {
    1d1e:	82 30       	cpi	r24, 0x02	; 2
    1d20:	91 05       	cpc	r25, r1
    1d22:	99 f0       	breq	.+38     	; 0x1d4a <display_cellular+0x5a>
    1d24:	83 30       	cpi	r24, 0x03	; 3
    1d26:	91 05       	cpc	r25, r1
    1d28:	51 f0       	breq	.+20     	; 0x1d3e <display_cellular+0x4e>
    1d2a:	01 97       	sbiw	r24, 0x01	; 1
    1d2c:	19 f0       	breq	.+6      	; 0x1d34 <display_cellular+0x44>
	for (int w = 0; w < TOTAL_COLS; w++)
	current_world[h][w] = 0x00;
}

void display_cellular( int h, int w, int i, int state, int color_mode) {
	uint16_t color = COLOR_BLACK;
    1d2e:	00 e0       	ldi	r16, 0x00	; 0
    1d30:	10 e0       	ldi	r17, 0x00	; 0
    1d32:	10 c0       	rjmp	.+32     	; 0x1d54 <display_cellular+0x64>
	else {
		int state_color = game_rule_check(h, w, i);
		
		switch(state_color) {
			case 1:
				if (state) color = COLOR_YELLOWGREEN;
    1d34:	ab 28       	or	r10, r11
    1d36:	61 f4       	brne	.+24     	; 0x1d50 <display_cellular+0x60>
	for (int w = 0; w < TOTAL_COLS; w++)
	current_world[h][w] = 0x00;
}

void display_cellular( int h, int w, int i, int state, int color_mode) {
	uint16_t color = COLOR_BLACK;
    1d38:	00 e0       	ldi	r16, 0x00	; 0
    1d3a:	10 e0       	ldi	r17, 0x00	; 0
    1d3c:	0b c0       	rjmp	.+22     	; 0x1d54 <display_cellular+0x64>
				break;
			case 2:
				color = COLOR_GREEN;
				break;
			case 3:
				color = COLOR_RED;
    1d3e:	00 e0       	ldi	r16, 0x00	; 0
    1d40:	18 ef       	ldi	r17, 0xF8	; 248
				break;	
    1d42:	08 c0       	rjmp	.+16     	; 0x1d54 <display_cellular+0x64>
}

void display_cellular( int h, int w, int i, int state, int color_mode) {
	uint16_t color = COLOR_BLACK;
	
	if (!color_mode) color = (state?COLOR_WHITE:COLOR_BLACK);
    1d44:	00 e0       	ldi	r16, 0x00	; 0
    1d46:	10 e0       	ldi	r17, 0x00	; 0
    1d48:	05 c0       	rjmp	.+10     	; 0x1d54 <display_cellular+0x64>
		switch(state_color) {
			case 1:
				if (state) color = COLOR_YELLOWGREEN;
				break;
			case 2:
				color = COLOR_GREEN;
    1d4a:	00 ee       	ldi	r16, 0xE0	; 224
    1d4c:	17 e0       	ldi	r17, 0x07	; 7
    1d4e:	02 c0       	rjmp	.+4      	; 0x1d54 <display_cellular+0x64>
	else {
		int state_color = game_rule_check(h, w, i);
		
		switch(state_color) {
			case 1:
				if (state) color = COLOR_YELLOWGREEN;
    1d50:	06 e6       	ldi	r16, 0x66	; 102
    1d52:	1e e9       	ldi	r17, 0x9E	; 158
				color = COLOR_RED;
				break;	
		}
	}
	
	w = w*8 + i;
    1d54:	ae 01       	movw	r20, r28
    1d56:	44 0f       	add	r20, r20
    1d58:	55 1f       	adc	r21, r21
    1d5a:	44 0f       	add	r20, r20
    1d5c:	55 1f       	adc	r21, r21
    1d5e:	44 0f       	add	r20, r20
    1d60:	55 1f       	adc	r21, r21
    1d62:	4c 0d       	add	r20, r12
    1d64:	5d 1d       	adc	r21, r13
	
	ILI9225_fillRectangle(
	(w*CELL_SIZE) + WORLD_MARGIN,
	(h*CELL_SIZE) + WORLD_MARGIN,
	(w*CELL_SIZE) + WORLD_MARGIN + CELL_SIZE,
	(h*CELL_SIZE) + WORLD_MARGIN + CELL_SIZE,
    1d66:	b7 01       	movw	r22, r14
    1d68:	66 0f       	add	r22, r22
    1d6a:	77 1f       	adc	r23, r23
    1d6c:	ee 0c       	add	r14, r14
    1d6e:	ff 1c       	adc	r15, r15
    1d70:	ee 0c       	add	r14, r14
    1d72:	ff 1c       	adc	r15, r15
    1d74:	ee 0c       	add	r14, r14
    1d76:	ff 1c       	adc	r15, r15
    1d78:	6e 0d       	add	r22, r14
    1d7a:	7f 1d       	adc	r23, r15
    1d7c:	9b 01       	movw	r18, r22
    1d7e:	2e 5e       	subi	r18, 0xEE	; 238
    1d80:	3f 4f       	sbci	r19, 0xFF	; 255
	w = w*8 + i;
	
	ILI9225_fillRectangle(
	(w*CELL_SIZE) + WORLD_MARGIN,
	(h*CELL_SIZE) + WORLD_MARGIN,
	(w*CELL_SIZE) + WORLD_MARGIN + CELL_SIZE,
    1d82:	ca 01       	movw	r24, r20
    1d84:	88 0f       	add	r24, r24
    1d86:	99 1f       	adc	r25, r25
    1d88:	44 0f       	add	r20, r20
    1d8a:	55 1f       	adc	r21, r21
    1d8c:	44 0f       	add	r20, r20
    1d8e:	55 1f       	adc	r21, r21
    1d90:	44 0f       	add	r20, r20
    1d92:	55 1f       	adc	r21, r21
    1d94:	84 0f       	add	r24, r20
    1d96:	95 1f       	adc	r25, r21
    1d98:	ac 01       	movw	r20, r24
    1d9a:	4e 5e       	subi	r20, 0xEE	; 238
    1d9c:	5f 4f       	sbci	r21, 0xFF	; 255
	
	w = w*8 + i;
	
	ILI9225_fillRectangle(
	(w*CELL_SIZE) + WORLD_MARGIN,
	(h*CELL_SIZE) + WORLD_MARGIN,
    1d9e:	68 5f       	subi	r22, 0xF8	; 248
    1da0:	7f 4f       	sbci	r23, 0xFF	; 255
		}
	}
	
	w = w*8 + i;
	
	ILI9225_fillRectangle(
    1da2:	08 96       	adiw	r24, 0x08	; 8
    1da4:	0e 94 1b 14 	call	0x2836	; 0x2836 <ILI9225_fillRectangle>
	(h*CELL_SIZE) + WORLD_MARGIN,
	(w*CELL_SIZE) + WORLD_MARGIN + CELL_SIZE,
	(h*CELL_SIZE) + WORLD_MARGIN + CELL_SIZE,
	color);
	
}	 
    1da8:	df 91       	pop	r29
    1daa:	cf 91       	pop	r28
    1dac:	1f 91       	pop	r17
    1dae:	0f 91       	pop	r16
    1db0:	ff 90       	pop	r15
    1db2:	ef 90       	pop	r14
    1db4:	df 90       	pop	r13
    1db6:	cf 90       	pop	r12
    1db8:	bf 90       	pop	r11
    1dba:	af 90       	pop	r10
    1dbc:	08 95       	ret

00001dbe <world_display>:

void world_display(int color_mode) {
    1dbe:	af 92       	push	r10
    1dc0:	bf 92       	push	r11
    1dc2:	cf 92       	push	r12
    1dc4:	df 92       	push	r13
    1dc6:	ef 92       	push	r14
    1dc8:	ff 92       	push	r15
    1dca:	0f 93       	push	r16
    1dcc:	1f 93       	push	r17
    1dce:	cf 93       	push	r28
    1dd0:	df 93       	push	r29
    1dd2:	6c 01       	movw	r12, r24
	for (int h = 0; h < TOTAL_ROWS; h++)
    1dd4:	e1 2c       	mov	r14, r1
    1dd6:	f1 2c       	mov	r15, r1
    1dd8:	31 c0       	rjmp	.+98     	; 0x1e3c <world_display+0x7e>
			
			uint8_t divider = 0x80;
			
			for (uint8_t i = 0; i <= 7; i++)
			{
				if (current_world[h][w] & divider)
    1dda:	f7 01       	movw	r30, r14
    1ddc:	ee 0f       	add	r30, r30
    1dde:	ff 1f       	adc	r31, r31
    1de0:	e2 57       	subi	r30, 0x72	; 114
    1de2:	fd 4f       	sbci	r31, 0xFD	; 253
    1de4:	ec 0f       	add	r30, r28
    1de6:	fd 1f       	adc	r31, r29
    1de8:	80 81       	ld	r24, Z
    1dea:	8a 21       	and	r24, r10
    1dec:	51 f0       	breq	.+20     	; 0x1e02 <world_display+0x44>
					display_cellular(h, w, i, 1, color_mode);
    1dee:	4b 2d       	mov	r20, r11
    1df0:	50 e0       	ldi	r21, 0x00	; 0
    1df2:	86 01       	movw	r16, r12
    1df4:	21 e0       	ldi	r18, 0x01	; 1
    1df6:	30 e0       	ldi	r19, 0x00	; 0
    1df8:	be 01       	movw	r22, r28
    1dfa:	c7 01       	movw	r24, r14
    1dfc:	0e 94 78 0e 	call	0x1cf0	; 0x1cf0 <display_cellular>
    1e00:	09 c0       	rjmp	.+18     	; 0x1e14 <world_display+0x56>
				else
					display_cellular(h, w, i, 0, color_mode);
    1e02:	4b 2d       	mov	r20, r11
    1e04:	50 e0       	ldi	r21, 0x00	; 0
    1e06:	86 01       	movw	r16, r12
    1e08:	20 e0       	ldi	r18, 0x00	; 0
    1e0a:	30 e0       	ldi	r19, 0x00	; 0
    1e0c:	be 01       	movw	r22, r28
    1e0e:	c7 01       	movw	r24, r14
    1e10:	0e 94 78 0e 	call	0x1cf0	; 0x1cf0 <display_cellular>
					
				divider = divider >> 1;
    1e14:	a6 94       	lsr	r10
	for (int h = 0; h < TOTAL_ROWS; h++)
		for (int w = 0; w < TOTAL_COLS; w++) {
			
			uint8_t divider = 0x80;
			
			for (uint8_t i = 0; i <= 7; i++)
    1e16:	b3 94       	inc	r11
    1e18:	04 c0       	rjmp	.+8      	; 0x1e22 <world_display+0x64>
    1e1a:	b1 2c       	mov	r11, r1
    1e1c:	68 94       	set
    1e1e:	aa 24       	eor	r10, r10
    1e20:	a7 f8       	bld	r10, 7
    1e22:	87 e0       	ldi	r24, 0x07	; 7
    1e24:	8b 15       	cp	r24, r11
    1e26:	c8 f6       	brcc	.-78     	; 0x1dda <world_display+0x1c>
	
}	 

void world_display(int color_mode) {
	for (int h = 0; h < TOTAL_ROWS; h++)
		for (int w = 0; w < TOTAL_COLS; w++) {
    1e28:	21 96       	adiw	r28, 0x01	; 1
    1e2a:	02 c0       	rjmp	.+4      	; 0x1e30 <world_display+0x72>
    1e2c:	c0 e0       	ldi	r28, 0x00	; 0
    1e2e:	d0 e0       	ldi	r29, 0x00	; 0
    1e30:	c2 30       	cpi	r28, 0x02	; 2
    1e32:	d1 05       	cpc	r29, r1
    1e34:	94 f3       	brlt	.-28     	; 0x1e1a <world_display+0x5c>
	color);
	
}	 

void world_display(int color_mode) {
	for (int h = 0; h < TOTAL_ROWS; h++)
    1e36:	8f ef       	ldi	r24, 0xFF	; 255
    1e38:	e8 1a       	sub	r14, r24
    1e3a:	f8 0a       	sbc	r15, r24
    1e3c:	80 e1       	ldi	r24, 0x10	; 16
    1e3e:	e8 16       	cp	r14, r24
    1e40:	f1 04       	cpc	r15, r1
    1e42:	a4 f3       	brlt	.-24     	; 0x1e2c <world_display+0x6e>
					display_cellular(h, w, i, 0, color_mode);
					
				divider = divider >> 1;
			}
		}
}
    1e44:	df 91       	pop	r29
    1e46:	cf 91       	pop	r28
    1e48:	1f 91       	pop	r17
    1e4a:	0f 91       	pop	r16
    1e4c:	ff 90       	pop	r15
    1e4e:	ef 90       	pop	r14
    1e50:	df 90       	pop	r13
    1e52:	cf 90       	pop	r12
    1e54:	bf 90       	pop	r11
    1e56:	af 90       	pop	r10
    1e58:	08 95       	ret

00001e5a <generate_random_world>:

void generate_random_world(int density) {
    1e5a:	af 92       	push	r10
    1e5c:	bf 92       	push	r11
    1e5e:	cf 92       	push	r12
    1e60:	df 92       	push	r13
    1e62:	ef 92       	push	r14
    1e64:	ff 92       	push	r15
    1e66:	0f 93       	push	r16
    1e68:	1f 93       	push	r17
    1e6a:	cf 93       	push	r28
    1e6c:	df 93       	push	r29
    1e6e:	7c 01       	movw	r14, r24
	for (int h = 0; h < TOTAL_ROWS; h++)
    1e70:	a1 2c       	mov	r10, r1
    1e72:	b1 2c       	mov	r11, r1
    1e74:	29 c0       	rjmp	.+82     	; 0x1ec8 <generate_random_world+0x6e>
		for (int w = 0; w < TOTAL_COLS; w++) {
			uint8_t divider = 0x80;
			uint8_t temp = 0x00;
			
			for (int bit = 0; bit < 8; bit++) {
				if (rand() % 100 < density)
    1e76:	0e 94 30 19 	call	0x3260	; 0x3260 <rand>
    1e7a:	64 e6       	ldi	r22, 0x64	; 100
    1e7c:	70 e0       	ldi	r23, 0x00	; 0
    1e7e:	0e 94 d0 18 	call	0x31a0	; 0x31a0 <__divmodhi4>
    1e82:	8e 15       	cp	r24, r14
    1e84:	9f 05       	cpc	r25, r15
    1e86:	0c f4       	brge	.+2      	; 0x1e8a <generate_random_world+0x30>
					temp = temp + divider;
    1e88:	01 0f       	add	r16, r17
				divider = divider >> 1;
    1e8a:	16 95       	lsr	r17
	for (int h = 0; h < TOTAL_ROWS; h++)
		for (int w = 0; w < TOTAL_COLS; w++) {
			uint8_t divider = 0x80;
			uint8_t temp = 0x00;
			
			for (int bit = 0; bit < 8; bit++) {
    1e8c:	21 96       	adiw	r28, 0x01	; 1
    1e8e:	04 c0       	rjmp	.+8      	; 0x1e98 <generate_random_world+0x3e>
    1e90:	c0 e0       	ldi	r28, 0x00	; 0
    1e92:	d0 e0       	ldi	r29, 0x00	; 0
    1e94:	00 e0       	ldi	r16, 0x00	; 0
    1e96:	10 e8       	ldi	r17, 0x80	; 128
    1e98:	c8 30       	cpi	r28, 0x08	; 8
    1e9a:	d1 05       	cpc	r29, r1
    1e9c:	64 f3       	brlt	.-40     	; 0x1e76 <generate_random_world+0x1c>
				if (rand() % 100 < density)
					temp = temp + divider;
				divider = divider >> 1;
			}
			
			current_world[h][w] = temp;
    1e9e:	f5 01       	movw	r30, r10
    1ea0:	ee 0f       	add	r30, r30
    1ea2:	ff 1f       	adc	r31, r31
    1ea4:	e2 57       	subi	r30, 0x72	; 114
    1ea6:	fd 4f       	sbci	r31, 0xFD	; 253
    1ea8:	ec 0d       	add	r30, r12
    1eaa:	fd 1d       	adc	r31, r13
    1eac:	00 83       	st	Z, r16
		}
}

void generate_random_world(int density) {
	for (int h = 0; h < TOTAL_ROWS; h++)
		for (int w = 0; w < TOTAL_COLS; w++) {
    1eae:	8f ef       	ldi	r24, 0xFF	; 255
    1eb0:	c8 1a       	sub	r12, r24
    1eb2:	d8 0a       	sbc	r13, r24
    1eb4:	02 c0       	rjmp	.+4      	; 0x1eba <generate_random_world+0x60>
    1eb6:	c1 2c       	mov	r12, r1
    1eb8:	d1 2c       	mov	r13, r1
    1eba:	82 e0       	ldi	r24, 0x02	; 2
    1ebc:	c8 16       	cp	r12, r24
    1ebe:	d1 04       	cpc	r13, r1
    1ec0:	3c f3       	brlt	.-50     	; 0x1e90 <generate_random_world+0x36>
			}
		}
}

void generate_random_world(int density) {
	for (int h = 0; h < TOTAL_ROWS; h++)
    1ec2:	8f ef       	ldi	r24, 0xFF	; 255
    1ec4:	a8 1a       	sub	r10, r24
    1ec6:	b8 0a       	sbc	r11, r24
    1ec8:	80 e1       	ldi	r24, 0x10	; 16
    1eca:	a8 16       	cp	r10, r24
    1ecc:	b1 04       	cpc	r11, r1
    1ece:	9c f3       	brlt	.-26     	; 0x1eb6 <generate_random_world+0x5c>
				divider = divider >> 1;
			}
			
			current_world[h][w] = temp;
		}
}
    1ed0:	df 91       	pop	r29
    1ed2:	cf 91       	pop	r28
    1ed4:	1f 91       	pop	r17
    1ed6:	0f 91       	pop	r16
    1ed8:	ff 90       	pop	r15
    1eda:	ef 90       	pop	r14
    1edc:	df 90       	pop	r13
    1ede:	cf 90       	pop	r12
    1ee0:	bf 90       	pop	r11
    1ee2:	af 90       	pop	r10
    1ee4:	08 95       	ret

00001ee6 <world_init>:

void world_init() {
    1ee6:	0f 93       	push	r16
    1ee8:	1f 93       	push	r17
	ILI9225_drawRectangle(WORLD_MARGIN-1, WORLD_MARGIN-1,
    1eea:	0f ef       	ldi	r16, 0xFF	; 255
    1eec:	1f ef       	ldi	r17, 0xFF	; 255
    1eee:	29 ea       	ldi	r18, 0xA9	; 169
    1ef0:	30 e0       	ldi	r19, 0x00	; 0
    1ef2:	49 ea       	ldi	r20, 0xA9	; 169
    1ef4:	50 e0       	ldi	r21, 0x00	; 0
    1ef6:	67 e0       	ldi	r22, 0x07	; 7
    1ef8:	70 e0       	ldi	r23, 0x00	; 0
    1efa:	87 e0       	ldi	r24, 0x07	; 7
    1efc:	90 e0       	ldi	r25, 0x00	; 0
    1efe:	0e 94 70 15 	call	0x2ae0	; 0x2ae0 <ILI9225_drawRectangle>
		WORLD_MARGIN+CELL_SIZE*WORLD_DIMENSION_WIDTH+1,
		WORLD_MARGIN+CELL_SIZE*WORLD_DIMENSION_HEIGHT+1,
		COLOR_WHITE);
}
    1f02:	1f 91       	pop	r17
    1f04:	0f 91       	pop	r16
    1f06:	08 95       	ret

00001f08 <game_init>:

void game_init() {
    1f08:	0f 93       	push	r16
    1f0a:	1f 93       	push	r17
	ILI9225_clear();
    1f0c:	0e 94 53 14 	call	0x28a6	; 0x28a6 <ILI9225_clear>
	ILI9225_drawRectangle(WORLD_MARGIN - 1, WORLD_MARGIN - 1,
    1f10:	0f ef       	ldi	r16, 0xFF	; 255
    1f12:	1f ef       	ldi	r17, 0xFF	; 255
    1f14:	23 ed       	ldi	r18, 0xD3	; 211
    1f16:	30 e0       	ldi	r19, 0x00	; 0
    1f18:	47 ea       	ldi	r20, 0xA7	; 167
    1f1a:	50 e0       	ldi	r21, 0x00	; 0
    1f1c:	67 e0       	ldi	r22, 0x07	; 7
    1f1e:	70 e0       	ldi	r23, 0x00	; 0
    1f20:	87 e0       	ldi	r24, 0x07	; 7
    1f22:	90 e0       	ldi	r25, 0x00	; 0
    1f24:	0e 94 70 15 	call	0x2ae0	; 0x2ae0 <ILI9225_drawRectangle>
						ILI9225_LCD_WIDTH  - (WORLD_MARGIN + 1),
						ILI9225_LCD_HEIGHT - (WORLD_MARGIN + 1),
						COLOR_WHITE);
	
	ILI9225_setFont(Terminal12x16, 0);
    1f28:	60 e0       	ldi	r22, 0x00	; 0
    1f2a:	70 e0       	ldi	r23, 0x00	; 0
    1f2c:	88 e6       	ldi	r24, 0x68	; 104
    1f2e:	90 e0       	ldi	r25, 0x00	; 0
    1f30:	0e 94 a7 15 	call	0x2b4e	; 0x2b4e <ILI9225_setFont>
	ILI9225_drawText(20, 30, "GAME OF LIFE", strlen("GAME OF LIFE"), COLOR_WHITE);
    1f34:	2c e0       	ldi	r18, 0x0C	; 12
    1f36:	30 e0       	ldi	r19, 0x00	; 0
    1f38:	44 e0       	ldi	r20, 0x04	; 4
    1f3a:	51 e0       	ldi	r21, 0x01	; 1
    1f3c:	6e e1       	ldi	r22, 0x1E	; 30
    1f3e:	70 e0       	ldi	r23, 0x00	; 0
    1f40:	84 e1       	ldi	r24, 0x14	; 20
    1f42:	90 e0       	ldi	r25, 0x00	; 0
    1f44:	0e 94 41 18 	call	0x3082	; 0x3082 <ILI9225_drawText>
	
	ILI9225_setFont(Terminal6x8, 0);
    1f48:	60 e0       	ldi	r22, 0x00	; 0
    1f4a:	70 e0       	ldi	r23, 0x00	; 0
    1f4c:	80 e7       	ldi	r24, 0x70	; 112
    1f4e:	92 e1       	ldi	r25, 0x12	; 18
    1f50:	0e 94 a7 15 	call	0x2b4e	; 0x2b4e <ILI9225_setFont>
	ILI9225_drawText(50, 60, "ATMEGA328P", strlen("ATMEGA328P"), COLOR_ORANGE);
    1f54:	00 e2       	ldi	r16, 0x20	; 32
    1f56:	1d ef       	ldi	r17, 0xFD	; 253
    1f58:	2a e0       	ldi	r18, 0x0A	; 10
    1f5a:	30 e0       	ldi	r19, 0x00	; 0
    1f5c:	41 e1       	ldi	r20, 0x11	; 17
    1f5e:	51 e0       	ldi	r21, 0x01	; 1
    1f60:	6c e3       	ldi	r22, 0x3C	; 60
    1f62:	70 e0       	ldi	r23, 0x00	; 0
    1f64:	82 e3       	ldi	r24, 0x32	; 50
    1f66:	90 e0       	ldi	r25, 0x00	; 0
    1f68:	0e 94 41 18 	call	0x3082	; 0x3082 <ILI9225_drawText>
	
	ILI9225_drawText(20, 90, "KEYPAD INSTRUCTION:", strlen("KEYPAD INSTRUCTION:"), COLOR_WHITE);
    1f6c:	0f ef       	ldi	r16, 0xFF	; 255
    1f6e:	1f ef       	ldi	r17, 0xFF	; 255
    1f70:	23 e1       	ldi	r18, 0x13	; 19
    1f72:	30 e0       	ldi	r19, 0x00	; 0
    1f74:	4c e1       	ldi	r20, 0x1C	; 28
    1f76:	51 e0       	ldi	r21, 0x01	; 1
    1f78:	6a e5       	ldi	r22, 0x5A	; 90
    1f7a:	70 e0       	ldi	r23, 0x00	; 0
    1f7c:	84 e1       	ldi	r24, 0x14	; 20
    1f7e:	90 e0       	ldi	r25, 0x00	; 0
    1f80:	0e 94 41 18 	call	0x3082	; 0x3082 <ILI9225_drawText>
	ILI9225_drawText(30, 110, "Press * to start", strlen("Press * to start"), COLOR_WHITE);
    1f84:	20 e1       	ldi	r18, 0x10	; 16
    1f86:	30 e0       	ldi	r19, 0x00	; 0
    1f88:	40 e3       	ldi	r20, 0x30	; 48
    1f8a:	51 e0       	ldi	r21, 0x01	; 1
    1f8c:	6e e6       	ldi	r22, 0x6E	; 110
    1f8e:	70 e0       	ldi	r23, 0x00	; 0
    1f90:	8e e1       	ldi	r24, 0x1E	; 30
    1f92:	90 e0       	ldi	r25, 0x00	; 0
    1f94:	0e 94 41 18 	call	0x3082	; 0x3082 <ILI9225_drawText>
	ILI9225_drawText(75, 120, "a new world", strlen("a new world"), COLOR_WHITE);
    1f98:	2b e0       	ldi	r18, 0x0B	; 11
    1f9a:	30 e0       	ldi	r19, 0x00	; 0
    1f9c:	41 e4       	ldi	r20, 0x41	; 65
    1f9e:	51 e0       	ldi	r21, 0x01	; 1
    1fa0:	68 e7       	ldi	r22, 0x78	; 120
    1fa2:	70 e0       	ldi	r23, 0x00	; 0
    1fa4:	8b e4       	ldi	r24, 0x4B	; 75
    1fa6:	90 e0       	ldi	r25, 0x00	; 0
    1fa8:	0e 94 41 18 	call	0x3082	; 0x3082 <ILI9225_drawText>

	ILI9225_drawText(30, 140, "Press # to continue", strlen("Press # to continue"), COLOR_WHITE);
    1fac:	23 e1       	ldi	r18, 0x13	; 19
    1fae:	30 e0       	ldi	r19, 0x00	; 0
    1fb0:	4d e4       	ldi	r20, 0x4D	; 77
    1fb2:	51 e0       	ldi	r21, 0x01	; 1
    1fb4:	6c e8       	ldi	r22, 0x8C	; 140
    1fb6:	70 e0       	ldi	r23, 0x00	; 0
    1fb8:	8e e1       	ldi	r24, 0x1E	; 30
    1fba:	90 e0       	ldi	r25, 0x00	; 0
    1fbc:	0e 94 41 18 	call	0x3082	; 0x3082 <ILI9225_drawText>
	ILI9225_drawText(35, 150, "world from EEPROM", strlen("world from EEPROM"), COLOR_WHITE);
    1fc0:	21 e1       	ldi	r18, 0x11	; 17
    1fc2:	30 e0       	ldi	r19, 0x00	; 0
    1fc4:	41 e6       	ldi	r20, 0x61	; 97
    1fc6:	51 e0       	ldi	r21, 0x01	; 1
    1fc8:	66 e9       	ldi	r22, 0x96	; 150
    1fca:	70 e0       	ldi	r23, 0x00	; 0
    1fcc:	83 e2       	ldi	r24, 0x23	; 35
    1fce:	90 e0       	ldi	r25, 0x00	; 0
    1fd0:	0e 94 41 18 	call	0x3082	; 0x3082 <ILI9225_drawText>
	
	ILI9225_drawText(32, 185, "Cre: Lai Ngoc Dung", strlen("Cre: Lai Ngoc Dung"), COLOR_ORANGE);
    1fd4:	00 e2       	ldi	r16, 0x20	; 32
    1fd6:	1d ef       	ldi	r17, 0xFD	; 253
    1fd8:	22 e1       	ldi	r18, 0x12	; 18
    1fda:	30 e0       	ldi	r19, 0x00	; 0
    1fdc:	43 e7       	ldi	r20, 0x73	; 115
    1fde:	51 e0       	ldi	r21, 0x01	; 1
    1fe0:	69 eb       	ldi	r22, 0xB9	; 185
    1fe2:	70 e0       	ldi	r23, 0x00	; 0
    1fe4:	80 e2       	ldi	r24, 0x20	; 32
    1fe6:	90 e0       	ldi	r25, 0x00	; 0
    1fe8:	0e 94 41 18 	call	0x3082	; 0x3082 <ILI9225_drawText>
}
    1fec:	1f 91       	pop	r17
    1fee:	0f 91       	pop	r16
    1ff0:	08 95       	ret

00001ff2 <display_rand>:

int display_rand() {
    1ff2:	0f 93       	push	r16
    1ff4:	1f 93       	push	r17
	ILI9225_clear();
    1ff6:	0e 94 53 14 	call	0x28a6	; 0x28a6 <ILI9225_clear>

	ILI9225_drawRectangle(WORLD_MARGIN - 1, WORLD_MARGIN - 1,
    1ffa:	0f ef       	ldi	r16, 0xFF	; 255
    1ffc:	1f ef       	ldi	r17, 0xFF	; 255
    1ffe:	23 ed       	ldi	r18, 0xD3	; 211
    2000:	30 e0       	ldi	r19, 0x00	; 0
    2002:	47 ea       	ldi	r20, 0xA7	; 167
    2004:	50 e0       	ldi	r21, 0x00	; 0
    2006:	67 e0       	ldi	r22, 0x07	; 7
    2008:	70 e0       	ldi	r23, 0x00	; 0
    200a:	87 e0       	ldi	r24, 0x07	; 7
    200c:	90 e0       	ldi	r25, 0x00	; 0
    200e:	0e 94 70 15 	call	0x2ae0	; 0x2ae0 <ILI9225_drawRectangle>
	ILI9225_LCD_WIDTH  - (WORLD_MARGIN + 1),
	ILI9225_LCD_HEIGHT - (WORLD_MARGIN + 1),
	COLOR_WHITE);
	
	ILI9225_setFont(Terminal11x16, 0);
    2012:	60 e0       	ldi	r22, 0x00	; 0
    2014:	70 e0       	ldi	r23, 0x00	; 0
    2016:	8c ec       	ldi	r24, 0xCC	; 204
    2018:	99 e0       	ldi	r25, 0x09	; 9
    201a:	0e 94 a7 15 	call	0x2b4e	; 0x2b4e <ILI9225_setFont>
	ILI9225_drawText(20, 30, "Press 1-9", strlen("Press 1-9"), COLOR_WHITE);
    201e:	29 e0       	ldi	r18, 0x09	; 9
    2020:	30 e0       	ldi	r19, 0x00	; 0
    2022:	46 e8       	ldi	r20, 0x86	; 134
    2024:	51 e0       	ldi	r21, 0x01	; 1
    2026:	6e e1       	ldi	r22, 0x1E	; 30
    2028:	70 e0       	ldi	r23, 0x00	; 0
    202a:	84 e1       	ldi	r24, 0x14	; 20
    202c:	90 e0       	ldi	r25, 0x00	; 0
    202e:	0e 94 41 18 	call	0x3082	; 0x3082 <ILI9225_drawText>
	
	ILI9225_setFont(Terminal6x8, 0);
    2032:	60 e0       	ldi	r22, 0x00	; 0
    2034:	70 e0       	ldi	r23, 0x00	; 0
    2036:	80 e7       	ldi	r24, 0x70	; 112
    2038:	92 e1       	ldi	r25, 0x12	; 18
    203a:	0e 94 a7 15 	call	0x2b4e	; 0x2b4e <ILI9225_setFont>
	ILI9225_drawText(20, 50, "to choose cell density", strlen("to choose cell density"), COLOR_ORANGE);
    203e:	00 e2       	ldi	r16, 0x20	; 32
    2040:	1d ef       	ldi	r17, 0xFD	; 253
    2042:	26 e1       	ldi	r18, 0x16	; 22
    2044:	30 e0       	ldi	r19, 0x00	; 0
    2046:	40 e9       	ldi	r20, 0x90	; 144
    2048:	51 e0       	ldi	r21, 0x01	; 1
    204a:	62 e3       	ldi	r22, 0x32	; 50
    204c:	70 e0       	ldi	r23, 0x00	; 0
    204e:	84 e1       	ldi	r24, 0x14	; 20
    2050:	90 e0       	ldi	r25, 0x00	; 0
    2052:	0e 94 41 18 	call	0x3082	; 0x3082 <ILI9225_drawText>
	ILI9225_drawText(20, 60, "of your random world", strlen("of your random world"), COLOR_ORANGE);
    2056:	24 e1       	ldi	r18, 0x14	; 20
    2058:	30 e0       	ldi	r19, 0x00	; 0
    205a:	47 ea       	ldi	r20, 0xA7	; 167
    205c:	51 e0       	ldi	r21, 0x01	; 1
    205e:	6c e3       	ldi	r22, 0x3C	; 60
    2060:	70 e0       	ldi	r23, 0x00	; 0
    2062:	84 e1       	ldi	r24, 0x14	; 20
    2064:	90 e0       	ldi	r25, 0x00	; 0
    2066:	0e 94 41 18 	call	0x3082	; 0x3082 <ILI9225_drawText>

	ILI9225_drawText(20, 90, "EXAMPLE:", strlen("EXAMPLE:"), COLOR_WHITE);
    206a:	0f ef       	ldi	r16, 0xFF	; 255
    206c:	1f ef       	ldi	r17, 0xFF	; 255
    206e:	28 e0       	ldi	r18, 0x08	; 8
    2070:	30 e0       	ldi	r19, 0x00	; 0
    2072:	4c eb       	ldi	r20, 0xBC	; 188
    2074:	51 e0       	ldi	r21, 0x01	; 1
    2076:	6a e5       	ldi	r22, 0x5A	; 90
    2078:	70 e0       	ldi	r23, 0x00	; 0
    207a:	84 e1       	ldi	r24, 0x14	; 20
    207c:	90 e0       	ldi	r25, 0x00	; 0
    207e:	0e 94 41 18 	call	0x3082	; 0x3082 <ILI9225_drawText>
	ILI9225_drawText(30, 110, "Press 2 for ", strlen("Press 2 for "), COLOR_WHITE);
    2082:	2c e0       	ldi	r18, 0x0C	; 12
    2084:	30 e0       	ldi	r19, 0x00	; 0
    2086:	45 ec       	ldi	r20, 0xC5	; 197
    2088:	51 e0       	ldi	r21, 0x01	; 1
    208a:	6e e6       	ldi	r22, 0x6E	; 110
    208c:	70 e0       	ldi	r23, 0x00	; 0
    208e:	8e e1       	ldi	r24, 0x1E	; 30
    2090:	90 e0       	ldi	r25, 0x00	; 0
    2092:	0e 94 41 18 	call	0x3082	; 0x3082 <ILI9225_drawText>
	ILI9225_drawText(40, 120, "20% cell density", strlen("20% cell density"), COLOR_WHITE);
    2096:	20 e1       	ldi	r18, 0x10	; 16
    2098:	30 e0       	ldi	r19, 0x00	; 0
    209a:	42 ed       	ldi	r20, 0xD2	; 210
    209c:	51 e0       	ldi	r21, 0x01	; 1
    209e:	68 e7       	ldi	r22, 0x78	; 120
    20a0:	70 e0       	ldi	r23, 0x00	; 0
    20a2:	88 e2       	ldi	r24, 0x28	; 40
    20a4:	90 e0       	ldi	r25, 0x00	; 0
    20a6:	0e 94 41 18 	call	0x3082	; 0x3082 <ILI9225_drawText>
	ILI9225_drawText(30, 135, "Press 3 for ", strlen("Press 3 for "), COLOR_WHITE);
    20aa:	2c e0       	ldi	r18, 0x0C	; 12
    20ac:	30 e0       	ldi	r19, 0x00	; 0
    20ae:	43 ee       	ldi	r20, 0xE3	; 227
    20b0:	51 e0       	ldi	r21, 0x01	; 1
    20b2:	67 e8       	ldi	r22, 0x87	; 135
    20b4:	70 e0       	ldi	r23, 0x00	; 0
    20b6:	8e e1       	ldi	r24, 0x1E	; 30
    20b8:	90 e0       	ldi	r25, 0x00	; 0
    20ba:	0e 94 41 18 	call	0x3082	; 0x3082 <ILI9225_drawText>
	ILI9225_drawText(40, 145, "30% cell density", strlen("30% cell density"), COLOR_WHITE);
    20be:	20 e1       	ldi	r18, 0x10	; 16
    20c0:	30 e0       	ldi	r19, 0x00	; 0
    20c2:	40 ef       	ldi	r20, 0xF0	; 240
    20c4:	51 e0       	ldi	r21, 0x01	; 1
    20c6:	61 e9       	ldi	r22, 0x91	; 145
    20c8:	70 e0       	ldi	r23, 0x00	; 0
    20ca:	88 e2       	ldi	r24, 0x28	; 40
    20cc:	90 e0       	ldi	r25, 0x00	; 0
    20ce:	0e 94 41 18 	call	0x3082	; 0x3082 <ILI9225_drawText>
	
	ILI9225_drawText(40, 185, "Press D to exit", strlen("Press D to exit"), COLOR_ORANGE);
    20d2:	00 e2       	ldi	r16, 0x20	; 32
    20d4:	1d ef       	ldi	r17, 0xFD	; 253
    20d6:	2f e0       	ldi	r18, 0x0F	; 15
    20d8:	30 e0       	ldi	r19, 0x00	; 0
    20da:	41 e0       	ldi	r20, 0x01	; 1
    20dc:	52 e0       	ldi	r21, 0x02	; 2
    20de:	69 eb       	ldi	r22, 0xB9	; 185
    20e0:	70 e0       	ldi	r23, 0x00	; 0
    20e2:	88 e2       	ldi	r24, 0x28	; 40
    20e4:	90 e0       	ldi	r25, 0x00	; 0
    20e6:	0e 94 41 18 	call	0x3082	; 0x3082 <ILI9225_drawText>

	char key_pressed = 0;
    20ea:	80 e0       	ldi	r24, 0x00	; 0
	while ((key_pressed < 49) | (key_pressed > 57)) {
    20ec:	04 c0       	rjmp	.+8      	; 0x20f6 <display_rand+0x104>
		key_pressed = keypad_scan();
    20ee:	0e 94 ea 11 	call	0x23d4	; 0x23d4 <keypad_scan>
		
		if (key_pressed == 'D') return 0;
    20f2:	84 34       	cpi	r24, 0x44	; 68
    20f4:	39 f0       	breq	.+14     	; 0x2104 <display_rand+0x112>
	ILI9225_drawText(40, 145, "30% cell density", strlen("30% cell density"), COLOR_WHITE);
	
	ILI9225_drawText(40, 185, "Press D to exit", strlen("Press D to exit"), COLOR_ORANGE);

	char key_pressed = 0;
	while ((key_pressed < 49) | (key_pressed > 57)) {
    20f6:	9f ec       	ldi	r25, 0xCF	; 207
    20f8:	98 0f       	add	r25, r24
    20fa:	99 30       	cpi	r25, 0x09	; 9
    20fc:	c0 f7       	brcc	.-16     	; 0x20ee <display_rand+0xfc>
		key_pressed = keypad_scan();
		
		if (key_pressed == 'D') return 0;
	}
	
	return (key_pressed - 48);
    20fe:	90 e0       	ldi	r25, 0x00	; 0
    2100:	c0 97       	sbiw	r24, 0x30	; 48
    2102:	02 c0       	rjmp	.+4      	; 0x2108 <display_rand+0x116>

	char key_pressed = 0;
	while ((key_pressed < 49) | (key_pressed > 57)) {
		key_pressed = keypad_scan();
		
		if (key_pressed == 'D') return 0;
    2104:	80 e0       	ldi	r24, 0x00	; 0
    2106:	90 e0       	ldi	r25, 0x00	; 0
	}
	
	return (key_pressed - 48);
}
    2108:	1f 91       	pop	r17
    210a:	0f 91       	pop	r16
    210c:	08 95       	ret

0000210e <display_generating>:

void display_generating() {
    210e:	0f 93       	push	r16
    2110:	1f 93       	push	r17
	ILI9225_clear();
    2112:	0e 94 53 14 	call	0x28a6	; 0x28a6 <ILI9225_clear>

	ILI9225_drawRectangle(WORLD_MARGIN - 1, WORLD_MARGIN - 1,
    2116:	0f ef       	ldi	r16, 0xFF	; 255
    2118:	1f ef       	ldi	r17, 0xFF	; 255
    211a:	23 ed       	ldi	r18, 0xD3	; 211
    211c:	30 e0       	ldi	r19, 0x00	; 0
    211e:	47 ea       	ldi	r20, 0xA7	; 167
    2120:	50 e0       	ldi	r21, 0x00	; 0
    2122:	67 e0       	ldi	r22, 0x07	; 7
    2124:	70 e0       	ldi	r23, 0x00	; 0
    2126:	87 e0       	ldi	r24, 0x07	; 7
    2128:	90 e0       	ldi	r25, 0x00	; 0
    212a:	0e 94 70 15 	call	0x2ae0	; 0x2ae0 <ILI9225_drawRectangle>
	ILI9225_LCD_WIDTH  - (WORLD_MARGIN + 1),
	ILI9225_LCD_HEIGHT - (WORLD_MARGIN + 1),
	COLOR_WHITE);
	
	ILI9225_setFont(Terminal12x16, 0);
    212e:	60 e0       	ldi	r22, 0x00	; 0
    2130:	70 e0       	ldi	r23, 0x00	; 0
    2132:	88 e6       	ldi	r24, 0x68	; 104
    2134:	90 e0       	ldi	r25, 0x00	; 0
    2136:	0e 94 a7 15 	call	0x2b4e	; 0x2b4e <ILI9225_setFont>
	ILI9225_drawText(20, 40, "GENERATING", strlen("GENERATING"), COLOR_ORANGE);
    213a:	00 e2       	ldi	r16, 0x20	; 32
    213c:	1d ef       	ldi	r17, 0xFD	; 253
    213e:	2a e0       	ldi	r18, 0x0A	; 10
    2140:	30 e0       	ldi	r19, 0x00	; 0
    2142:	41 e1       	ldi	r20, 0x11	; 17
    2144:	52 e0       	ldi	r21, 0x02	; 2
    2146:	68 e2       	ldi	r22, 0x28	; 40
    2148:	70 e0       	ldi	r23, 0x00	; 0
    214a:	84 e1       	ldi	r24, 0x14	; 20
    214c:	90 e0       	ldi	r25, 0x00	; 0
    214e:	0e 94 41 18 	call	0x3082	; 0x3082 <ILI9225_drawText>
	ILI9225_drawText(40, 60, "WORLD", strlen("WORLD"), COLOR_ORANGE);
    2152:	25 e0       	ldi	r18, 0x05	; 5
    2154:	30 e0       	ldi	r19, 0x00	; 0
    2156:	4c e1       	ldi	r20, 0x1C	; 28
    2158:	52 e0       	ldi	r21, 0x02	; 2
    215a:	6c e3       	ldi	r22, 0x3C	; 60
    215c:	70 e0       	ldi	r23, 0x00	; 0
    215e:	88 e2       	ldi	r24, 0x28	; 40
    2160:	90 e0       	ldi	r25, 0x00	; 0
    2162:	0e 94 41 18 	call	0x3082	; 0x3082 <ILI9225_drawText>
	
	ILI9225_setFont(Terminal6x8, 0);
    2166:	60 e0       	ldi	r22, 0x00	; 0
    2168:	70 e0       	ldi	r23, 0x00	; 0
    216a:	80 e7       	ldi	r24, 0x70	; 112
    216c:	92 e1       	ldi	r25, 0x12	; 18
    216e:	0e 94 a7 15 	call	0x2b4e	; 0x2b4e <ILI9225_setFont>
	ILI9225_drawText(30, 80, "Please wait...", strlen("Please wait..."), COLOR_WHITE);
    2172:	0f ef       	ldi	r16, 0xFF	; 255
    2174:	1f ef       	ldi	r17, 0xFF	; 255
    2176:	2e e0       	ldi	r18, 0x0E	; 14
    2178:	30 e0       	ldi	r19, 0x00	; 0
    217a:	42 e2       	ldi	r20, 0x22	; 34
    217c:	52 e0       	ldi	r21, 0x02	; 2
    217e:	60 e5       	ldi	r22, 0x50	; 80
    2180:	70 e0       	ldi	r23, 0x00	; 0
    2182:	8e e1       	ldi	r24, 0x1E	; 30
    2184:	90 e0       	ldi	r25, 0x00	; 0
    2186:	0e 94 41 18 	call	0x3082	; 0x3082 <ILI9225_drawText>
}
    218a:	1f 91       	pop	r17
    218c:	0f 91       	pop	r16
    218e:	08 95       	ret

00002190 <display_continuing>:

void display_continuing() {
    2190:	0f 93       	push	r16
    2192:	1f 93       	push	r17
	ILI9225_clear();
    2194:	0e 94 53 14 	call	0x28a6	; 0x28a6 <ILI9225_clear>

	ILI9225_drawRectangle(WORLD_MARGIN - 1, WORLD_MARGIN - 1,
    2198:	0f ef       	ldi	r16, 0xFF	; 255
    219a:	1f ef       	ldi	r17, 0xFF	; 255
    219c:	23 ed       	ldi	r18, 0xD3	; 211
    219e:	30 e0       	ldi	r19, 0x00	; 0
    21a0:	47 ea       	ldi	r20, 0xA7	; 167
    21a2:	50 e0       	ldi	r21, 0x00	; 0
    21a4:	67 e0       	ldi	r22, 0x07	; 7
    21a6:	70 e0       	ldi	r23, 0x00	; 0
    21a8:	87 e0       	ldi	r24, 0x07	; 7
    21aa:	90 e0       	ldi	r25, 0x00	; 0
    21ac:	0e 94 70 15 	call	0x2ae0	; 0x2ae0 <ILI9225_drawRectangle>
	ILI9225_LCD_WIDTH  - (WORLD_MARGIN + 1),
	ILI9225_LCD_HEIGHT - (WORLD_MARGIN + 1),
	COLOR_WHITE);
	
	ILI9225_setFont(Terminal12x16, 0);
    21b0:	60 e0       	ldi	r22, 0x00	; 0
    21b2:	70 e0       	ldi	r23, 0x00	; 0
    21b4:	88 e6       	ldi	r24, 0x68	; 104
    21b6:	90 e0       	ldi	r25, 0x00	; 0
    21b8:	0e 94 a7 15 	call	0x2b4e	; 0x2b4e <ILI9225_setFont>
	ILI9225_drawText(20, 40, "CONTINUING", strlen("CONTINUING"), COLOR_ORANGE);
    21bc:	00 e2       	ldi	r16, 0x20	; 32
    21be:	1d ef       	ldi	r17, 0xFD	; 253
    21c0:	2a e0       	ldi	r18, 0x0A	; 10
    21c2:	30 e0       	ldi	r19, 0x00	; 0
    21c4:	41 e3       	ldi	r20, 0x31	; 49
    21c6:	52 e0       	ldi	r21, 0x02	; 2
    21c8:	68 e2       	ldi	r22, 0x28	; 40
    21ca:	70 e0       	ldi	r23, 0x00	; 0
    21cc:	84 e1       	ldi	r24, 0x14	; 20
    21ce:	90 e0       	ldi	r25, 0x00	; 0
    21d0:	0e 94 41 18 	call	0x3082	; 0x3082 <ILI9225_drawText>
	ILI9225_drawText(40, 60, "WORLD", strlen("WORLD"), COLOR_ORANGE);
    21d4:	25 e0       	ldi	r18, 0x05	; 5
    21d6:	30 e0       	ldi	r19, 0x00	; 0
    21d8:	4c e1       	ldi	r20, 0x1C	; 28
    21da:	52 e0       	ldi	r21, 0x02	; 2
    21dc:	6c e3       	ldi	r22, 0x3C	; 60
    21de:	70 e0       	ldi	r23, 0x00	; 0
    21e0:	88 e2       	ldi	r24, 0x28	; 40
    21e2:	90 e0       	ldi	r25, 0x00	; 0
    21e4:	0e 94 41 18 	call	0x3082	; 0x3082 <ILI9225_drawText>
	
	ILI9225_setFont(Terminal6x8, 0);
    21e8:	60 e0       	ldi	r22, 0x00	; 0
    21ea:	70 e0       	ldi	r23, 0x00	; 0
    21ec:	80 e7       	ldi	r24, 0x70	; 112
    21ee:	92 e1       	ldi	r25, 0x12	; 18
    21f0:	0e 94 a7 15 	call	0x2b4e	; 0x2b4e <ILI9225_setFont>
	ILI9225_drawText(30, 80, "Please wait...", strlen("Please wait..."), COLOR_WHITE);
    21f4:	0f ef       	ldi	r16, 0xFF	; 255
    21f6:	1f ef       	ldi	r17, 0xFF	; 255
    21f8:	2e e0       	ldi	r18, 0x0E	; 14
    21fa:	30 e0       	ldi	r19, 0x00	; 0
    21fc:	42 e2       	ldi	r20, 0x22	; 34
    21fe:	52 e0       	ldi	r21, 0x02	; 2
    2200:	60 e5       	ldi	r22, 0x50	; 80
    2202:	70 e0       	ldi	r23, 0x00	; 0
    2204:	8e e1       	ldi	r24, 0x1E	; 30
    2206:	90 e0       	ldi	r25, 0x00	; 0
    2208:	0e 94 41 18 	call	0x3082	; 0x3082 <ILI9225_drawText>
}
    220c:	1f 91       	pop	r17
    220e:	0f 91       	pop	r16
    2210:	08 95       	ret

00002212 <display_game_info>:

void  display_game_info() {
    2212:	0f 93       	push	r16
    2214:	1f 93       	push	r17
	ILI9225_drawText(10, 180, "Hold C to toggle color", strlen("Hold C to toggle color"), COLOR_ORANGE);
    2216:	00 e2       	ldi	r16, 0x20	; 32
    2218:	1d ef       	ldi	r17, 0xFD	; 253
    221a:	26 e1       	ldi	r18, 0x16	; 22
    221c:	30 e0       	ldi	r19, 0x00	; 0
    221e:	4c e3       	ldi	r20, 0x3C	; 60
    2220:	52 e0       	ldi	r21, 0x02	; 2
    2222:	64 eb       	ldi	r22, 0xB4	; 180
    2224:	70 e0       	ldi	r23, 0x00	; 0
    2226:	8a e0       	ldi	r24, 0x0A	; 10
    2228:	90 e0       	ldi	r25, 0x00	; 0
    222a:	0e 94 41 18 	call	0x3082	; 0x3082 <ILI9225_drawText>
	ILI9225_drawText(10, 190, "Hold D to exit", strlen("Hold D to exit"), COLOR_ORANGE);
    222e:	2e e0       	ldi	r18, 0x0E	; 14
    2230:	30 e0       	ldi	r19, 0x00	; 0
    2232:	43 e5       	ldi	r20, 0x53	; 83
    2234:	52 e0       	ldi	r21, 0x02	; 2
    2236:	6e eb       	ldi	r22, 0xBE	; 190
    2238:	70 e0       	ldi	r23, 0x00	; 0
    223a:	8a e0       	ldi	r24, 0x0A	; 10
    223c:	90 e0       	ldi	r25, 0x00	; 0
    223e:	0e 94 41 18 	call	0x3082	; 0x3082 <ILI9225_drawText>
}
    2242:	1f 91       	pop	r17
    2244:	0f 91       	pop	r16
    2246:	08 95       	ret

00002248 <game_on>:

void game_on() {
    2248:	0f 93       	push	r16
    224a:	1f 93       	push	r17
    224c:	cf 93       	push	r28
	char key_pressed = 0;
	int color_mode = 0;
    224e:	00 e0       	ldi	r16, 0x00	; 0
    2250:	10 e0       	ldi	r17, 0x00	; 0
	ILI9225_drawText(10, 180, "Hold C to toggle color", strlen("Hold C to toggle color"), COLOR_ORANGE);
	ILI9225_drawText(10, 190, "Hold D to exit", strlen("Hold D to exit"), COLOR_ORANGE);
}

void game_on() {
	char key_pressed = 0;
    2252:	c0 e0       	ldi	r28, 0x00	; 0
	int color_mode = 0;
	
	while ((key_pressed != 'D')) {
    2254:	12 c0       	rjmp	.+36     	; 0x227a <game_on+0x32>
		key_pressed = keypad_scan();
    2256:	0e 94 ea 11 	call	0x23d4	; 0x23d4 <keypad_scan>
    225a:	c8 2f       	mov	r28, r24
		if (key_pressed == 'C') color_mode = !color_mode;
    225c:	83 34       	cpi	r24, 0x43	; 67
    225e:	31 f4       	brne	.+12     	; 0x226c <game_on+0x24>
    2260:	81 e0       	ldi	r24, 0x01	; 1
    2262:	01 2b       	or	r16, r17
    2264:	09 f0       	breq	.+2      	; 0x2268 <game_on+0x20>
    2266:	80 e0       	ldi	r24, 0x00	; 0
    2268:	08 2f       	mov	r16, r24
    226a:	10 e0       	ldi	r17, 0x00	; 0
		next_world_generation();
    226c:	0e 94 bf 0d 	call	0x1b7e	; 0x1b7e <next_world_generation>
		write_world_to_eeprom();
    2270:	0e 94 46 0b 	call	0x168c	; 0x168c <write_world_to_eeprom>
		world_display(color_mode);
    2274:	c8 01       	movw	r24, r16
    2276:	0e 94 df 0e 	call	0x1dbe	; 0x1dbe <world_display>

void game_on() {
	char key_pressed = 0;
	int color_mode = 0;
	
	while ((key_pressed != 'D')) {
    227a:	c4 34       	cpi	r28, 0x44	; 68
    227c:	61 f7       	brne	.-40     	; 0x2256 <game_on+0xe>
		next_world_generation();
		write_world_to_eeprom();
		world_display(color_mode);
	}
	
}
    227e:	cf 91       	pop	r28
    2280:	1f 91       	pop	r17
    2282:	0f 91       	pop	r16
    2284:	08 95       	ret

00002286 <start_new_game>:

void start_new_game() {
    2286:	cf 93       	push	r28
    2288:	df 93       	push	r29
	int rand_num = display_rand();
    228a:	0e 94 f9 0f 	call	0x1ff2	; 0x1ff2 <display_rand>
    228e:	ec 01       	movw	r28, r24
	
	if (!rand_num) return;
    2290:	89 2b       	or	r24, r25
    2292:	e9 f0       	breq	.+58     	; 0x22ce <start_new_game+0x48>
	
	display_generating();
    2294:	0e 94 87 10 	call	0x210e	; 0x210e <display_generating>
	
	generate_random_world(rand_num*10);
    2298:	ce 01       	movw	r24, r28
    229a:	88 0f       	add	r24, r24
    229c:	99 1f       	adc	r25, r25
    229e:	cc 0f       	add	r28, r28
    22a0:	dd 1f       	adc	r29, r29
    22a2:	cc 0f       	add	r28, r28
    22a4:	dd 1f       	adc	r29, r29
    22a6:	cc 0f       	add	r28, r28
    22a8:	dd 1f       	adc	r29, r29
    22aa:	8c 0f       	add	r24, r28
    22ac:	9d 1f       	adc	r25, r29
    22ae:	0e 94 2d 0f 	call	0x1e5a	; 0x1e5a <generate_random_world>
	write_world_to_eeprom();
    22b2:	0e 94 46 0b 	call	0x168c	; 0x168c <write_world_to_eeprom>
	
	ILI9225_clear();
    22b6:	0e 94 53 14 	call	0x28a6	; 0x28a6 <ILI9225_clear>
	world_init();
    22ba:	0e 94 73 0f 	call	0x1ee6	; 0x1ee6 <world_init>
	display_game_info();
    22be:	0e 94 09 11 	call	0x2212	; 0x2212 <display_game_info>
	
	world_display(0);
    22c2:	80 e0       	ldi	r24, 0x00	; 0
    22c4:	90 e0       	ldi	r25, 0x00	; 0
    22c6:	0e 94 df 0e 	call	0x1dbe	; 0x1dbe <world_display>
	game_on();
    22ca:	0e 94 24 11 	call	0x2248	; 0x2248 <game_on>
}
    22ce:	df 91       	pop	r29
    22d0:	cf 91       	pop	r28
    22d2:	08 95       	ret

000022d4 <continue_game>:

void continue_game() {
	display_continuing();
    22d4:	0e 94 c8 10 	call	0x2190	; 0x2190 <display_continuing>
	read_world_from_eeprom();
    22d8:	0e 94 7c 0b 	call	0x16f8	; 0x16f8 <read_world_from_eeprom>
	
	ILI9225_clear();
    22dc:	0e 94 53 14 	call	0x28a6	; 0x28a6 <ILI9225_clear>
	world_init();
    22e0:	0e 94 73 0f 	call	0x1ee6	; 0x1ee6 <world_init>
	display_game_info();
    22e4:	0e 94 09 11 	call	0x2212	; 0x2212 <display_game_info>
	
	world_display(0);
    22e8:	80 e0       	ldi	r24, 0x00	; 0
    22ea:	90 e0       	ldi	r25, 0x00	; 0
    22ec:	0e 94 df 0e 	call	0x1dbe	; 0x1dbe <world_display>
	game_on();
    22f0:	0e 94 24 11 	call	0x2248	; 0x2248 <game_on>
    22f4:	08 95       	ret

000022f6 <exit_game>:
}

void exit_game() {
    22f6:	0f 93       	push	r16
    22f8:	1f 93       	push	r17
	ILI9225_clear();
    22fa:	0e 94 53 14 	call	0x28a6	; 0x28a6 <ILI9225_clear>

	ILI9225_drawRectangle(WORLD_MARGIN - 1, WORLD_MARGIN - 1,
    22fe:	0f ef       	ldi	r16, 0xFF	; 255
    2300:	1f ef       	ldi	r17, 0xFF	; 255
    2302:	23 ed       	ldi	r18, 0xD3	; 211
    2304:	30 e0       	ldi	r19, 0x00	; 0
    2306:	47 ea       	ldi	r20, 0xA7	; 167
    2308:	50 e0       	ldi	r21, 0x00	; 0
    230a:	67 e0       	ldi	r22, 0x07	; 7
    230c:	70 e0       	ldi	r23, 0x00	; 0
    230e:	87 e0       	ldi	r24, 0x07	; 7
    2310:	90 e0       	ldi	r25, 0x00	; 0
    2312:	0e 94 70 15 	call	0x2ae0	; 0x2ae0 <ILI9225_drawRectangle>
	ILI9225_LCD_WIDTH  - (WORLD_MARGIN + 1),
	ILI9225_LCD_HEIGHT - (WORLD_MARGIN + 1),
	COLOR_WHITE);
	
	ILI9225_setFont(Terminal12x16, 0);
    2316:	60 e0       	ldi	r22, 0x00	; 0
    2318:	70 e0       	ldi	r23, 0x00	; 0
    231a:	88 e6       	ldi	r24, 0x68	; 104
    231c:	90 e0       	ldi	r25, 0x00	; 0
    231e:	0e 94 a7 15 	call	0x2b4e	; 0x2b4e <ILI9225_setFont>
	ILI9225_drawText(20, 100, "EXIT GAME...", strlen("EXIT GAME..."), COLOR_YELLOW);
    2322:	00 ee       	ldi	r16, 0xE0	; 224
    2324:	1f ef       	ldi	r17, 0xFF	; 255
    2326:	2c e0       	ldi	r18, 0x0C	; 12
    2328:	30 e0       	ldi	r19, 0x00	; 0
    232a:	42 e6       	ldi	r20, 0x62	; 98
    232c:	52 e0       	ldi	r21, 0x02	; 2
    232e:	64 e6       	ldi	r22, 0x64	; 100
    2330:	70 e0       	ldi	r23, 0x00	; 0
    2332:	84 e1       	ldi	r24, 0x14	; 20
    2334:	90 e0       	ldi	r25, 0x00	; 0
    2336:	0e 94 41 18 	call	0x3082	; 0x3082 <ILI9225_drawText>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    233a:	2f ef       	ldi	r18, 0xFF	; 255
    233c:	8b e7       	ldi	r24, 0x7B	; 123
    233e:	92 e9       	ldi	r25, 0x92	; 146
    2340:	21 50       	subi	r18, 0x01	; 1
    2342:	80 40       	sbci	r24, 0x00	; 0
    2344:	90 40       	sbci	r25, 0x00	; 0
    2346:	e1 f7       	brne	.-8      	; 0x2340 <exit_game+0x4a>
    2348:	00 c0       	rjmp	.+0      	; 0x234a <exit_game+0x54>
    234a:	00 00       	nop
	
	_delay_ms(3000);
}
    234c:	1f 91       	pop	r17
    234e:	0f 91       	pop	r16
    2350:	08 95       	ret

00002352 <game_handle>:
void game_handle() {
	char key_pressed;
	
	while (1)
	{
		key_pressed = keypad_scan();
    2352:	0e 94 ea 11 	call	0x23d4	; 0x23d4 <keypad_scan>
		
		if (key_pressed == '*') {
    2356:	8a 32       	cpi	r24, 0x2A	; 42
    2358:	29 f4       	brne	.+10     	; 0x2364 <game_handle+0x12>
			start_new_game();
    235a:	0e 94 43 11 	call	0x2286	; 0x2286 <start_new_game>
			exit_game();
    235e:	0e 94 7b 11 	call	0x22f6	; 0x22f6 <exit_game>
			break;
    2362:	08 95       	ret
		}
		else if (key_pressed == '#') {
    2364:	83 32       	cpi	r24, 0x23	; 35
    2366:	a9 f7       	brne	.-22     	; 0x2352 <game_handle>
			continue_game();
    2368:	0e 94 6a 11 	call	0x22d4	; 0x22d4 <continue_game>
			exit_game();	
    236c:	0e 94 7b 11 	call	0x22f6	; 0x22f6 <exit_game>
    2370:	08 95       	ret

00002372 <keypad_init>:

//----- Initialize keypad ROWs as output and COLs as input -----//
void keypad_init(void)
{
	//Set the rows direction as output
	ROW0_DDR	|= (1 << ROW0);
    2372:	84 b1       	in	r24, 0x04	; 4
    2374:	82 60       	ori	r24, 0x02	; 2
    2376:	84 b9       	out	0x04, r24	; 4
	ROW1_DDR	|= (1 << ROW1);
    2378:	84 b1       	in	r24, 0x04	; 4
    237a:	81 60       	ori	r24, 0x01	; 1
    237c:	84 b9       	out	0x04, r24	; 4
	ROW2_DDR	|= (1 << ROW2);
    237e:	8a b1       	in	r24, 0x0a	; 10
    2380:	80 68       	ori	r24, 0x80	; 128
    2382:	8a b9       	out	0x0a, r24	; 10
	ROW3_DDR	|= (1 << ROW3);
    2384:	8a b1       	in	r24, 0x0a	; 10
    2386:	80 64       	ori	r24, 0x40	; 64
    2388:	8a b9       	out	0x0a, r24	; 10
	
	//Set the COL direction as input
	COL0_DDR	&= ~(1 << COL0);
    238a:	8a b1       	in	r24, 0x0a	; 10
    238c:	8f 7d       	andi	r24, 0xDF	; 223
    238e:	8a b9       	out	0x0a, r24	; 10
	COL1_DDR	&= ~(1 << COL1);
    2390:	8a b1       	in	r24, 0x0a	; 10
    2392:	8f 7e       	andi	r24, 0xEF	; 239
    2394:	8a b9       	out	0x0a, r24	; 10
	COL2_DDR	&= ~(1 << COL2);
    2396:	8a b1       	in	r24, 0x0a	; 10
    2398:	87 7f       	andi	r24, 0xF7	; 247
    239a:	8a b9       	out	0x0a, r24	; 10
	COL3_DDR	&= ~(1 << COL3);
    239c:	8a b1       	in	r24, 0x0a	; 10
    239e:	8b 7f       	andi	r24, 0xFB	; 251
    23a0:	8a b9       	out	0x0a, r24	; 10
	
	//Enable COL Pull-up
	COL0_PULLUP |= (1 << COL0);
    23a2:	8b b1       	in	r24, 0x0b	; 11
    23a4:	80 62       	ori	r24, 0x20	; 32
    23a6:	8b b9       	out	0x0b, r24	; 11
	COL1_PULLUP |= (1 << COL1);
    23a8:	8b b1       	in	r24, 0x0b	; 11
    23aa:	80 61       	ori	r24, 0x10	; 16
    23ac:	8b b9       	out	0x0b, r24	; 11
	COL2_PULLUP |= (1 << COL2);
    23ae:	8b b1       	in	r24, 0x0b	; 11
    23b0:	88 60       	ori	r24, 0x08	; 8
    23b2:	8b b9       	out	0x0b, r24	; 11
	COL3_PULLUP |= (1 << COL3);
    23b4:	8b b1       	in	r24, 0x0b	; 11
    23b6:	84 60       	ori	r24, 0x04	; 4
    23b8:	8b b9       	out	0x0b, r24	; 11
	
	//Set the rows High
	ROW0_PORT	|= (1 << ROW0);
    23ba:	85 b1       	in	r24, 0x05	; 5
    23bc:	82 60       	ori	r24, 0x02	; 2
    23be:	85 b9       	out	0x05, r24	; 5
	ROW1_PORT	|= (1 << ROW1);
    23c0:	85 b1       	in	r24, 0x05	; 5
    23c2:	81 60       	ori	r24, 0x01	; 1
    23c4:	85 b9       	out	0x05, r24	; 5
	ROW2_PORT	|= (1 << ROW2);
    23c6:	8b b1       	in	r24, 0x0b	; 11
    23c8:	80 68       	ori	r24, 0x80	; 128
    23ca:	8b b9       	out	0x0b, r24	; 11
	ROW3_PORT	|= (1 << ROW3);
    23cc:	8b b1       	in	r24, 0x0b	; 11
    23ce:	80 64       	ori	r24, 0x40	; 64
    23d0:	8b b9       	out	0x0b, r24	; 11
    23d2:	08 95       	ret

000023d4 <keypad_scan>:
char keypad_scan(void)
{
	uint8_t row, input;
	
	// Loop on each row
	for(row = 0; row < 4; row++)
    23d4:	50 e0       	ldi	r21, 0x00	; 0
    23d6:	6a c0       	rjmp	.+212    	; 0x24ac <keypad_scan+0xd8>
	{
		//Set all row high
		ROW0_PORT |= (1 << ROW0);
    23d8:	85 b1       	in	r24, 0x05	; 5
    23da:	82 60       	ori	r24, 0x02	; 2
    23dc:	85 b9       	out	0x05, r24	; 5
		ROW1_PORT |= (1 << ROW1);
    23de:	85 b1       	in	r24, 0x05	; 5
    23e0:	81 60       	ori	r24, 0x01	; 1
    23e2:	85 b9       	out	0x05, r24	; 5
		ROW2_PORT |= (1 << ROW2);
    23e4:	8b b1       	in	r24, 0x0b	; 11
    23e6:	80 68       	ori	r24, 0x80	; 128
    23e8:	8b b9       	out	0x0b, r24	; 11
		ROW3_PORT |= (1 << ROW3);
    23ea:	8b b1       	in	r24, 0x0b	; 11
    23ec:	80 64       	ori	r24, 0x40	; 64
    23ee:	8b b9       	out	0x0b, r24	; 11
		
		// Clear row number from iteration
		switch(row)
    23f0:	51 30       	cpi	r21, 0x01	; 1
    23f2:	51 f0       	breq	.+20     	; 0x2408 <keypad_scan+0x34>
    23f4:	28 f0       	brcs	.+10     	; 0x2400 <keypad_scan+0x2c>
    23f6:	52 30       	cpi	r21, 0x02	; 2
    23f8:	59 f0       	breq	.+22     	; 0x2410 <keypad_scan+0x3c>
    23fa:	53 30       	cpi	r21, 0x03	; 3
    23fc:	69 f0       	breq	.+26     	; 0x2418 <keypad_scan+0x44>
    23fe:	0f c0       	rjmp	.+30     	; 0x241e <keypad_scan+0x4a>
		{
			case 0: ROW0_PORT &= ~(1 << ROW0);	break;
    2400:	85 b1       	in	r24, 0x05	; 5
    2402:	8d 7f       	andi	r24, 0xFD	; 253
    2404:	85 b9       	out	0x05, r24	; 5
    2406:	0b c0       	rjmp	.+22     	; 0x241e <keypad_scan+0x4a>
			case 1: ROW1_PORT &= ~(1 << ROW1);	break;
    2408:	85 b1       	in	r24, 0x05	; 5
    240a:	8e 7f       	andi	r24, 0xFE	; 254
    240c:	85 b9       	out	0x05, r24	; 5
    240e:	07 c0       	rjmp	.+14     	; 0x241e <keypad_scan+0x4a>
			case 2: ROW2_PORT &= ~(1 << ROW2);	break;
    2410:	8b b1       	in	r24, 0x0b	; 11
    2412:	8f 77       	andi	r24, 0x7F	; 127
    2414:	8b b9       	out	0x0b, r24	; 11
    2416:	03 c0       	rjmp	.+6      	; 0x241e <keypad_scan+0x4a>
			case 3: ROW3_PORT &= ~(1 << ROW3);	break;
    2418:	8b b1       	in	r24, 0x0b	; 11
    241a:	8f 7b       	andi	r24, 0xBF	; 191
    241c:	8b b9       	out	0x0b, r24	; 11
    241e:	8f e3       	ldi	r24, 0x3F	; 63
    2420:	9c e9       	ldi	r25, 0x9C	; 156
    2422:	01 97       	sbiw	r24, 0x01	; 1
    2424:	f1 f7       	brne	.-4      	; 0x2422 <keypad_scan+0x4e>
    2426:	00 c0       	rjmp	.+0      	; 0x2428 <keypad_scan+0x54>
    2428:	00 00       	nop
		
		// Must-have delay between Output and Input
		_delay_ms(10);
		
		// Read the Inputs
		input = (COL0_PIN & (1 << COL0));
    242a:	99 b1       	in	r25, 0x09	; 9
    242c:	29 2f       	mov	r18, r25
    242e:	20 72       	andi	r18, 0x20	; 32
		input |= (COL1_PIN & (1 << COL1));
    2430:	89 b1       	in	r24, 0x09	; 9
    2432:	80 71       	andi	r24, 0x10	; 16
    2434:	98 2f       	mov	r25, r24
    2436:	92 2b       	or	r25, r18
		input |= (COL2_PIN & (1 << COL2));
    2438:	49 b1       	in	r20, 0x09	; 9
    243a:	48 70       	andi	r20, 0x08	; 8
    243c:	84 2f       	mov	r24, r20
    243e:	89 2b       	or	r24, r25
		input |= (COL3_PIN & (1 << COL3));
    2440:	49 b1       	in	r20, 0x09	; 9
    2442:	44 70       	andi	r20, 0x04	; 4
    2444:	48 2b       	or	r20, r24
		
		// Checking if this was Input
		if (ALL_COLS != 1)
    2446:	89 b1       	in	r24, 0x09	; 9
    2448:	80 72       	andi	r24, 0x20	; 32
    244a:	90 e0       	ldi	r25, 0x00	; 0
    244c:	9c 01       	movw	r18, r24
    244e:	35 95       	asr	r19
    2450:	27 95       	ror	r18
    2452:	35 95       	asr	r19
    2454:	27 95       	ror	r18
    2456:	35 95       	asr	r19
    2458:	27 95       	ror	r18
    245a:	35 95       	asr	r19
    245c:	27 95       	ror	r18
    245e:	35 95       	asr	r19
    2460:	27 95       	ror	r18
    2462:	99 b1       	in	r25, 0x09	; 9
    2464:	90 71       	andi	r25, 0x10	; 16
    2466:	89 2f       	mov	r24, r25
    2468:	90 e0       	ldi	r25, 0x00	; 0
    246a:	95 95       	asr	r25
    246c:	87 95       	ror	r24
    246e:	95 95       	asr	r25
    2470:	87 95       	ror	r24
    2472:	95 95       	asr	r25
    2474:	87 95       	ror	r24
    2476:	95 95       	asr	r25
    2478:	87 95       	ror	r24
    247a:	82 23       	and	r24, r18
    247c:	93 23       	and	r25, r19
    247e:	29 b1       	in	r18, 0x09	; 9
    2480:	28 70       	andi	r18, 0x08	; 8
    2482:	30 e0       	ldi	r19, 0x00	; 0
    2484:	35 95       	asr	r19
    2486:	27 95       	ror	r18
    2488:	35 95       	asr	r19
    248a:	27 95       	ror	r18
    248c:	35 95       	asr	r19
    248e:	27 95       	ror	r18
    2490:	82 23       	and	r24, r18
    2492:	93 23       	and	r25, r19
    2494:	29 b1       	in	r18, 0x09	; 9
    2496:	24 70       	andi	r18, 0x04	; 4
    2498:	30 e0       	ldi	r19, 0x00	; 0
    249a:	35 95       	asr	r19
    249c:	27 95       	ror	r18
    249e:	35 95       	asr	r19
    24a0:	27 95       	ror	r18
    24a2:	82 23       	and	r24, r18
    24a4:	93 23       	and	r25, r19
    24a6:	01 97       	sbiw	r24, 0x01	; 1
    24a8:	21 f4       	brne	.+8      	; 0x24b2 <keypad_scan+0xde>
char keypad_scan(void)
{
	uint8_t row, input;
	
	// Loop on each row
	for(row = 0; row < 4; row++)
    24aa:	5f 5f       	subi	r21, 0xFF	; 255
    24ac:	54 30       	cpi	r21, 0x04	; 4
    24ae:	08 f4       	brcc	.+2      	; 0x24b2 <keypad_scan+0xde>
    24b0:	93 cf       	rjmp	.-218    	; 0x23d8 <keypad_scan+0x4>
		}
		
	}
	
	// When there is no Input
	if (row == 4) return 0;
    24b2:	54 30       	cpi	r21, 0x04	; 4
    24b4:	09 f4       	brne	.+2      	; 0x24b8 <keypad_scan+0xe4>
    24b6:	4f c0       	rjmp	.+158    	; 0x2556 <keypad_scan+0x182>
	
	// Checking cases
	switch(row)
    24b8:	51 30       	cpi	r21, 0x01	; 1
    24ba:	c1 f0       	breq	.+48     	; 0x24ec <keypad_scan+0x118>
    24bc:	28 f0       	brcs	.+10     	; 0x24c8 <keypad_scan+0xf4>
    24be:	52 30       	cpi	r21, 0x02	; 2
    24c0:	31 f1       	breq	.+76     	; 0x250e <keypad_scan+0x13a>
    24c2:	53 30       	cpi	r21, 0x03	; 3
    24c4:	a9 f1       	breq	.+106    	; 0x2530 <keypad_scan+0x15c>
    24c6:	49 c0       	rjmp	.+146    	; 0x255a <keypad_scan+0x186>
	{
		case 0:
		switch(input)
    24c8:	4c 32       	cpi	r20, 0x2C	; 44
    24ca:	09 f4       	brne	.+2      	; 0x24ce <keypad_scan+0xfa>
    24cc:	48 c0       	rjmp	.+144    	; 0x255e <keypad_scan+0x18a>
    24ce:	18 f4       	brcc	.+6      	; 0x24d6 <keypad_scan+0x102>
    24d0:	4c 31       	cpi	r20, 0x1C	; 28
    24d2:	31 f0       	breq	.+12     	; 0x24e0 <keypad_scan+0x10c>
    24d4:	0b c0       	rjmp	.+22     	; 0x24ec <keypad_scan+0x118>
    24d6:	44 33       	cpi	r20, 0x34	; 52
    24d8:	29 f0       	breq	.+10     	; 0x24e4 <keypad_scan+0x110>
    24da:	48 33       	cpi	r20, 0x38	; 56
    24dc:	29 f0       	breq	.+10     	; 0x24e8 <keypad_scan+0x114>
    24de:	06 c0       	rjmp	.+12     	; 0x24ec <keypad_scan+0x118>
		{
			case CODE_1: return '1';
    24e0:	81 e3       	ldi	r24, 0x31	; 49
    24e2:	08 95       	ret
			case CODE_2: return '2';
			case CODE_3: return '3';
    24e4:	83 e3       	ldi	r24, 0x33	; 51
    24e6:	08 95       	ret
			case CODE_4: return 'A';
    24e8:	81 e4       	ldi	r24, 0x41	; 65
    24ea:	08 95       	ret
		}
		case 1:
		switch(input)
    24ec:	4c 32       	cpi	r20, 0x2C	; 44
    24ee:	c9 f1       	breq	.+114    	; 0x2562 <keypad_scan+0x18e>
    24f0:	18 f4       	brcc	.+6      	; 0x24f8 <keypad_scan+0x124>
    24f2:	4c 31       	cpi	r20, 0x1C	; 28
    24f4:	31 f0       	breq	.+12     	; 0x2502 <keypad_scan+0x12e>
    24f6:	0b c0       	rjmp	.+22     	; 0x250e <keypad_scan+0x13a>
    24f8:	44 33       	cpi	r20, 0x34	; 52
    24fa:	29 f0       	breq	.+10     	; 0x2506 <keypad_scan+0x132>
    24fc:	48 33       	cpi	r20, 0x38	; 56
    24fe:	29 f0       	breq	.+10     	; 0x250a <keypad_scan+0x136>
    2500:	06 c0       	rjmp	.+12     	; 0x250e <keypad_scan+0x13a>
		{
			case CODE_1: return '4';
    2502:	84 e3       	ldi	r24, 0x34	; 52
    2504:	08 95       	ret
			case CODE_2: return '5';
			case CODE_3: return '6';
    2506:	86 e3       	ldi	r24, 0x36	; 54
    2508:	08 95       	ret
			case CODE_4: return 'B';
    250a:	82 e4       	ldi	r24, 0x42	; 66
    250c:	08 95       	ret
		}
		case 2:
		switch(input)
    250e:	4c 32       	cpi	r20, 0x2C	; 44
    2510:	51 f1       	breq	.+84     	; 0x2566 <keypad_scan+0x192>
    2512:	18 f4       	brcc	.+6      	; 0x251a <keypad_scan+0x146>
    2514:	4c 31       	cpi	r20, 0x1C	; 28
    2516:	31 f0       	breq	.+12     	; 0x2524 <keypad_scan+0x150>
    2518:	0b c0       	rjmp	.+22     	; 0x2530 <keypad_scan+0x15c>
    251a:	44 33       	cpi	r20, 0x34	; 52
    251c:	29 f0       	breq	.+10     	; 0x2528 <keypad_scan+0x154>
    251e:	48 33       	cpi	r20, 0x38	; 56
    2520:	29 f0       	breq	.+10     	; 0x252c <keypad_scan+0x158>
    2522:	06 c0       	rjmp	.+12     	; 0x2530 <keypad_scan+0x15c>
		{
			case CODE_1: return '7';
    2524:	87 e3       	ldi	r24, 0x37	; 55
    2526:	08 95       	ret
			case CODE_2: return '8';
			case CODE_3: return '9';
    2528:	89 e3       	ldi	r24, 0x39	; 57
    252a:	08 95       	ret
			case CODE_4: return 'C';
    252c:	83 e4       	ldi	r24, 0x43	; 67
    252e:	08 95       	ret
		}
		case 3:
		switch(input)
    2530:	4c 32       	cpi	r20, 0x2C	; 44
    2532:	d9 f0       	breq	.+54     	; 0x256a <keypad_scan+0x196>
    2534:	18 f4       	brcc	.+6      	; 0x253c <keypad_scan+0x168>
    2536:	4c 31       	cpi	r20, 0x1C	; 28
    2538:	31 f0       	breq	.+12     	; 0x2546 <keypad_scan+0x172>
    253a:	07 c0       	rjmp	.+14     	; 0x254a <keypad_scan+0x176>
    253c:	44 33       	cpi	r20, 0x34	; 52
    253e:	39 f0       	breq	.+14     	; 0x254e <keypad_scan+0x17a>
    2540:	48 33       	cpi	r20, 0x38	; 56
    2542:	39 f0       	breq	.+14     	; 0x2552 <keypad_scan+0x17e>
    2544:	02 c0       	rjmp	.+4      	; 0x254a <keypad_scan+0x176>
		{
			case CODE_1: return '*';
    2546:	8a e2       	ldi	r24, 0x2A	; 42
    2548:	08 95       	ret
			case CODE_2: return '0';
			case CODE_3: return '#';
			case CODE_4: return 'D';
		}
	}
	return 0;
    254a:	80 e0       	ldi	r24, 0x00	; 0
    254c:	08 95       	ret
		case 3:
		switch(input)
		{
			case CODE_1: return '*';
			case CODE_2: return '0';
			case CODE_3: return '#';
    254e:	83 e2       	ldi	r24, 0x23	; 35
    2550:	08 95       	ret
			case CODE_4: return 'D';
    2552:	84 e4       	ldi	r24, 0x44	; 68
    2554:	08 95       	ret
		}
		
	}
	
	// When there is no Input
	if (row == 4) return 0;
    2556:	80 e0       	ldi	r24, 0x00	; 0
    2558:	08 95       	ret
			case CODE_2: return '0';
			case CODE_3: return '#';
			case CODE_4: return 'D';
		}
	}
	return 0;
    255a:	80 e0       	ldi	r24, 0x00	; 0
    255c:	08 95       	ret
	{
		case 0:
		switch(input)
		{
			case CODE_1: return '1';
			case CODE_2: return '2';
    255e:	82 e3       	ldi	r24, 0x32	; 50
    2560:	08 95       	ret
		}
		case 1:
		switch(input)
		{
			case CODE_1: return '4';
			case CODE_2: return '5';
    2562:	85 e3       	ldi	r24, 0x35	; 53
    2564:	08 95       	ret
		}
		case 2:
		switch(input)
		{
			case CODE_1: return '7';
			case CODE_2: return '8';
    2566:	88 e3       	ldi	r24, 0x38	; 56
    2568:	08 95       	ret
		}
		case 3:
		switch(input)
		{
			case CODE_1: return '*';
			case CODE_2: return '0';
    256a:	80 e3       	ldi	r24, 0x30	; 48
			case CODE_3: return '#';
			case CODE_4: return 'D';
		}
	}
	return 0;
    256c:	08 95       	ret

0000256e <_spi_transmit16>:
			if (i & 7) byte >>= 1;
			else      byte   = pgm_read_byte(bitmap + j * byteWidth + i / 8);
			if (byte & 0x01) ILI9225_drawPixel(x + i, y + j, color);
		}
	}
}
    256e:	bc 01       	movw	r22, r24
    2570:	20 e0       	ldi	r18, 0x00	; 0
    2572:	30 e8       	ldi	r19, 0x80	; 128
    2574:	14 c0       	rjmp	.+40     	; 0x259e <_spi_transmit16+0x30>
    2576:	a9 01       	movw	r20, r18
    2578:	46 23       	and	r20, r22
    257a:	57 23       	and	r21, r23
    257c:	45 2b       	or	r20, r21
    257e:	21 f0       	breq	.+8      	; 0x2588 <_spi_transmit16+0x1a>
    2580:	98 b1       	in	r25, 0x08	; 8
    2582:	94 60       	ori	r25, 0x04	; 4
    2584:	98 b9       	out	0x08, r25	; 8
    2586:	03 c0       	rjmp	.+6      	; 0x258e <_spi_transmit16+0x20>
    2588:	98 b1       	in	r25, 0x08	; 8
    258a:	9b 7f       	andi	r25, 0xFB	; 251
    258c:	98 b9       	out	0x08, r25	; 8
    258e:	98 b1       	in	r25, 0x08	; 8
    2590:	92 60       	ori	r25, 0x02	; 2
    2592:	98 b9       	out	0x08, r25	; 8
    2594:	98 b1       	in	r25, 0x08	; 8
    2596:	9d 7f       	andi	r25, 0xFD	; 253
    2598:	98 b9       	out	0x08, r25	; 8
    259a:	36 95       	lsr	r19
    259c:	27 95       	ror	r18
    259e:	21 15       	cp	r18, r1
    25a0:	31 05       	cpc	r19, r1
    25a2:	49 f7       	brne	.-46     	; 0x2576 <_spi_transmit16+0x8>
    25a4:	08 95       	ret

000025a6 <_startWrite>:
    25a6:	88 b1       	in	r24, 0x08	; 8
    25a8:	8f 7d       	andi	r24, 0xDF	; 223
    25aa:	88 b9       	out	0x08, r24	; 8
    25ac:	08 95       	ret

000025ae <_endWrite>:
    25ae:	88 b1       	in	r24, 0x08	; 8
    25b0:	80 62       	ori	r24, 0x20	; 32
    25b2:	88 b9       	out	0x08, r24	; 8
    25b4:	08 95       	ret

000025b6 <_writeCommand16>:
    25b6:	28 b1       	in	r18, 0x08	; 8
    25b8:	27 7f       	andi	r18, 0xF7	; 247
    25ba:	28 b9       	out	0x08, r18	; 8
    25bc:	28 b1       	in	r18, 0x08	; 8
    25be:	2f 7d       	andi	r18, 0xDF	; 223
    25c0:	28 b9       	out	0x08, r18	; 8
    25c2:	0e 94 b7 12 	call	0x256e	; 0x256e <_spi_transmit16>
    25c6:	88 b1       	in	r24, 0x08	; 8
    25c8:	80 62       	ori	r24, 0x20	; 32
    25ca:	88 b9       	out	0x08, r24	; 8
    25cc:	08 95       	ret

000025ce <_writeData16>:
    25ce:	28 b1       	in	r18, 0x08	; 8
    25d0:	28 60       	ori	r18, 0x08	; 8
    25d2:	28 b9       	out	0x08, r18	; 8
    25d4:	28 b1       	in	r18, 0x08	; 8
    25d6:	2f 7d       	andi	r18, 0xDF	; 223
    25d8:	28 b9       	out	0x08, r18	; 8
    25da:	0e 94 b7 12 	call	0x256e	; 0x256e <_spi_transmit16>
    25de:	88 b1       	in	r24, 0x08	; 8
    25e0:	80 62       	ori	r24, 0x20	; 32
    25e2:	88 b9       	out	0x08, r24	; 8
    25e4:	08 95       	ret

000025e6 <_writeRegister>:
    25e6:	cf 93       	push	r28
    25e8:	df 93       	push	r29
    25ea:	eb 01       	movw	r28, r22
    25ec:	0e 94 db 12 	call	0x25b6	; 0x25b6 <_writeCommand16>
    25f0:	ce 01       	movw	r24, r28
    25f2:	0e 94 e7 12 	call	0x25ce	; 0x25ce <_writeData16>
    25f6:	df 91       	pop	r29
    25f8:	cf 91       	pop	r28
    25fa:	08 95       	ret

000025fc <_swap>:
    25fc:	fc 01       	movw	r30, r24
    25fe:	20 81       	ld	r18, Z
    2600:	31 81       	ldd	r19, Z+1	; 0x01
    2602:	fb 01       	movw	r30, r22
    2604:	40 81       	ld	r20, Z
    2606:	51 81       	ldd	r21, Z+1	; 0x01
    2608:	fc 01       	movw	r30, r24
    260a:	51 83       	std	Z+1, r21	; 0x01
    260c:	40 83       	st	Z, r20
    260e:	fb 01       	movw	r30, r22
    2610:	31 83       	std	Z+1, r19	; 0x01
    2612:	20 83       	st	Z, r18
    2614:	08 95       	ret

00002616 <_orientCoordinates>:
    2616:	fc 01       	movw	r30, r24
    2618:	90 91 b6 02 	lds	r25, 0x02B6	; 0x8002b6 <_orientation>
    261c:	92 30       	cpi	r25, 0x02	; 2
    261e:	a9 f0       	breq	.+42     	; 0x264a <_orientCoordinates+0x34>
    2620:	93 30       	cpi	r25, 0x03	; 3
    2622:	59 f1       	breq	.+86     	; 0x267a <_orientCoordinates+0x64>
    2624:	91 30       	cpi	r25, 0x01	; 1
    2626:	b9 f5       	brne	.+110    	; 0x2696 <_orientCoordinates+0x80>
    2628:	db 01       	movw	r26, r22
    262a:	2d 91       	ld	r18, X+
    262c:	3c 91       	ld	r19, X
    262e:	11 97       	sbiw	r26, 0x01	; 1
    2630:	80 91 bb 02 	lds	r24, 0x02BB	; 0x8002bb <_maxY>
    2634:	90 91 bc 02 	lds	r25, 0x02BC	; 0x8002bc <_maxY+0x1>
    2638:	82 1b       	sub	r24, r18
    263a:	93 0b       	sbc	r25, r19
    263c:	01 97       	sbiw	r24, 0x01	; 1
    263e:	8d 93       	st	X+, r24
    2640:	9c 93       	st	X, r25
    2642:	cf 01       	movw	r24, r30
    2644:	0e 94 fe 12 	call	0x25fc	; 0x25fc <_swap>
    2648:	08 95       	ret
    264a:	20 81       	ld	r18, Z
    264c:	31 81       	ldd	r19, Z+1	; 0x01
    264e:	80 91 b9 02 	lds	r24, 0x02B9	; 0x8002b9 <_maxX>
    2652:	90 91 ba 02 	lds	r25, 0x02BA	; 0x8002ba <_maxX+0x1>
    2656:	82 1b       	sub	r24, r18
    2658:	93 0b       	sbc	r25, r19
    265a:	01 97       	sbiw	r24, 0x01	; 1
    265c:	91 83       	std	Z+1, r25	; 0x01
    265e:	80 83       	st	Z, r24
    2660:	fb 01       	movw	r30, r22
    2662:	20 81       	ld	r18, Z
    2664:	31 81       	ldd	r19, Z+1	; 0x01
    2666:	80 91 bb 02 	lds	r24, 0x02BB	; 0x8002bb <_maxY>
    266a:	90 91 bc 02 	lds	r25, 0x02BC	; 0x8002bc <_maxY+0x1>
    266e:	82 1b       	sub	r24, r18
    2670:	93 0b       	sbc	r25, r19
    2672:	01 97       	sbiw	r24, 0x01	; 1
    2674:	91 83       	std	Z+1, r25	; 0x01
    2676:	80 83       	st	Z, r24
    2678:	08 95       	ret
    267a:	20 81       	ld	r18, Z
    267c:	31 81       	ldd	r19, Z+1	; 0x01
    267e:	80 91 b9 02 	lds	r24, 0x02B9	; 0x8002b9 <_maxX>
    2682:	90 91 ba 02 	lds	r25, 0x02BA	; 0x8002ba <_maxX+0x1>
    2686:	82 1b       	sub	r24, r18
    2688:	93 0b       	sbc	r25, r19
    268a:	01 97       	sbiw	r24, 0x01	; 1
    268c:	91 83       	std	Z+1, r25	; 0x01
    268e:	80 83       	st	Z, r24
    2690:	cf 01       	movw	r24, r30
    2692:	0e 94 fe 12 	call	0x25fc	; 0x25fc <_swap>
    2696:	08 95       	ret

00002698 <ILI9225_setWindow>:
    2698:	cf 93       	push	r28
    269a:	df 93       	push	r29
    269c:	cd b7       	in	r28, 0x3d	; 61
    269e:	de b7       	in	r29, 0x3e	; 62
    26a0:	28 97       	sbiw	r28, 0x08	; 8
    26a2:	0f b6       	in	r0, 0x3f	; 63
    26a4:	f8 94       	cli
    26a6:	de bf       	out	0x3e, r29	; 62
    26a8:	0f be       	out	0x3f, r0	; 63
    26aa:	cd bf       	out	0x3d, r28	; 61
    26ac:	9a 83       	std	Y+2, r25	; 0x02
    26ae:	89 83       	std	Y+1, r24	; 0x01
    26b0:	7c 83       	std	Y+4, r23	; 0x04
    26b2:	6b 83       	std	Y+3, r22	; 0x03
    26b4:	5e 83       	std	Y+6, r21	; 0x06
    26b6:	4d 83       	std	Y+5, r20	; 0x05
    26b8:	38 87       	std	Y+8, r19	; 0x08
    26ba:	2f 83       	std	Y+7, r18	; 0x07
    26bc:	be 01       	movw	r22, r28
    26be:	6d 5f       	subi	r22, 0xFD	; 253
    26c0:	7f 4f       	sbci	r23, 0xFF	; 255
    26c2:	ce 01       	movw	r24, r28
    26c4:	01 96       	adiw	r24, 0x01	; 1
    26c6:	0e 94 0b 13 	call	0x2616	; 0x2616 <_orientCoordinates>
    26ca:	be 01       	movw	r22, r28
    26cc:	69 5f       	subi	r22, 0xF9	; 249
    26ce:	7f 4f       	sbci	r23, 0xFF	; 255
    26d0:	ce 01       	movw	r24, r28
    26d2:	05 96       	adiw	r24, 0x05	; 5
    26d4:	0e 94 0b 13 	call	0x2616	; 0x2616 <_orientCoordinates>
    26d8:	2d 81       	ldd	r18, Y+5	; 0x05
    26da:	3e 81       	ldd	r19, Y+6	; 0x06
    26dc:	89 81       	ldd	r24, Y+1	; 0x01
    26de:	9a 81       	ldd	r25, Y+2	; 0x02
    26e0:	28 17       	cp	r18, r24
    26e2:	39 07       	cpc	r19, r25
    26e4:	38 f4       	brcc	.+14     	; 0x26f4 <ILI9225_setWindow+0x5c>
    26e6:	be 01       	movw	r22, r28
    26e8:	6b 5f       	subi	r22, 0xFB	; 251
    26ea:	7f 4f       	sbci	r23, 0xFF	; 255
    26ec:	ce 01       	movw	r24, r28
    26ee:	01 96       	adiw	r24, 0x01	; 1
    26f0:	0e 94 fe 12 	call	0x25fc	; 0x25fc <_swap>
    26f4:	2f 81       	ldd	r18, Y+7	; 0x07
    26f6:	38 85       	ldd	r19, Y+8	; 0x08
    26f8:	8b 81       	ldd	r24, Y+3	; 0x03
    26fa:	9c 81       	ldd	r25, Y+4	; 0x04
    26fc:	28 17       	cp	r18, r24
    26fe:	39 07       	cpc	r19, r25
    2700:	38 f4       	brcc	.+14     	; 0x2710 <ILI9225_setWindow+0x78>
    2702:	be 01       	movw	r22, r28
    2704:	69 5f       	subi	r22, 0xF9	; 249
    2706:	7f 4f       	sbci	r23, 0xFF	; 255
    2708:	ce 01       	movw	r24, r28
    270a:	03 96       	adiw	r24, 0x03	; 3
    270c:	0e 94 fe 12 	call	0x25fc	; 0x25fc <_swap>
    2710:	0e 94 d3 12 	call	0x25a6	; 0x25a6 <_startWrite>
    2714:	68 e3       	ldi	r22, 0x38	; 56
    2716:	70 e1       	ldi	r23, 0x10	; 16
    2718:	83 e0       	ldi	r24, 0x03	; 3
    271a:	90 e0       	ldi	r25, 0x00	; 0
    271c:	0e 94 f3 12 	call	0x25e6	; 0x25e6 <_writeRegister>
    2720:	6d 81       	ldd	r22, Y+5	; 0x05
    2722:	7e 81       	ldd	r23, Y+6	; 0x06
    2724:	86 e3       	ldi	r24, 0x36	; 54
    2726:	90 e0       	ldi	r25, 0x00	; 0
    2728:	0e 94 f3 12 	call	0x25e6	; 0x25e6 <_writeRegister>
    272c:	69 81       	ldd	r22, Y+1	; 0x01
    272e:	7a 81       	ldd	r23, Y+2	; 0x02
    2730:	87 e3       	ldi	r24, 0x37	; 55
    2732:	90 e0       	ldi	r25, 0x00	; 0
    2734:	0e 94 f3 12 	call	0x25e6	; 0x25e6 <_writeRegister>
    2738:	6f 81       	ldd	r22, Y+7	; 0x07
    273a:	78 85       	ldd	r23, Y+8	; 0x08
    273c:	88 e3       	ldi	r24, 0x38	; 56
    273e:	90 e0       	ldi	r25, 0x00	; 0
    2740:	0e 94 f3 12 	call	0x25e6	; 0x25e6 <_writeRegister>
    2744:	6b 81       	ldd	r22, Y+3	; 0x03
    2746:	7c 81       	ldd	r23, Y+4	; 0x04
    2748:	89 e3       	ldi	r24, 0x39	; 57
    274a:	90 e0       	ldi	r25, 0x00	; 0
    274c:	0e 94 f3 12 	call	0x25e6	; 0x25e6 <_writeRegister>
    2750:	69 81       	ldd	r22, Y+1	; 0x01
    2752:	7a 81       	ldd	r23, Y+2	; 0x02
    2754:	80 e2       	ldi	r24, 0x20	; 32
    2756:	90 e0       	ldi	r25, 0x00	; 0
    2758:	0e 94 f3 12 	call	0x25e6	; 0x25e6 <_writeRegister>
    275c:	6b 81       	ldd	r22, Y+3	; 0x03
    275e:	7c 81       	ldd	r23, Y+4	; 0x04
    2760:	81 e2       	ldi	r24, 0x21	; 33
    2762:	90 e0       	ldi	r25, 0x00	; 0
    2764:	0e 94 f3 12 	call	0x25e6	; 0x25e6 <_writeRegister>
    2768:	82 e2       	ldi	r24, 0x22	; 34
    276a:	90 e0       	ldi	r25, 0x00	; 0
    276c:	0e 94 db 12 	call	0x25b6	; 0x25b6 <_writeCommand16>
    2770:	0e 94 d7 12 	call	0x25ae	; 0x25ae <_endWrite>
    2774:	28 96       	adiw	r28, 0x08	; 8
    2776:	0f b6       	in	r0, 0x3f	; 63
    2778:	f8 94       	cli
    277a:	de bf       	out	0x3e, r29	; 62
    277c:	0f be       	out	0x3f, r0	; 63
    277e:	cd bf       	out	0x3d, r28	; 61
    2780:	df 91       	pop	r29
    2782:	cf 91       	pop	r28
    2784:	08 95       	ret

00002786 <ILI9225_setOrientation>:
    2786:	83 70       	andi	r24, 0x03	; 3
    2788:	80 93 b6 02 	sts	0x02B6, r24	; 0x8002b6 <_orientation>
    278c:	81 30       	cpi	r24, 0x01	; 1
    278e:	99 f0       	breq	.+38     	; 0x27b6 <ILI9225_setOrientation+0x30>
    2790:	28 f0       	brcs	.+10     	; 0x279c <ILI9225_setOrientation+0x16>
    2792:	82 30       	cpi	r24, 0x02	; 2
    2794:	e9 f0       	breq	.+58     	; 0x27d0 <ILI9225_setOrientation+0x4a>
    2796:	83 30       	cpi	r24, 0x03	; 3
    2798:	41 f1       	breq	.+80     	; 0x27ea <ILI9225_setOrientation+0x64>
    279a:	08 95       	ret
    279c:	80 eb       	ldi	r24, 0xB0	; 176
    279e:	90 e0       	ldi	r25, 0x00	; 0
    27a0:	90 93 ba 02 	sts	0x02BA, r25	; 0x8002ba <_maxX+0x1>
    27a4:	80 93 b9 02 	sts	0x02B9, r24	; 0x8002b9 <_maxX>
    27a8:	8c ed       	ldi	r24, 0xDC	; 220
    27aa:	90 e0       	ldi	r25, 0x00	; 0
    27ac:	90 93 bc 02 	sts	0x02BC, r25	; 0x8002bc <_maxY+0x1>
    27b0:	80 93 bb 02 	sts	0x02BB, r24	; 0x8002bb <_maxY>
    27b4:	08 95       	ret
    27b6:	8c ed       	ldi	r24, 0xDC	; 220
    27b8:	90 e0       	ldi	r25, 0x00	; 0
    27ba:	90 93 ba 02 	sts	0x02BA, r25	; 0x8002ba <_maxX+0x1>
    27be:	80 93 b9 02 	sts	0x02B9, r24	; 0x8002b9 <_maxX>
    27c2:	80 eb       	ldi	r24, 0xB0	; 176
    27c4:	90 e0       	ldi	r25, 0x00	; 0
    27c6:	90 93 bc 02 	sts	0x02BC, r25	; 0x8002bc <_maxY+0x1>
    27ca:	80 93 bb 02 	sts	0x02BB, r24	; 0x8002bb <_maxY>
    27ce:	08 95       	ret
    27d0:	80 eb       	ldi	r24, 0xB0	; 176
    27d2:	90 e0       	ldi	r25, 0x00	; 0
    27d4:	90 93 ba 02 	sts	0x02BA, r25	; 0x8002ba <_maxX+0x1>
    27d8:	80 93 b9 02 	sts	0x02B9, r24	; 0x8002b9 <_maxX>
    27dc:	8c ed       	ldi	r24, 0xDC	; 220
    27de:	90 e0       	ldi	r25, 0x00	; 0
    27e0:	90 93 bc 02 	sts	0x02BC, r25	; 0x8002bc <_maxY+0x1>
    27e4:	80 93 bb 02 	sts	0x02BB, r24	; 0x8002bb <_maxY>
    27e8:	08 95       	ret
    27ea:	8c ed       	ldi	r24, 0xDC	; 220
    27ec:	90 e0       	ldi	r25, 0x00	; 0
    27ee:	90 93 ba 02 	sts	0x02BA, r25	; 0x8002ba <_maxX+0x1>
    27f2:	80 93 b9 02 	sts	0x02B9, r24	; 0x8002b9 <_maxX>
    27f6:	80 eb       	ldi	r24, 0xB0	; 176
    27f8:	90 e0       	ldi	r25, 0x00	; 0
    27fa:	90 93 bc 02 	sts	0x02BC, r25	; 0x8002bc <_maxY+0x1>
    27fe:	80 93 bb 02 	sts	0x02BB, r24	; 0x8002bb <_maxY>
    2802:	08 95       	ret

00002804 <ILI9225_resetWindow>:
    2804:	6f ea       	ldi	r22, 0xAF	; 175
    2806:	70 e0       	ldi	r23, 0x00	; 0
    2808:	86 e3       	ldi	r24, 0x36	; 54
    280a:	90 e0       	ldi	r25, 0x00	; 0
    280c:	0e 94 f3 12 	call	0x25e6	; 0x25e6 <_writeRegister>
    2810:	60 e0       	ldi	r22, 0x00	; 0
    2812:	70 e0       	ldi	r23, 0x00	; 0
    2814:	87 e3       	ldi	r24, 0x37	; 55
    2816:	90 e0       	ldi	r25, 0x00	; 0
    2818:	0e 94 f3 12 	call	0x25e6	; 0x25e6 <_writeRegister>
    281c:	6b ed       	ldi	r22, 0xDB	; 219
    281e:	70 e0       	ldi	r23, 0x00	; 0
    2820:	88 e3       	ldi	r24, 0x38	; 56
    2822:	90 e0       	ldi	r25, 0x00	; 0
    2824:	0e 94 f3 12 	call	0x25e6	; 0x25e6 <_writeRegister>
    2828:	60 e0       	ldi	r22, 0x00	; 0
    282a:	70 e0       	ldi	r23, 0x00	; 0
    282c:	89 e3       	ldi	r24, 0x39	; 57
    282e:	90 e0       	ldi	r25, 0x00	; 0
    2830:	0e 94 f3 12 	call	0x25e6	; 0x25e6 <_writeRegister>
    2834:	08 95       	ret

00002836 <ILI9225_fillRectangle>:
    2836:	af 92       	push	r10
    2838:	bf 92       	push	r11
    283a:	cf 92       	push	r12
    283c:	df 92       	push	r13
    283e:	ef 92       	push	r14
    2840:	ff 92       	push	r15
    2842:	0f 93       	push	r16
    2844:	1f 93       	push	r17
    2846:	cf 93       	push	r28
    2848:	df 93       	push	r29
    284a:	6c 01       	movw	r12, r24
    284c:	5b 01       	movw	r10, r22
    284e:	ea 01       	movw	r28, r20
    2850:	79 01       	movw	r14, r18
    2852:	0e 94 4c 13 	call	0x2698	; 0x2698 <ILI9225_setWindow>
    2856:	0e 94 d3 12 	call	0x25a6	; 0x25a6 <_startWrite>
    285a:	ea 18       	sub	r14, r10
    285c:	fb 08       	sbc	r15, r11
    285e:	8f ef       	ldi	r24, 0xFF	; 255
    2860:	e8 1a       	sub	r14, r24
    2862:	f8 0a       	sbc	r15, r24
    2864:	cc 19       	sub	r28, r12
    2866:	dd 09       	sbc	r29, r13
    2868:	ce 01       	movw	r24, r28
    286a:	01 96       	adiw	r24, 0x01	; 1
    286c:	e8 9e       	mul	r14, r24
    286e:	e0 01       	movw	r28, r0
    2870:	e9 9e       	mul	r14, r25
    2872:	d0 0d       	add	r29, r0
    2874:	f8 9e       	mul	r15, r24
    2876:	d0 0d       	add	r29, r0
    2878:	11 24       	eor	r1, r1
    287a:	04 c0       	rjmp	.+8      	; 0x2884 <ILI9225_fillRectangle+0x4e>
    287c:	c8 01       	movw	r24, r16
    287e:	0e 94 e7 12 	call	0x25ce	; 0x25ce <_writeData16>
    2882:	21 97       	sbiw	r28, 0x01	; 1
    2884:	20 97       	sbiw	r28, 0x00	; 0
    2886:	d1 f7       	brne	.-12     	; 0x287c <ILI9225_fillRectangle+0x46>
    2888:	0e 94 d7 12 	call	0x25ae	; 0x25ae <_endWrite>
    288c:	0e 94 02 14 	call	0x2804	; 0x2804 <ILI9225_resetWindow>
    2890:	df 91       	pop	r29
    2892:	cf 91       	pop	r28
    2894:	1f 91       	pop	r17
    2896:	0f 91       	pop	r16
    2898:	ff 90       	pop	r15
    289a:	ef 90       	pop	r14
    289c:	df 90       	pop	r13
    289e:	cf 90       	pop	r12
    28a0:	bf 90       	pop	r11
    28a2:	af 90       	pop	r10
    28a4:	08 95       	ret

000028a6 <ILI9225_clear>:
    28a6:	0f 93       	push	r16
    28a8:	1f 93       	push	r17
    28aa:	cf 93       	push	r28
    28ac:	c0 91 b6 02 	lds	r28, 0x02B6	; 0x8002b6 <_orientation>
    28b0:	80 e0       	ldi	r24, 0x00	; 0
    28b2:	0e 94 c3 13 	call	0x2786	; 0x2786 <ILI9225_setOrientation>
    28b6:	20 91 bb 02 	lds	r18, 0x02BB	; 0x8002bb <_maxY>
    28ba:	30 91 bc 02 	lds	r19, 0x02BC	; 0x8002bc <_maxY+0x1>
    28be:	21 50       	subi	r18, 0x01	; 1
    28c0:	31 09       	sbc	r19, r1
    28c2:	40 91 b9 02 	lds	r20, 0x02B9	; 0x8002b9 <_maxX>
    28c6:	50 91 ba 02 	lds	r21, 0x02BA	; 0x8002ba <_maxX+0x1>
    28ca:	41 50       	subi	r20, 0x01	; 1
    28cc:	51 09       	sbc	r21, r1
    28ce:	00 e0       	ldi	r16, 0x00	; 0
    28d0:	10 e0       	ldi	r17, 0x00	; 0
    28d2:	60 e0       	ldi	r22, 0x00	; 0
    28d4:	70 e0       	ldi	r23, 0x00	; 0
    28d6:	80 e0       	ldi	r24, 0x00	; 0
    28d8:	90 e0       	ldi	r25, 0x00	; 0
    28da:	0e 94 1b 14 	call	0x2836	; 0x2836 <ILI9225_fillRectangle>
    28de:	8c 2f       	mov	r24, r28
    28e0:	0e 94 c3 13 	call	0x2786	; 0x2786 <ILI9225_setOrientation>
    28e4:	8f e3       	ldi	r24, 0x3F	; 63
    28e6:	9c e9       	ldi	r25, 0x9C	; 156
    28e8:	01 97       	sbiw	r24, 0x01	; 1
    28ea:	f1 f7       	brne	.-4      	; 0x28e8 <ILI9225_clear+0x42>
    28ec:	00 c0       	rjmp	.+0      	; 0x28ee <ILI9225_clear+0x48>
    28ee:	00 00       	nop
    28f0:	cf 91       	pop	r28
    28f2:	1f 91       	pop	r17
    28f4:	0f 91       	pop	r16
    28f6:	08 95       	ret

000028f8 <ILI9225_drawPixel>:
    28f8:	0f 93       	push	r16
    28fa:	1f 93       	push	r17
    28fc:	cf 93       	push	r28
    28fe:	df 93       	push	r29
    2900:	00 d0       	rcall	.+0      	; 0x2902 <ILI9225_drawPixel+0xa>
    2902:	00 d0       	rcall	.+0      	; 0x2904 <ILI9225_drawPixel+0xc>
    2904:	cd b7       	in	r28, 0x3d	; 61
    2906:	de b7       	in	r29, 0x3e	; 62
    2908:	9a 83       	std	Y+2, r25	; 0x02
    290a:	89 83       	std	Y+1, r24	; 0x01
    290c:	7c 83       	std	Y+4, r23	; 0x04
    290e:	6b 83       	std	Y+3, r22	; 0x03
    2910:	20 91 b9 02 	lds	r18, 0x02B9	; 0x8002b9 <_maxX>
    2914:	30 91 ba 02 	lds	r19, 0x02BA	; 0x8002ba <_maxX+0x1>
    2918:	82 17       	cp	r24, r18
    291a:	93 07       	cpc	r25, r19
    291c:	d0 f4       	brcc	.+52     	; 0x2952 <ILI9225_drawPixel+0x5a>
    291e:	20 91 bb 02 	lds	r18, 0x02BB	; 0x8002bb <_maxY>
    2922:	30 91 bc 02 	lds	r19, 0x02BC	; 0x8002bc <_maxY+0x1>
    2926:	62 17       	cp	r22, r18
    2928:	73 07       	cpc	r23, r19
    292a:	98 f4       	brcc	.+38     	; 0x2952 <ILI9225_drawPixel+0x5a>
    292c:	8a 01       	movw	r16, r20
    292e:	9b 01       	movw	r18, r22
    2930:	2f 5f       	subi	r18, 0xFF	; 255
    2932:	3f 4f       	sbci	r19, 0xFF	; 255
    2934:	ac 01       	movw	r20, r24
    2936:	4f 5f       	subi	r20, 0xFF	; 255
    2938:	5f 4f       	sbci	r21, 0xFF	; 255
    293a:	0e 94 4c 13 	call	0x2698	; 0x2698 <ILI9225_setWindow>
    293e:	be 01       	movw	r22, r28
    2940:	6d 5f       	subi	r22, 0xFD	; 253
    2942:	7f 4f       	sbci	r23, 0xFF	; 255
    2944:	ce 01       	movw	r24, r28
    2946:	01 96       	adiw	r24, 0x01	; 1
    2948:	0e 94 0b 13 	call	0x2616	; 0x2616 <_orientCoordinates>
    294c:	c8 01       	movw	r24, r16
    294e:	0e 94 e7 12 	call	0x25ce	; 0x25ce <_writeData16>
    2952:	0f 90       	pop	r0
    2954:	0f 90       	pop	r0
    2956:	0f 90       	pop	r0
    2958:	0f 90       	pop	r0
    295a:	df 91       	pop	r29
    295c:	cf 91       	pop	r28
    295e:	1f 91       	pop	r17
    2960:	0f 91       	pop	r16
    2962:	08 95       	ret

00002964 <ILI9225_drawLine>:
    2964:	4f 92       	push	r4
    2966:	5f 92       	push	r5
    2968:	6f 92       	push	r6
    296a:	7f 92       	push	r7
    296c:	8f 92       	push	r8
    296e:	9f 92       	push	r9
    2970:	af 92       	push	r10
    2972:	bf 92       	push	r11
    2974:	cf 92       	push	r12
    2976:	df 92       	push	r13
    2978:	ef 92       	push	r14
    297a:	ff 92       	push	r15
    297c:	0f 93       	push	r16
    297e:	1f 93       	push	r17
    2980:	cf 93       	push	r28
    2982:	df 93       	push	r29
    2984:	cd b7       	in	r28, 0x3d	; 61
    2986:	de b7       	in	r29, 0x3e	; 62
    2988:	28 97       	sbiw	r28, 0x08	; 8
    298a:	0f b6       	in	r0, 0x3f	; 63
    298c:	f8 94       	cli
    298e:	de bf       	out	0x3e, r29	; 62
    2990:	0f be       	out	0x3f, r0	; 63
    2992:	cd bf       	out	0x3d, r28	; 61
    2994:	9a 83       	std	Y+2, r25	; 0x02
    2996:	89 83       	std	Y+1, r24	; 0x01
    2998:	7c 83       	std	Y+4, r23	; 0x04
    299a:	6b 83       	std	Y+3, r22	; 0x03
    299c:	5e 83       	std	Y+6, r21	; 0x06
    299e:	4d 83       	std	Y+5, r20	; 0x05
    29a0:	38 87       	std	Y+8, r19	; 0x08
    29a2:	2f 83       	std	Y+7, r18	; 0x07
    29a4:	28 01       	movw	r4, r16
    29a6:	26 1b       	sub	r18, r22
    29a8:	37 0b       	sbc	r19, r23
    29aa:	79 01       	movw	r14, r18
    29ac:	22 f4       	brpl	.+8      	; 0x29b6 <ILI9225_drawLine+0x52>
    29ae:	ee 24       	eor	r14, r14
    29b0:	ff 24       	eor	r15, r15
    29b2:	e2 1a       	sub	r14, r18
    29b4:	f3 0a       	sbc	r15, r19
    29b6:	8d 81       	ldd	r24, Y+5	; 0x05
    29b8:	9e 81       	ldd	r25, Y+6	; 0x06
    29ba:	29 81       	ldd	r18, Y+1	; 0x01
    29bc:	3a 81       	ldd	r19, Y+2	; 0x02
    29be:	82 1b       	sub	r24, r18
    29c0:	93 0b       	sbc	r25, r19
    29c2:	6c 01       	movw	r12, r24
    29c4:	22 f4       	brpl	.+8      	; 0x29ce <ILI9225_drawLine+0x6a>
    29c6:	cc 24       	eor	r12, r12
    29c8:	dd 24       	eor	r13, r13
    29ca:	c8 1a       	sub	r12, r24
    29cc:	d9 0a       	sbc	r13, r25
    29ce:	ce 14       	cp	r12, r14
    29d0:	df 04       	cpc	r13, r15
    29d2:	74 f4       	brge	.+28     	; 0x29f0 <ILI9225_drawLine+0x8c>
    29d4:	be 01       	movw	r22, r28
    29d6:	6d 5f       	subi	r22, 0xFD	; 253
    29d8:	7f 4f       	sbci	r23, 0xFF	; 255
    29da:	ce 01       	movw	r24, r28
    29dc:	01 96       	adiw	r24, 0x01	; 1
    29de:	0e 94 fe 12 	call	0x25fc	; 0x25fc <_swap>
    29e2:	be 01       	movw	r22, r28
    29e4:	69 5f       	subi	r22, 0xF9	; 249
    29e6:	7f 4f       	sbci	r23, 0xFF	; 255
    29e8:	ce 01       	movw	r24, r28
    29ea:	05 96       	adiw	r24, 0x05	; 5
    29ec:	0e 94 fe 12 	call	0x25fc	; 0x25fc <_swap>
    29f0:	29 81       	ldd	r18, Y+1	; 0x01
    29f2:	3a 81       	ldd	r19, Y+2	; 0x02
    29f4:	8d 81       	ldd	r24, Y+5	; 0x05
    29f6:	9e 81       	ldd	r25, Y+6	; 0x06
    29f8:	82 17       	cp	r24, r18
    29fa:	93 07       	cpc	r25, r19
    29fc:	70 f4       	brcc	.+28     	; 0x2a1a <ILI9225_drawLine+0xb6>
    29fe:	be 01       	movw	r22, r28
    2a00:	6b 5f       	subi	r22, 0xFB	; 251
    2a02:	7f 4f       	sbci	r23, 0xFF	; 255
    2a04:	ce 01       	movw	r24, r28
    2a06:	01 96       	adiw	r24, 0x01	; 1
    2a08:	0e 94 fe 12 	call	0x25fc	; 0x25fc <_swap>
    2a0c:	be 01       	movw	r22, r28
    2a0e:	69 5f       	subi	r22, 0xF9	; 249
    2a10:	7f 4f       	sbci	r23, 0xFF	; 255
    2a12:	ce 01       	movw	r24, r28
    2a14:	03 96       	adiw	r24, 0x03	; 3
    2a16:	0e 94 fe 12 	call	0x25fc	; 0x25fc <_swap>
    2a1a:	8d 81       	ldd	r24, Y+5	; 0x05
    2a1c:	9e 81       	ldd	r25, Y+6	; 0x06
    2a1e:	29 81       	ldd	r18, Y+1	; 0x01
    2a20:	3a 81       	ldd	r19, Y+2	; 0x02
    2a22:	82 1b       	sub	r24, r18
    2a24:	93 0b       	sbc	r25, r19
    2a26:	3c 01       	movw	r6, r24
    2a28:	4f 81       	ldd	r20, Y+7	; 0x07
    2a2a:	58 85       	ldd	r21, Y+8	; 0x08
    2a2c:	2b 81       	ldd	r18, Y+3	; 0x03
    2a2e:	3c 81       	ldd	r19, Y+4	; 0x04
    2a30:	ba 01       	movw	r22, r20
    2a32:	62 1b       	sub	r22, r18
    2a34:	73 0b       	sbc	r23, r19
    2a36:	5b 01       	movw	r10, r22
    2a38:	22 f4       	brpl	.+8      	; 0x2a42 <ILI9225_drawLine+0xde>
    2a3a:	aa 24       	eor	r10, r10
    2a3c:	bb 24       	eor	r11, r11
    2a3e:	a6 1a       	sub	r10, r22
    2a40:	b7 0a       	sbc	r11, r23
    2a42:	8c 01       	movw	r16, r24
    2a44:	77 20       	and	r7, r7
    2a46:	14 f4       	brge	.+4      	; 0x2a4c <ILI9225_drawLine+0xe8>
    2a48:	0f 5f       	subi	r16, 0xFF	; 255
    2a4a:	1f 4f       	sbci	r17, 0xFF	; 255
    2a4c:	15 95       	asr	r17
    2a4e:	07 95       	ror	r16
    2a50:	24 17       	cp	r18, r20
    2a52:	35 07       	cpc	r19, r21
    2a54:	20 f4       	brcc	.+8      	; 0x2a5e <ILI9225_drawLine+0xfa>
    2a56:	88 24       	eor	r8, r8
    2a58:	83 94       	inc	r8
    2a5a:	91 2c       	mov	r9, r1
    2a5c:	23 c0       	rjmp	.+70     	; 0x2aa4 <ILI9225_drawLine+0x140>
    2a5e:	88 24       	eor	r8, r8
    2a60:	8a 94       	dec	r8
    2a62:	98 2c       	mov	r9, r8
    2a64:	1f c0       	rjmp	.+62     	; 0x2aa4 <ILI9225_drawLine+0x140>
    2a66:	ce 14       	cp	r12, r14
    2a68:	df 04       	cpc	r13, r15
    2a6a:	3c f4       	brge	.+14     	; 0x2a7a <ILI9225_drawLine+0x116>
    2a6c:	a2 01       	movw	r20, r4
    2a6e:	bc 01       	movw	r22, r24
    2a70:	8b 81       	ldd	r24, Y+3	; 0x03
    2a72:	9c 81       	ldd	r25, Y+4	; 0x04
    2a74:	0e 94 7c 14 	call	0x28f8	; 0x28f8 <ILI9225_drawPixel>
    2a78:	05 c0       	rjmp	.+10     	; 0x2a84 <ILI9225_drawLine+0x120>
    2a7a:	6b 81       	ldd	r22, Y+3	; 0x03
    2a7c:	7c 81       	ldd	r23, Y+4	; 0x04
    2a7e:	a2 01       	movw	r20, r4
    2a80:	0e 94 7c 14 	call	0x28f8	; 0x28f8 <ILI9225_drawPixel>
    2a84:	0a 19       	sub	r16, r10
    2a86:	1b 09       	sbc	r17, r11
    2a88:	42 f4       	brpl	.+16     	; 0x2a9a <ILI9225_drawLine+0x136>
    2a8a:	8b 81       	ldd	r24, Y+3	; 0x03
    2a8c:	9c 81       	ldd	r25, Y+4	; 0x04
    2a8e:	88 0d       	add	r24, r8
    2a90:	99 1d       	adc	r25, r9
    2a92:	9c 83       	std	Y+4, r25	; 0x04
    2a94:	8b 83       	std	Y+3, r24	; 0x03
    2a96:	06 0d       	add	r16, r6
    2a98:	17 1d       	adc	r17, r7
    2a9a:	89 81       	ldd	r24, Y+1	; 0x01
    2a9c:	9a 81       	ldd	r25, Y+2	; 0x02
    2a9e:	01 96       	adiw	r24, 0x01	; 1
    2aa0:	9a 83       	std	Y+2, r25	; 0x02
    2aa2:	89 83       	std	Y+1, r24	; 0x01
    2aa4:	89 81       	ldd	r24, Y+1	; 0x01
    2aa6:	9a 81       	ldd	r25, Y+2	; 0x02
    2aa8:	2d 81       	ldd	r18, Y+5	; 0x05
    2aaa:	3e 81       	ldd	r19, Y+6	; 0x06
    2aac:	28 17       	cp	r18, r24
    2aae:	39 07       	cpc	r19, r25
    2ab0:	d0 f6       	brcc	.-76     	; 0x2a66 <ILI9225_drawLine+0x102>
    2ab2:	28 96       	adiw	r28, 0x08	; 8
    2ab4:	0f b6       	in	r0, 0x3f	; 63
    2ab6:	f8 94       	cli
    2ab8:	de bf       	out	0x3e, r29	; 62
    2aba:	0f be       	out	0x3f, r0	; 63
    2abc:	cd bf       	out	0x3d, r28	; 61
    2abe:	df 91       	pop	r29
    2ac0:	cf 91       	pop	r28
    2ac2:	1f 91       	pop	r17
    2ac4:	0f 91       	pop	r16
    2ac6:	ff 90       	pop	r15
    2ac8:	ef 90       	pop	r14
    2aca:	df 90       	pop	r13
    2acc:	cf 90       	pop	r12
    2ace:	bf 90       	pop	r11
    2ad0:	af 90       	pop	r10
    2ad2:	9f 90       	pop	r9
    2ad4:	8f 90       	pop	r8
    2ad6:	7f 90       	pop	r7
    2ad8:	6f 90       	pop	r6
    2ada:	5f 90       	pop	r5
    2adc:	4f 90       	pop	r4
    2ade:	08 95       	ret

00002ae0 <ILI9225_drawRectangle>:
    2ae0:	8f 92       	push	r8
    2ae2:	9f 92       	push	r9
    2ae4:	af 92       	push	r10
    2ae6:	bf 92       	push	r11
    2ae8:	cf 92       	push	r12
    2aea:	df 92       	push	r13
    2aec:	ef 92       	push	r14
    2aee:	ff 92       	push	r15
    2af0:	0f 93       	push	r16
    2af2:	1f 93       	push	r17
    2af4:	cf 93       	push	r28
    2af6:	df 93       	push	r29
    2af8:	4c 01       	movw	r8, r24
    2afa:	7b 01       	movw	r14, r22
    2afc:	ea 01       	movw	r28, r20
    2afe:	69 01       	movw	r12, r18
    2b00:	ac 01       	movw	r20, r24
    2b02:	0e 94 b2 14 	call	0x2964	; 0x2964 <ILI9225_drawLine>
    2b06:	97 01       	movw	r18, r14
    2b08:	ae 01       	movw	r20, r28
    2b0a:	b7 01       	movw	r22, r14
    2b0c:	c4 01       	movw	r24, r8
    2b0e:	0e 94 b2 14 	call	0x2964	; 0x2964 <ILI9225_drawLine>
    2b12:	96 01       	movw	r18, r12
    2b14:	ae 01       	movw	r20, r28
    2b16:	b6 01       	movw	r22, r12
    2b18:	c4 01       	movw	r24, r8
    2b1a:	0e 94 b2 14 	call	0x2964	; 0x2964 <ILI9225_drawLine>
    2b1e:	96 01       	movw	r18, r12
    2b20:	ae 01       	movw	r20, r28
    2b22:	b7 01       	movw	r22, r14
    2b24:	ce 01       	movw	r24, r28
    2b26:	0e 94 b2 14 	call	0x2964	; 0x2964 <ILI9225_drawLine>
    2b2a:	df 91       	pop	r29
    2b2c:	cf 91       	pop	r28
    2b2e:	1f 91       	pop	r17
    2b30:	0f 91       	pop	r16
    2b32:	ff 90       	pop	r15
    2b34:	ef 90       	pop	r14
    2b36:	df 90       	pop	r13
    2b38:	cf 90       	pop	r12
    2b3a:	bf 90       	pop	r11
    2b3c:	af 90       	pop	r10
    2b3e:	9f 90       	pop	r9
    2b40:	8f 90       	pop	r8
    2b42:	08 95       	ret

00002b44 <ILI9225_setBackgroundColor>:
    2b44:	90 93 b8 02 	sts	0x02B8, r25	; 0x8002b8 <_bgColor+0x1>
    2b48:	80 93 b7 02 	sts	0x02B7, r24	; 0x8002b7 <_bgColor>
    2b4c:	08 95       	ret

00002b4e <ILI9225_setFont>:

void ILI9225_setFont(uint8_t* font, int monoSp) {
	myFont.font     = font;
    2b4e:	ae ea       	ldi	r26, 0xAE	; 174
    2b50:	b2 e0       	ldi	r27, 0x02	; 2
    2b52:	11 96       	adiw	r26, 0x01	; 1
    2b54:	9c 93       	st	X, r25
    2b56:	8e 93       	st	-X, r24
	myFont.width    = readFontByte(0);
    2b58:	fc 01       	movw	r30, r24
    2b5a:	24 91       	lpm	r18, Z
    2b5c:	12 96       	adiw	r26, 0x02	; 2
    2b5e:	2c 93       	st	X, r18
    2b60:	12 97       	sbiw	r26, 0x02	; 2
	myFont.height   = readFontByte(1);
    2b62:	31 96       	adiw	r30, 0x01	; 1
    2b64:	24 91       	lpm	r18, Z
    2b66:	13 96       	adiw	r26, 0x03	; 3
    2b68:	2c 93       	st	X, r18
    2b6a:	13 97       	sbiw	r26, 0x03	; 3
	myFont.offset   = readFontByte(2);
    2b6c:	31 96       	adiw	r30, 0x01	; 1
    2b6e:	e4 91       	lpm	r30, Z
    2b70:	14 96       	adiw	r26, 0x04	; 4
    2b72:	ec 93       	st	X, r30
    2b74:	14 97       	sbiw	r26, 0x04	; 4
	myFont.numchars = readFontByte(3);
    2b76:	fc 01       	movw	r30, r24
    2b78:	33 96       	adiw	r30, 0x03	; 3
    2b7a:	84 91       	lpm	r24, Z
    2b7c:	15 96       	adiw	r26, 0x05	; 5
    2b7e:	8c 93       	st	X, r24
    2b80:	15 97       	sbiw	r26, 0x05	; 5
	myFont.nbrows   = myFont.height / 8;
    2b82:	82 2f       	mov	r24, r18
    2b84:	86 95       	lsr	r24
    2b86:	86 95       	lsr	r24
    2b88:	86 95       	lsr	r24
    2b8a:	16 96       	adiw	r26, 0x06	; 6
    2b8c:	8c 93       	st	X, r24
    2b8e:	16 97       	sbiw	r26, 0x06	; 6
	myFont.monoSp   = monoSp;
    2b90:	17 96       	adiw	r26, 0x07	; 7
    2b92:	6c 93       	st	X, r22

	if (myFont.height % 8) myFont.nbrows++;  // Set number of bytes used by height of font in multiples of 8
    2b94:	e2 2f       	mov	r30, r18
    2b96:	e7 70       	andi	r30, 0x07	; 7
    2b98:	19 f0       	breq	.+6      	; 0x2ba0 <ILI9225_setFont+0x52>
    2b9a:	8f 5f       	subi	r24, 0xFF	; 255
    2b9c:	80 93 b4 02 	sts	0x02B4, r24	; 0x8002b4 <myFont+0x6>
    2ba0:	08 95       	ret

00002ba2 <ILI9225_init>:
	 }
 }

 void ILI9225_init(void) {
	 //PORT CONFIGURATIONS
	 ILI9225_RS_DDR		|= _BV(ILI9225_RS_BIT);
    2ba2:	87 b1       	in	r24, 0x07	; 7
    2ba4:	88 60       	ori	r24, 0x08	; 8
    2ba6:	87 b9       	out	0x07, r24	; 7
	 ILI9225_CS_DDR		|= _BV(ILI9225_CS_BIT);
    2ba8:	87 b1       	in	r24, 0x07	; 7
    2baa:	80 62       	ori	r24, 0x20	; 32
    2bac:	87 b9       	out	0x07, r24	; 7
	 ILI9225_RST_DDR	|= _BV(ILI9225_RST_BIT);
    2bae:	87 b1       	in	r24, 0x07	; 7
    2bb0:	80 61       	ori	r24, 0x10	; 16
    2bb2:	87 b9       	out	0x07, r24	; 7
	 ILI9225_CLK_DDR	|= _BV(ILI9225_CLK_BIT);
    2bb4:	87 b1       	in	r24, 0x07	; 7
    2bb6:	82 60       	ori	r24, 0x02	; 2
    2bb8:	87 b9       	out	0x07, r24	; 7
	 ILI9225_SDI_DDR	|= _BV(ILI9225_SDI_BIT);
    2bba:	87 b1       	in	r24, 0x07	; 7
    2bbc:	84 60       	ori	r24, 0x04	; 4
    2bbe:	87 b9       	out	0x07, r24	; 7

	 //SOFTWARE SPI BEGIN
	 ILI9225_RST_LOW();
    2bc0:	88 b1       	in	r24, 0x08	; 8
    2bc2:	8f 7e       	andi	r24, 0xEF	; 239
    2bc4:	88 b9       	out	0x08, r24	; 8
	 ILI9225_RS_LOW();
    2bc6:	88 b1       	in	r24, 0x08	; 8
    2bc8:	87 7f       	andi	r24, 0xF7	; 247
    2bca:	88 b9       	out	0x08, r24	; 8
	 ILI9225_SDI_LOW();
    2bcc:	88 b1       	in	r24, 0x08	; 8
    2bce:	8b 7f       	andi	r24, 0xFB	; 251
    2bd0:	88 b9       	out	0x08, r24	; 8
	 ILI9225_CLK_HIGH();
    2bd2:	88 b1       	in	r24, 0x08	; 8
    2bd4:	82 60       	ori	r24, 0x02	; 2
    2bd6:	88 b9       	out	0x08, r24	; 8
	 
	 ILI9225_RST_HIGH();
    2bd8:	88 b1       	in	r24, 0x08	; 8
    2bda:	80 61       	ori	r24, 0x10	; 16
    2bdc:	88 b9       	out	0x08, r24	; 8
    2bde:	8f e9       	ldi	r24, 0x9F	; 159
    2be0:	9f e0       	ldi	r25, 0x0F	; 15
    2be2:	01 97       	sbiw	r24, 0x01	; 1
    2be4:	f1 f7       	brne	.-4      	; 0x2be2 <ILI9225_init+0x40>
    2be6:	00 c0       	rjmp	.+0      	; 0x2be8 <ILI9225_init+0x46>
    2be8:	00 00       	nop
	 _delay_ms(1);
	 ILI9225_RST_LOW();
    2bea:	88 b1       	in	r24, 0x08	; 8
    2bec:	8f 7e       	andi	r24, 0xEF	; 239
    2bee:	88 b9       	out	0x08, r24	; 8
    2bf0:	8f e3       	ldi	r24, 0x3F	; 63
    2bf2:	9c e9       	ldi	r25, 0x9C	; 156
    2bf4:	01 97       	sbiw	r24, 0x01	; 1
    2bf6:	f1 f7       	brne	.-4      	; 0x2bf4 <ILI9225_init+0x52>
    2bf8:	00 c0       	rjmp	.+0      	; 0x2bfa <ILI9225_init+0x58>
    2bfa:	00 00       	nop
	 _delay_ms(10);
	 ILI9225_RST_HIGH();
    2bfc:	88 b1       	in	r24, 0x08	; 8
    2bfe:	80 61       	ori	r24, 0x10	; 16
    2c00:	88 b9       	out	0x08, r24	; 8
    2c02:	9f ef       	ldi	r25, 0xFF	; 255
    2c04:	20 e7       	ldi	r18, 0x70	; 112
    2c06:	82 e0       	ldi	r24, 0x02	; 2
    2c08:	91 50       	subi	r25, 0x01	; 1
    2c0a:	20 40       	sbci	r18, 0x00	; 0
    2c0c:	80 40       	sbci	r24, 0x00	; 0
    2c0e:	e1 f7       	brne	.-8      	; 0x2c08 <ILI9225_init+0x66>
    2c10:	00 c0       	rjmp	.+0      	; 0x2c12 <ILI9225_init+0x70>
    2c12:	00 00       	nop
	 _delay_ms(50);
	 
	 //*** START INITIAL SEQUENCE ***//
	 
	 //*** 1. Set SS bit and direction output from S528 to S1 ***//
	 _startWrite();
    2c14:	0e 94 d3 12 	call	0x25a6	; 0x25a6 <_startWrite>
	 _writeRegister(ILI9225_POWER_CTRL1, 0x0000); // Set SAP,DSTB,STB
    2c18:	60 e0       	ldi	r22, 0x00	; 0
    2c1a:	70 e0       	ldi	r23, 0x00	; 0
    2c1c:	80 e1       	ldi	r24, 0x10	; 16
    2c1e:	90 e0       	ldi	r25, 0x00	; 0
    2c20:	0e 94 f3 12 	call	0x25e6	; 0x25e6 <_writeRegister>
	 _writeRegister(ILI9225_POWER_CTRL2, 0x0000); // Set APON,PON,AON,VCI1EN,VC
    2c24:	60 e0       	ldi	r22, 0x00	; 0
    2c26:	70 e0       	ldi	r23, 0x00	; 0
    2c28:	81 e1       	ldi	r24, 0x11	; 17
    2c2a:	90 e0       	ldi	r25, 0x00	; 0
    2c2c:	0e 94 f3 12 	call	0x25e6	; 0x25e6 <_writeRegister>
	 _writeRegister(ILI9225_POWER_CTRL3, 0x0000); // Set BT,DC1,DC2,DC3
    2c30:	60 e0       	ldi	r22, 0x00	; 0
    2c32:	70 e0       	ldi	r23, 0x00	; 0
    2c34:	82 e1       	ldi	r24, 0x12	; 18
    2c36:	90 e0       	ldi	r25, 0x00	; 0
    2c38:	0e 94 f3 12 	call	0x25e6	; 0x25e6 <_writeRegister>
	 _writeRegister(ILI9225_POWER_CTRL4, 0x0000); // Set GVDD
    2c3c:	60 e0       	ldi	r22, 0x00	; 0
    2c3e:	70 e0       	ldi	r23, 0x00	; 0
    2c40:	83 e1       	ldi	r24, 0x13	; 19
    2c42:	90 e0       	ldi	r25, 0x00	; 0
    2c44:	0e 94 f3 12 	call	0x25e6	; 0x25e6 <_writeRegister>
	 _writeRegister(ILI9225_POWER_CTRL5, 0x0000); // Set VCOMH/VCOML voltage
    2c48:	60 e0       	ldi	r22, 0x00	; 0
    2c4a:	70 e0       	ldi	r23, 0x00	; 0
    2c4c:	84 e1       	ldi	r24, 0x14	; 20
    2c4e:	90 e0       	ldi	r25, 0x00	; 0
    2c50:	0e 94 f3 12 	call	0x25e6	; 0x25e6 <_writeRegister>
	 _endWrite();
    2c54:	0e 94 d7 12 	call	0x25ae	; 0x25ae <_endWrite>
    2c58:	9f ef       	ldi	r25, 0xFF	; 255
    2c5a:	23 ef       	ldi	r18, 0xF3	; 243
    2c5c:	81 e0       	ldi	r24, 0x01	; 1
    2c5e:	91 50       	subi	r25, 0x01	; 1
    2c60:	20 40       	sbci	r18, 0x00	; 0
    2c62:	80 40       	sbci	r24, 0x00	; 0
    2c64:	e1 f7       	brne	.-8      	; 0x2c5e <ILI9225_init+0xbc>
    2c66:	00 c0       	rjmp	.+0      	; 0x2c68 <ILI9225_init+0xc6>
    2c68:	00 00       	nop
	 _delay_ms(40);

	 //*** 2. Power-on sequence ***//
	 _startWrite();
    2c6a:	0e 94 d3 12 	call	0x25a6	; 0x25a6 <_startWrite>
	 _writeRegister(ILI9225_POWER_CTRL2, 0x0018); // Set APON,PON,AON,VCI1EN,VC
    2c6e:	68 e1       	ldi	r22, 0x18	; 24
    2c70:	70 e0       	ldi	r23, 0x00	; 0
    2c72:	81 e1       	ldi	r24, 0x11	; 17
    2c74:	90 e0       	ldi	r25, 0x00	; 0
    2c76:	0e 94 f3 12 	call	0x25e6	; 0x25e6 <_writeRegister>
	 _writeRegister(ILI9225_POWER_CTRL3, 0x6121); // Set BT,DC1,DC2,DC3
    2c7a:	61 e2       	ldi	r22, 0x21	; 33
    2c7c:	71 e6       	ldi	r23, 0x61	; 97
    2c7e:	82 e1       	ldi	r24, 0x12	; 18
    2c80:	90 e0       	ldi	r25, 0x00	; 0
    2c82:	0e 94 f3 12 	call	0x25e6	; 0x25e6 <_writeRegister>
	 _writeRegister(ILI9225_POWER_CTRL4, 0x006F); // Set GVDD   /*007F 0088 */
    2c86:	6f e6       	ldi	r22, 0x6F	; 111
    2c88:	70 e0       	ldi	r23, 0x00	; 0
    2c8a:	83 e1       	ldi	r24, 0x13	; 19
    2c8c:	90 e0       	ldi	r25, 0x00	; 0
    2c8e:	0e 94 f3 12 	call	0x25e6	; 0x25e6 <_writeRegister>
	 _writeRegister(ILI9225_POWER_CTRL5, 0x495F); // Set VCOMH/VCOML voltage
    2c92:	6f e5       	ldi	r22, 0x5F	; 95
    2c94:	79 e4       	ldi	r23, 0x49	; 73
    2c96:	84 e1       	ldi	r24, 0x14	; 20
    2c98:	90 e0       	ldi	r25, 0x00	; 0
    2c9a:	0e 94 f3 12 	call	0x25e6	; 0x25e6 <_writeRegister>
	 _writeRegister(ILI9225_POWER_CTRL1, 0x0800); // Set SAP,DSTB,STB
    2c9e:	60 e0       	ldi	r22, 0x00	; 0
    2ca0:	78 e0       	ldi	r23, 0x08	; 8
    2ca2:	80 e1       	ldi	r24, 0x10	; 16
    2ca4:	90 e0       	ldi	r25, 0x00	; 0
    2ca6:	0e 94 f3 12 	call	0x25e6	; 0x25e6 <_writeRegister>
	 _endWrite();
    2caa:	0e 94 d7 12 	call	0x25ae	; 0x25ae <_endWrite>
    2cae:	8f e3       	ldi	r24, 0x3F	; 63
    2cb0:	9c e9       	ldi	r25, 0x9C	; 156
    2cb2:	01 97       	sbiw	r24, 0x01	; 1
    2cb4:	f1 f7       	brne	.-4      	; 0x2cb2 <ILI9225_init+0x110>
    2cb6:	00 c0       	rjmp	.+0      	; 0x2cb8 <ILI9225_init+0x116>
    2cb8:	00 00       	nop
	 _delay_ms(10);
	 
	 _startWrite();
    2cba:	0e 94 d3 12 	call	0x25a6	; 0x25a6 <_startWrite>
	 _writeRegister(ILI9225_POWER_CTRL2, 0x103B); // Set APON,PON,AON,VCI1EN,VC
    2cbe:	6b e3       	ldi	r22, 0x3B	; 59
    2cc0:	70 e1       	ldi	r23, 0x10	; 16
    2cc2:	81 e1       	ldi	r24, 0x11	; 17
    2cc4:	90 e0       	ldi	r25, 0x00	; 0
    2cc6:	0e 94 f3 12 	call	0x25e6	; 0x25e6 <_writeRegister>
	 _endWrite();
    2cca:	0e 94 d7 12 	call	0x25ae	; 0x25ae <_endWrite>
    2cce:	9f ef       	ldi	r25, 0xFF	; 255
    2cd0:	20 e7       	ldi	r18, 0x70	; 112
    2cd2:	82 e0       	ldi	r24, 0x02	; 2
    2cd4:	91 50       	subi	r25, 0x01	; 1
    2cd6:	20 40       	sbci	r18, 0x00	; 0
    2cd8:	80 40       	sbci	r24, 0x00	; 0
    2cda:	e1 f7       	brne	.-8      	; 0x2cd4 <ILI9225_init+0x132>
    2cdc:	00 c0       	rjmp	.+0      	; 0x2cde <ILI9225_init+0x13c>
    2cde:	00 00       	nop
	 _delay_ms(50);

	 _startWrite();
    2ce0:	0e 94 d3 12 	call	0x25a6	; 0x25a6 <_startWrite>
	 _writeRegister(ILI9225_DRIVER_OUTPUT_CTRL, 0x011C); // set the display line number and display direction
    2ce4:	6c e1       	ldi	r22, 0x1C	; 28
    2ce6:	71 e0       	ldi	r23, 0x01	; 1
    2ce8:	81 e0       	ldi	r24, 0x01	; 1
    2cea:	90 e0       	ldi	r25, 0x00	; 0
    2cec:	0e 94 f3 12 	call	0x25e6	; 0x25e6 <_writeRegister>
	 _writeRegister(ILI9225_LCD_AC_DRIVING_CTRL, 0x0100); // set 1 line inversion
    2cf0:	60 e0       	ldi	r22, 0x00	; 0
    2cf2:	71 e0       	ldi	r23, 0x01	; 1
    2cf4:	82 e0       	ldi	r24, 0x02	; 2
    2cf6:	90 e0       	ldi	r25, 0x00	; 0
    2cf8:	0e 94 f3 12 	call	0x25e6	; 0x25e6 <_writeRegister>
	 _writeRegister(ILI9225_ENTRY_MODE, 0x1038); // set GRAM write direction and BGR=1.
    2cfc:	68 e3       	ldi	r22, 0x38	; 56
    2cfe:	70 e1       	ldi	r23, 0x10	; 16
    2d00:	83 e0       	ldi	r24, 0x03	; 3
    2d02:	90 e0       	ldi	r25, 0x00	; 0
    2d04:	0e 94 f3 12 	call	0x25e6	; 0x25e6 <_writeRegister>
	 _writeRegister(ILI9225_DISP_CTRL1, 0x0000); // Display off
    2d08:	60 e0       	ldi	r22, 0x00	; 0
    2d0a:	70 e0       	ldi	r23, 0x00	; 0
    2d0c:	87 e0       	ldi	r24, 0x07	; 7
    2d0e:	90 e0       	ldi	r25, 0x00	; 0
    2d10:	0e 94 f3 12 	call	0x25e6	; 0x25e6 <_writeRegister>
	 _writeRegister(ILI9225_BLANK_PERIOD_CTRL1, 0x0808); // set the back porch and front porch
    2d14:	68 e0       	ldi	r22, 0x08	; 8
    2d16:	78 e0       	ldi	r23, 0x08	; 8
    2d18:	88 e0       	ldi	r24, 0x08	; 8
    2d1a:	90 e0       	ldi	r25, 0x00	; 0
    2d1c:	0e 94 f3 12 	call	0x25e6	; 0x25e6 <_writeRegister>
	 _writeRegister(ILI9225_FRAME_CYCLE_CTRL, 0x1100); // set the clocks number per line
    2d20:	60 e0       	ldi	r22, 0x00	; 0
    2d22:	71 e1       	ldi	r23, 0x11	; 17
    2d24:	8b e0       	ldi	r24, 0x0B	; 11
    2d26:	90 e0       	ldi	r25, 0x00	; 0
    2d28:	0e 94 f3 12 	call	0x25e6	; 0x25e6 <_writeRegister>
	 _writeRegister(ILI9225_INTERFACE_CTRL, 0x0000); // CPU interface
    2d2c:	60 e0       	ldi	r22, 0x00	; 0
    2d2e:	70 e0       	ldi	r23, 0x00	; 0
    2d30:	8c e0       	ldi	r24, 0x0C	; 12
    2d32:	90 e0       	ldi	r25, 0x00	; 0
    2d34:	0e 94 f3 12 	call	0x25e6	; 0x25e6 <_writeRegister>
	 _writeRegister(ILI9225_OSC_CTRL, 0x0D01); // Set Osc  /*0e01*/
    2d38:	61 e0       	ldi	r22, 0x01	; 1
    2d3a:	7d e0       	ldi	r23, 0x0D	; 13
    2d3c:	8f e0       	ldi	r24, 0x0F	; 15
    2d3e:	90 e0       	ldi	r25, 0x00	; 0
    2d40:	0e 94 f3 12 	call	0x25e6	; 0x25e6 <_writeRegister>
	 _writeRegister(ILI9225_VCI_RECYCLING, 0x0020); // Set VCI recycling
    2d44:	60 e2       	ldi	r22, 0x20	; 32
    2d46:	70 e0       	ldi	r23, 0x00	; 0
    2d48:	85 e1       	ldi	r24, 0x15	; 21
    2d4a:	90 e0       	ldi	r25, 0x00	; 0
    2d4c:	0e 94 f3 12 	call	0x25e6	; 0x25e6 <_writeRegister>
	 _writeRegister(ILI9225_RAM_ADDR_SET1, 0x0000); // RAM Address
    2d50:	60 e0       	ldi	r22, 0x00	; 0
    2d52:	70 e0       	ldi	r23, 0x00	; 0
    2d54:	80 e2       	ldi	r24, 0x20	; 32
    2d56:	90 e0       	ldi	r25, 0x00	; 0
    2d58:	0e 94 f3 12 	call	0x25e6	; 0x25e6 <_writeRegister>
	 _writeRegister(ILI9225_RAM_ADDR_SET2, 0x0000); // RAM Address
    2d5c:	60 e0       	ldi	r22, 0x00	; 0
    2d5e:	70 e0       	ldi	r23, 0x00	; 0
    2d60:	81 e2       	ldi	r24, 0x21	; 33
    2d62:	90 e0       	ldi	r25, 0x00	; 0
    2d64:	0e 94 f3 12 	call	0x25e6	; 0x25e6 <_writeRegister>

	 //*** 3. Set GRAM area ***//
	 _writeRegister(ILI9225_GATE_SCAN_CTRL, 0x0000);
    2d68:	60 e0       	ldi	r22, 0x00	; 0
    2d6a:	70 e0       	ldi	r23, 0x00	; 0
    2d6c:	80 e3       	ldi	r24, 0x30	; 48
    2d6e:	90 e0       	ldi	r25, 0x00	; 0
    2d70:	0e 94 f3 12 	call	0x25e6	; 0x25e6 <_writeRegister>
	 _writeRegister(ILI9225_VERTICAL_SCROLL_CTRL1, 0x00DB);
    2d74:	6b ed       	ldi	r22, 0xDB	; 219
    2d76:	70 e0       	ldi	r23, 0x00	; 0
    2d78:	81 e3       	ldi	r24, 0x31	; 49
    2d7a:	90 e0       	ldi	r25, 0x00	; 0
    2d7c:	0e 94 f3 12 	call	0x25e6	; 0x25e6 <_writeRegister>
	 _writeRegister(ILI9225_VERTICAL_SCROLL_CTRL2, 0x0000);
    2d80:	60 e0       	ldi	r22, 0x00	; 0
    2d82:	70 e0       	ldi	r23, 0x00	; 0
    2d84:	82 e3       	ldi	r24, 0x32	; 50
    2d86:	90 e0       	ldi	r25, 0x00	; 0
    2d88:	0e 94 f3 12 	call	0x25e6	; 0x25e6 <_writeRegister>
	 _writeRegister(ILI9225_VERTICAL_SCROLL_CTRL3, 0x0000);
    2d8c:	60 e0       	ldi	r22, 0x00	; 0
    2d8e:	70 e0       	ldi	r23, 0x00	; 0
    2d90:	83 e3       	ldi	r24, 0x33	; 51
    2d92:	90 e0       	ldi	r25, 0x00	; 0
    2d94:	0e 94 f3 12 	call	0x25e6	; 0x25e6 <_writeRegister>
	 _writeRegister(ILI9225_PARTIAL_DRIVING_POS1, 0x00DB);
    2d98:	6b ed       	ldi	r22, 0xDB	; 219
    2d9a:	70 e0       	ldi	r23, 0x00	; 0
    2d9c:	84 e3       	ldi	r24, 0x34	; 52
    2d9e:	90 e0       	ldi	r25, 0x00	; 0
    2da0:	0e 94 f3 12 	call	0x25e6	; 0x25e6 <_writeRegister>
	 _writeRegister(ILI9225_PARTIAL_DRIVING_POS2, 0x0000);
    2da4:	60 e0       	ldi	r22, 0x00	; 0
    2da6:	70 e0       	ldi	r23, 0x00	; 0
    2da8:	85 e3       	ldi	r24, 0x35	; 53
    2daa:	90 e0       	ldi	r25, 0x00	; 0
    2dac:	0e 94 f3 12 	call	0x25e6	; 0x25e6 <_writeRegister>
	 _writeRegister(ILI9225_HORIZONTAL_WINDOW_ADDR1, 0x00AF);
    2db0:	6f ea       	ldi	r22, 0xAF	; 175
    2db2:	70 e0       	ldi	r23, 0x00	; 0
    2db4:	86 e3       	ldi	r24, 0x36	; 54
    2db6:	90 e0       	ldi	r25, 0x00	; 0
    2db8:	0e 94 f3 12 	call	0x25e6	; 0x25e6 <_writeRegister>
	 _writeRegister(ILI9225_HORIZONTAL_WINDOW_ADDR2, 0x0000);
    2dbc:	60 e0       	ldi	r22, 0x00	; 0
    2dbe:	70 e0       	ldi	r23, 0x00	; 0
    2dc0:	87 e3       	ldi	r24, 0x37	; 55
    2dc2:	90 e0       	ldi	r25, 0x00	; 0
    2dc4:	0e 94 f3 12 	call	0x25e6	; 0x25e6 <_writeRegister>
	 _writeRegister(ILI9225_VERTICAL_WINDOW_ADDR1, 0x00DB);
    2dc8:	6b ed       	ldi	r22, 0xDB	; 219
    2dca:	70 e0       	ldi	r23, 0x00	; 0
    2dcc:	88 e3       	ldi	r24, 0x38	; 56
    2dce:	90 e0       	ldi	r25, 0x00	; 0
    2dd0:	0e 94 f3 12 	call	0x25e6	; 0x25e6 <_writeRegister>
	 _writeRegister(ILI9225_VERTICAL_WINDOW_ADDR2, 0x0000);
    2dd4:	60 e0       	ldi	r22, 0x00	; 0
    2dd6:	70 e0       	ldi	r23, 0x00	; 0
    2dd8:	89 e3       	ldi	r24, 0x39	; 57
    2dda:	90 e0       	ldi	r25, 0x00	; 0
    2ddc:	0e 94 f3 12 	call	0x25e6	; 0x25e6 <_writeRegister>

	 //*** 4. Set GAMMA curve ***//
	 _writeRegister(ILI9225_GAMMA_CTRL1, 0x0000);
    2de0:	60 e0       	ldi	r22, 0x00	; 0
    2de2:	70 e0       	ldi	r23, 0x00	; 0
    2de4:	80 e5       	ldi	r24, 0x50	; 80
    2de6:	90 e0       	ldi	r25, 0x00	; 0
    2de8:	0e 94 f3 12 	call	0x25e6	; 0x25e6 <_writeRegister>
	 _writeRegister(ILI9225_GAMMA_CTRL2, 0x0808);
    2dec:	68 e0       	ldi	r22, 0x08	; 8
    2dee:	78 e0       	ldi	r23, 0x08	; 8
    2df0:	81 e5       	ldi	r24, 0x51	; 81
    2df2:	90 e0       	ldi	r25, 0x00	; 0
    2df4:	0e 94 f3 12 	call	0x25e6	; 0x25e6 <_writeRegister>
	 _writeRegister(ILI9225_GAMMA_CTRL3, 0x080A);
    2df8:	6a e0       	ldi	r22, 0x0A	; 10
    2dfa:	78 e0       	ldi	r23, 0x08	; 8
    2dfc:	82 e5       	ldi	r24, 0x52	; 82
    2dfe:	90 e0       	ldi	r25, 0x00	; 0
    2e00:	0e 94 f3 12 	call	0x25e6	; 0x25e6 <_writeRegister>
	 _writeRegister(ILI9225_GAMMA_CTRL4, 0x000A);
    2e04:	6a e0       	ldi	r22, 0x0A	; 10
    2e06:	70 e0       	ldi	r23, 0x00	; 0
    2e08:	83 e5       	ldi	r24, 0x53	; 83
    2e0a:	90 e0       	ldi	r25, 0x00	; 0
    2e0c:	0e 94 f3 12 	call	0x25e6	; 0x25e6 <_writeRegister>
	 _writeRegister(ILI9225_GAMMA_CTRL5, 0x0A08);
    2e10:	68 e0       	ldi	r22, 0x08	; 8
    2e12:	7a e0       	ldi	r23, 0x0A	; 10
    2e14:	84 e5       	ldi	r24, 0x54	; 84
    2e16:	90 e0       	ldi	r25, 0x00	; 0
    2e18:	0e 94 f3 12 	call	0x25e6	; 0x25e6 <_writeRegister>
	 _writeRegister(ILI9225_GAMMA_CTRL6, 0x0808);
    2e1c:	68 e0       	ldi	r22, 0x08	; 8
    2e1e:	78 e0       	ldi	r23, 0x08	; 8
    2e20:	85 e5       	ldi	r24, 0x55	; 85
    2e22:	90 e0       	ldi	r25, 0x00	; 0
    2e24:	0e 94 f3 12 	call	0x25e6	; 0x25e6 <_writeRegister>
	 _writeRegister(ILI9225_GAMMA_CTRL7, 0x0000);
    2e28:	60 e0       	ldi	r22, 0x00	; 0
    2e2a:	70 e0       	ldi	r23, 0x00	; 0
    2e2c:	86 e5       	ldi	r24, 0x56	; 86
    2e2e:	90 e0       	ldi	r25, 0x00	; 0
    2e30:	0e 94 f3 12 	call	0x25e6	; 0x25e6 <_writeRegister>
	 _writeRegister(ILI9225_GAMMA_CTRL8, 0x0A00);
    2e34:	60 e0       	ldi	r22, 0x00	; 0
    2e36:	7a e0       	ldi	r23, 0x0A	; 10
    2e38:	87 e5       	ldi	r24, 0x57	; 87
    2e3a:	90 e0       	ldi	r25, 0x00	; 0
    2e3c:	0e 94 f3 12 	call	0x25e6	; 0x25e6 <_writeRegister>
	 _writeRegister(ILI9225_GAMMA_CTRL9, 0x0710);
    2e40:	60 e1       	ldi	r22, 0x10	; 16
    2e42:	77 e0       	ldi	r23, 0x07	; 7
    2e44:	88 e5       	ldi	r24, 0x58	; 88
    2e46:	90 e0       	ldi	r25, 0x00	; 0
    2e48:	0e 94 f3 12 	call	0x25e6	; 0x25e6 <_writeRegister>
	 _writeRegister(ILI9225_GAMMA_CTRL10, 0x0710);
    2e4c:	60 e1       	ldi	r22, 0x10	; 16
    2e4e:	77 e0       	ldi	r23, 0x07	; 7
    2e50:	89 e5       	ldi	r24, 0x59	; 89
    2e52:	90 e0       	ldi	r25, 0x00	; 0
    2e54:	0e 94 f3 12 	call	0x25e6	; 0x25e6 <_writeRegister>
	 _writeRegister(ILI9225_DISP_CTRL1, 0x0012);
    2e58:	62 e1       	ldi	r22, 0x12	; 18
    2e5a:	70 e0       	ldi	r23, 0x00	; 0
    2e5c:	87 e0       	ldi	r24, 0x07	; 7
    2e5e:	90 e0       	ldi	r25, 0x00	; 0
    2e60:	0e 94 f3 12 	call	0x25e6	; 0x25e6 <_writeRegister>
	 _endWrite();
    2e64:	0e 94 d7 12 	call	0x25ae	; 0x25ae <_endWrite>
    2e68:	9f ef       	ldi	r25, 0xFF	; 255
    2e6a:	20 e7       	ldi	r18, 0x70	; 112
    2e6c:	82 e0       	ldi	r24, 0x02	; 2
    2e6e:	91 50       	subi	r25, 0x01	; 1
    2e70:	20 40       	sbci	r18, 0x00	; 0
    2e72:	80 40       	sbci	r24, 0x00	; 0
    2e74:	e1 f7       	brne	.-8      	; 0x2e6e <ILI9225_init+0x2cc>
    2e76:	00 c0       	rjmp	.+0      	; 0x2e78 <ILI9225_init+0x2d6>
    2e78:	00 00       	nop
	 _delay_ms(50);
	 
	 _startWrite();
    2e7a:	0e 94 d3 12 	call	0x25a6	; 0x25a6 <_startWrite>
	 _writeRegister(ILI9225_DISP_CTRL1, 0x1017);
    2e7e:	67 e1       	ldi	r22, 0x17	; 23
    2e80:	70 e1       	ldi	r23, 0x10	; 16
    2e82:	87 e0       	ldi	r24, 0x07	; 7
    2e84:	90 e0       	ldi	r25, 0x00	; 0
    2e86:	0e 94 f3 12 	call	0x25e6	; 0x25e6 <_writeRegister>
	 _endWrite();
    2e8a:	0e 94 d7 12 	call	0x25ae	; 0x25ae <_endWrite>

	 //*** 5. Initialize variables ***//
	 ILI9225_setOrientation(0);
    2e8e:	80 e0       	ldi	r24, 0x00	; 0
    2e90:	0e 94 c3 13 	call	0x2786	; 0x2786 <ILI9225_setOrientation>
	 ILI9225_setBackgroundColor(COLOR_BLACK);
    2e94:	80 e0       	ldi	r24, 0x00	; 0
    2e96:	90 e0       	ldi	r25, 0x00	; 0
    2e98:	0e 94 a2 15 	call	0x2b44	; 0x2b44 <ILI9225_setBackgroundColor>
	 ILI9225_clear();
    2e9c:	0e 94 53 14 	call	0x28a6	; 0x28a6 <ILI9225_clear>
	 
	 ILI9225_setFont(Terminal6x8, 0);
    2ea0:	60 e0       	ldi	r22, 0x00	; 0
    2ea2:	70 e0       	ldi	r23, 0x00	; 0
    2ea4:	80 e7       	ldi	r24, 0x70	; 112
    2ea6:	92 e1       	ldi	r25, 0x12	; 18
    2ea8:	0e 94 a7 15 	call	0x2b4e	; 0x2b4e <ILI9225_setFont>
    2eac:	08 95       	ret

00002eae <drawChar>:

	if (myFont.height % 8) myFont.nbrows++;  // Set number of bytes used by height of font in multiples of 8
}


uint16_t drawChar(uint16_t x, uint16_t y, uint16_t ch, uint16_t color) {
    2eae:	2f 92       	push	r2
    2eb0:	3f 92       	push	r3
    2eb2:	4f 92       	push	r4
    2eb4:	5f 92       	push	r5
    2eb6:	6f 92       	push	r6
    2eb8:	7f 92       	push	r7
    2eba:	8f 92       	push	r8
    2ebc:	9f 92       	push	r9
    2ebe:	af 92       	push	r10
    2ec0:	bf 92       	push	r11
    2ec2:	cf 92       	push	r12
    2ec4:	df 92       	push	r13
    2ec6:	ef 92       	push	r14
    2ec8:	ff 92       	push	r15
    2eca:	0f 93       	push	r16
    2ecc:	1f 93       	push	r17
    2ece:	cf 93       	push	r28
    2ed0:	df 93       	push	r29
    2ed2:	5c 01       	movw	r10, r24
    2ed4:	6b 01       	movw	r12, r22
    2ed6:	42 2e       	mov	r4, r18
    2ed8:	33 2e       	mov	r3, r19
	uint8_t charData, charWidth;
	uint8_t h, i, j;
	uint16_t charOffset;
	int fastMode;

	charOffset = (myFont.width * myFont.nbrows) + 1;  // bytes used by each character
    2eda:	ee ea       	ldi	r30, 0xAE	; 174
    2edc:	f2 e0       	ldi	r31, 0x02	; 2
    2ede:	22 80       	ldd	r2, Z+2	; 0x02
    2ee0:	86 81       	ldd	r24, Z+6	; 0x06
    2ee2:	28 9e       	mul	r2, r24
    2ee4:	c0 01       	movw	r24, r0
    2ee6:	11 24       	eor	r1, r1
    2ee8:	01 96       	adiw	r24, 0x01	; 1
	charOffset = (charOffset * (ch - myFont.offset)) + FONT_HEADER_SIZE;  // char offset (add 4 for font header)
    2eea:	24 81       	ldd	r18, Z+4	; 0x04
    2eec:	42 1b       	sub	r20, r18
    2eee:	51 09       	sbc	r21, r1
    2ef0:	84 9f       	mul	r24, r20
    2ef2:	70 01       	movw	r14, r0
    2ef4:	85 9f       	mul	r24, r21
    2ef6:	f0 0c       	add	r15, r0
    2ef8:	94 9f       	mul	r25, r20
    2efa:	f0 0c       	add	r15, r0
    2efc:	11 24       	eor	r1, r1
    2efe:	c7 01       	movw	r24, r14
    2f00:	04 96       	adiw	r24, 0x04	; 4
	if ( myFont.monoSp ) charWidth = myFont.width;      // monospaced: get char width from font
    2f02:	27 81       	ldd	r18, Z+7	; 0x07
    2f04:	21 11       	cpse	r18, r1
    2f06:	07 c0       	rjmp	.+14     	; 0x2f16 <drawChar+0x68>
	else                charWidth  = readFontByte(charOffset);  // get chracter width from 1st byte
    2f08:	e0 91 ae 02 	lds	r30, 0x02AE	; 0x8002ae <myFont>
    2f0c:	f0 91 af 02 	lds	r31, 0x02AF	; 0x8002af <myFont+0x1>
    2f10:	e8 0f       	add	r30, r24
    2f12:	f9 1f       	adc	r31, r25
    2f14:	24 90       	lpm	r2, Z
	charOffset++;  // increment pointer to first character data byte
    2f16:	25 e0       	ldi	r18, 0x05	; 5
    2f18:	e2 0e       	add	r14, r18
    2f1a:	f1 1c       	adc	r15, r1

	_startWrite();
    2f1c:	0e 94 d3 12 	call	0x25a6	; 0x25a6 <_startWrite>
	
	// use autoincrement/decrement feature, if character fits completely on screen
	fastMode = ( (x+charWidth+1) < _maxX && (y+myFont.height-1) < _maxY );
    2f20:	82 2c       	mov	r8, r2
    2f22:	91 2c       	mov	r9, r1
    2f24:	a4 01       	movw	r20, r8
    2f26:	4a 0d       	add	r20, r10
    2f28:	5b 1d       	adc	r21, r11
    2f2a:	4f 5f       	subi	r20, 0xFF	; 255
    2f2c:	5f 4f       	sbci	r21, 0xFF	; 255
    2f2e:	80 91 b9 02 	lds	r24, 0x02B9	; 0x8002b9 <_maxX>
    2f32:	90 91 ba 02 	lds	r25, 0x02BA	; 0x8002ba <_maxX+0x1>
    2f36:	48 17       	cp	r20, r24
    2f38:	59 07       	cpc	r21, r25
    2f3a:	88 f4       	brcc	.+34     	; 0x2f5e <drawChar+0xb0>
    2f3c:	80 91 b1 02 	lds	r24, 0x02B1	; 0x8002b1 <myFont+0x3>
    2f40:	96 01       	movw	r18, r12
    2f42:	28 0f       	add	r18, r24
    2f44:	31 1d       	adc	r19, r1
    2f46:	c9 01       	movw	r24, r18
    2f48:	01 97       	sbiw	r24, 0x01	; 1
    2f4a:	20 91 bb 02 	lds	r18, 0x02BB	; 0x8002bb <_maxY>
    2f4e:	30 91 bc 02 	lds	r19, 0x02BC	; 0x8002bc <_maxY+0x1>
    2f52:	82 17       	cp	r24, r18
    2f54:	93 07       	cpc	r25, r19
    2f56:	30 f0       	brcs	.+12     	; 0x2f64 <drawChar+0xb6>
    2f58:	00 e0       	ldi	r16, 0x00	; 0
    2f5a:	10 e0       	ldi	r17, 0x00	; 0
    2f5c:	05 c0       	rjmp	.+10     	; 0x2f68 <drawChar+0xba>
    2f5e:	00 e0       	ldi	r16, 0x00	; 0
    2f60:	10 e0       	ldi	r17, 0x00	; 0
    2f62:	02 c0       	rjmp	.+4      	; 0x2f68 <drawChar+0xba>
    2f64:	01 e0       	ldi	r16, 0x01	; 1
    2f66:	10 e0       	ldi	r17, 0x00	; 0
	
	if ( fastMode ) ILI9225_setWindow( x,y,x+charWidth+1, y+myFont.height-1 );  // set character Window
    2f68:	01 15       	cp	r16, r1
    2f6a:	11 05       	cpc	r17, r1
    2f6c:	59 f0       	breq	.+22     	; 0x2f84 <drawChar+0xd6>
    2f6e:	80 91 b1 02 	lds	r24, 0x02B1	; 0x8002b1 <myFont+0x3>
    2f72:	96 01       	movw	r18, r12
    2f74:	28 0f       	add	r18, r24
    2f76:	31 1d       	adc	r19, r1
    2f78:	21 50       	subi	r18, 0x01	; 1
    2f7a:	31 09       	sbc	r19, r1
    2f7c:	b6 01       	movw	r22, r12
    2f7e:	c5 01       	movw	r24, r10
    2f80:	0e 94 4c 13 	call	0x2698	; 0x2698 <ILI9225_setWindow>
    2f84:	51 2c       	mov	r5, r1
    2f86:	63 c0       	rjmp	.+198    	; 0x304e <drawChar+0x1a0>

	for (i = 0; i <= charWidth; i++) {  // each font "column" (+1 blank column for spacing)
		h = 0;  // keep track of char height
		for (j = 0; j < myFont.nbrows; j++)     {  // each column byte
			if (i == charWidth) charData = (uint8_t)0x0; // Insert blank column
    2f88:	25 14       	cp	r2, r5
    2f8a:	41 f0       	breq	.+16     	; 0x2f9c <drawChar+0xee>
			else                charData = readFontByte(charOffset);
    2f8c:	e0 91 ae 02 	lds	r30, 0x02AE	; 0x8002ae <myFont>
    2f90:	f0 91 af 02 	lds	r31, 0x02AF	; 0x8002af <myFont+0x1>
    2f94:	ee 0d       	add	r30, r14
    2f96:	ff 1d       	adc	r31, r15
    2f98:	74 90       	lpm	r7, Z
    2f9a:	01 c0       	rjmp	.+2      	; 0x2f9e <drawChar+0xf0>
	if ( fastMode ) ILI9225_setWindow( x,y,x+charWidth+1, y+myFont.height-1 );  // set character Window

	for (i = 0; i <= charWidth; i++) {  // each font "column" (+1 blank column for spacing)
		h = 0;  // keep track of char height
		for (j = 0; j < myFont.nbrows; j++)     {  // each column byte
			if (i == charWidth) charData = (uint8_t)0x0; // Insert blank column
    2f9c:	71 2c       	mov	r7, r1
			else                charData = readFontByte(charOffset);
			charOffset++;
    2f9e:	3f ef       	ldi	r19, 0xFF	; 255
    2fa0:	e3 1a       	sub	r14, r19
    2fa2:	f3 0a       	sbc	r15, r19
			
			// Process every row in font character
			for (uint8_t k = 0; k < 8; k++) {
    2fa4:	c0 e0       	ldi	r28, 0x00	; 0
    2fa6:	46 c0       	rjmp	.+140    	; 0x3034 <drawChar+0x186>
				if (h >= myFont.height ) break;  // No need to process excess bits
    2fa8:	80 91 b1 02 	lds	r24, 0x02B1	; 0x8002b1 <myFont+0x3>
    2fac:	d8 17       	cp	r29, r24
    2fae:	08 f0       	brcs	.+2      	; 0x2fb2 <drawChar+0x104>
    2fb0:	44 c0       	rjmp	.+136    	; 0x303a <drawChar+0x18c>
				if (fastMode ) _writeData16((charData & (1 << (k-1)))?color:_bgColor );
    2fb2:	01 15       	cp	r16, r1
    2fb4:	11 05       	cpc	r17, r1
    2fb6:	b9 f0       	breq	.+46     	; 0x2fe6 <drawChar+0x138>
    2fb8:	2c 2f       	mov	r18, r28
    2fba:	30 e0       	ldi	r19, 0x00	; 0
    2fbc:	21 50       	subi	r18, 0x01	; 1
    2fbe:	31 09       	sbc	r19, r1
    2fc0:	87 2d       	mov	r24, r7
    2fc2:	90 e0       	ldi	r25, 0x00	; 0
    2fc4:	02 c0       	rjmp	.+4      	; 0x2fca <drawChar+0x11c>
    2fc6:	95 95       	asr	r25
    2fc8:	87 95       	ror	r24
    2fca:	2a 95       	dec	r18
    2fcc:	e2 f7       	brpl	.-8      	; 0x2fc6 <drawChar+0x118>
    2fce:	80 fd       	sbrc	r24, 0
    2fd0:	05 c0       	rjmp	.+10     	; 0x2fdc <drawChar+0x12e>
    2fd2:	80 91 b7 02 	lds	r24, 0x02B7	; 0x8002b7 <_bgColor>
    2fd6:	90 91 b8 02 	lds	r25, 0x02B8	; 0x8002b8 <_bgColor+0x1>
    2fda:	02 c0       	rjmp	.+4      	; 0x2fe0 <drawChar+0x132>
    2fdc:	84 2d       	mov	r24, r4
    2fde:	93 2d       	mov	r25, r3
    2fe0:	0e 94 e7 12 	call	0x25ce	; 0x25ce <_writeData16>
    2fe4:	25 c0       	rjmp	.+74     	; 0x3030 <drawChar+0x182>
				else ILI9225_drawPixel( x + i, y + (j * 8) + k, (charData & (1 << (k-1)))?color:_bgColor );
    2fe6:	2c 2f       	mov	r18, r28
    2fe8:	30 e0       	ldi	r19, 0x00	; 0
    2fea:	21 50       	subi	r18, 0x01	; 1
    2fec:	31 09       	sbc	r19, r1
    2fee:	87 2d       	mov	r24, r7
    2ff0:	90 e0       	ldi	r25, 0x00	; 0
    2ff2:	02 c0       	rjmp	.+4      	; 0x2ff8 <drawChar+0x14a>
    2ff4:	95 95       	asr	r25
    2ff6:	87 95       	ror	r24
    2ff8:	2a 95       	dec	r18
    2ffa:	e2 f7       	brpl	.-8      	; 0x2ff4 <drawChar+0x146>
    2ffc:	80 fd       	sbrc	r24, 0
    2ffe:	05 c0       	rjmp	.+10     	; 0x300a <drawChar+0x15c>
    3000:	40 91 b7 02 	lds	r20, 0x02B7	; 0x8002b7 <_bgColor>
    3004:	50 91 b8 02 	lds	r21, 0x02B8	; 0x8002b8 <_bgColor+0x1>
    3008:	02 c0       	rjmp	.+4      	; 0x300e <drawChar+0x160>
    300a:	44 2d       	mov	r20, r4
    300c:	53 2d       	mov	r21, r3
    300e:	66 2d       	mov	r22, r6
    3010:	70 e0       	ldi	r23, 0x00	; 0
    3012:	66 0f       	add	r22, r22
    3014:	77 1f       	adc	r23, r23
    3016:	66 0f       	add	r22, r22
    3018:	77 1f       	adc	r23, r23
    301a:	66 0f       	add	r22, r22
    301c:	77 1f       	adc	r23, r23
    301e:	6c 0d       	add	r22, r12
    3020:	7d 1d       	adc	r23, r13
    3022:	6c 0f       	add	r22, r28
    3024:	71 1d       	adc	r23, r1
    3026:	c5 01       	movw	r24, r10
    3028:	85 0d       	add	r24, r5
    302a:	91 1d       	adc	r25, r1
    302c:	0e 94 7c 14 	call	0x28f8	; 0x28f8 <ILI9225_drawPixel>
				h++;
    3030:	df 5f       	subi	r29, 0xFF	; 255
			if (i == charWidth) charData = (uint8_t)0x0; // Insert blank column
			else                charData = readFontByte(charOffset);
			charOffset++;
			
			// Process every row in font character
			for (uint8_t k = 0; k < 8; k++) {
    3032:	cf 5f       	subi	r28, 0xFF	; 255
    3034:	c8 30       	cpi	r28, 0x08	; 8
    3036:	08 f4       	brcc	.+2      	; 0x303a <drawChar+0x18c>
    3038:	b7 cf       	rjmp	.-146    	; 0x2fa8 <drawChar+0xfa>
	
	if ( fastMode ) ILI9225_setWindow( x,y,x+charWidth+1, y+myFont.height-1 );  // set character Window

	for (i = 0; i <= charWidth; i++) {  // each font "column" (+1 blank column for spacing)
		h = 0;  // keep track of char height
		for (j = 0; j < myFont.nbrows; j++)     {  // each column byte
    303a:	63 94       	inc	r6
    303c:	02 c0       	rjmp	.+4      	; 0x3042 <drawChar+0x194>
    303e:	61 2c       	mov	r6, r1
    3040:	d0 e0       	ldi	r29, 0x00	; 0
    3042:	80 91 b4 02 	lds	r24, 0x02B4	; 0x8002b4 <myFont+0x6>
    3046:	68 16       	cp	r6, r24
    3048:	08 f4       	brcc	.+2      	; 0x304c <drawChar+0x19e>
    304a:	9e cf       	rjmp	.-196    	; 0x2f88 <drawChar+0xda>
	// use autoincrement/decrement feature, if character fits completely on screen
	fastMode = ( (x+charWidth+1) < _maxX && (y+myFont.height-1) < _maxY );
	
	if ( fastMode ) ILI9225_setWindow( x,y,x+charWidth+1, y+myFont.height-1 );  // set character Window

	for (i = 0; i <= charWidth; i++) {  // each font "column" (+1 blank column for spacing)
    304c:	53 94       	inc	r5
    304e:	25 14       	cp	r2, r5
    3050:	b0 f7       	brcc	.-20     	; 0x303e <drawChar+0x190>
				else ILI9225_drawPixel( x + i, y + (j * 8) + k, (charData & (1 << (k-1)))?color:_bgColor );
				h++;
			}
		}
	}
	_endWrite();
    3052:	0e 94 d7 12 	call	0x25ae	; 0x25ae <_endWrite>
	ILI9225_resetWindow();
    3056:	0e 94 02 14 	call	0x2804	; 0x2804 <ILI9225_resetWindow>
	return charWidth;
}
    305a:	c4 01       	movw	r24, r8
    305c:	df 91       	pop	r29
    305e:	cf 91       	pop	r28
    3060:	1f 91       	pop	r17
    3062:	0f 91       	pop	r16
    3064:	ff 90       	pop	r15
    3066:	ef 90       	pop	r14
    3068:	df 90       	pop	r13
    306a:	cf 90       	pop	r12
    306c:	bf 90       	pop	r11
    306e:	af 90       	pop	r10
    3070:	9f 90       	pop	r9
    3072:	8f 90       	pop	r8
    3074:	7f 90       	pop	r7
    3076:	6f 90       	pop	r6
    3078:	5f 90       	pop	r5
    307a:	4f 90       	pop	r4
    307c:	3f 90       	pop	r3
    307e:	2f 90       	pop	r2
    3080:	08 95       	ret

00003082 <ILI9225_drawText>:


uint16_t ILI9225_drawText(uint16_t x, uint16_t y, char* s, int length, uint16_t color) {
    3082:	8f 92       	push	r8
    3084:	9f 92       	push	r9
    3086:	af 92       	push	r10
    3088:	bf 92       	push	r11
    308a:	cf 92       	push	r12
    308c:	df 92       	push	r13
    308e:	ef 92       	push	r14
    3090:	ff 92       	push	r15
    3092:	0f 93       	push	r16
    3094:	1f 93       	push	r17
    3096:	cf 93       	push	r28
    3098:	7c 01       	movw	r14, r24
    309a:	4b 01       	movw	r8, r22
    309c:	5a 01       	movw	r10, r20
    309e:	69 01       	movw	r12, r18

	uint16_t currx = x;
	
	for (uint8_t k = 0; k < length; k++) {
    30a0:	c0 e0       	ldi	r28, 0x00	; 0
    30a2:	0e c0       	rjmp	.+28     	; 0x30c0 <ILI9225_drawText+0x3e>
		currx += drawChar(currx, y, s[k], color) + 1;
    30a4:	f5 01       	movw	r30, r10
    30a6:	ec 0f       	add	r30, r28
    30a8:	f1 1d       	adc	r31, r1
    30aa:	40 81       	ld	r20, Z
    30ac:	50 e0       	ldi	r21, 0x00	; 0
    30ae:	98 01       	movw	r18, r16
    30b0:	b4 01       	movw	r22, r8
    30b2:	c7 01       	movw	r24, r14
    30b4:	0e 94 57 17 	call	0x2eae	; 0x2eae <drawChar>
    30b8:	01 96       	adiw	r24, 0x01	; 1
    30ba:	e8 0e       	add	r14, r24
    30bc:	f9 1e       	adc	r15, r25

uint16_t ILI9225_drawText(uint16_t x, uint16_t y, char* s, int length, uint16_t color) {

	uint16_t currx = x;
	
	for (uint8_t k = 0; k < length; k++) {
    30be:	cf 5f       	subi	r28, 0xFF	; 255
    30c0:	8c 2f       	mov	r24, r28
    30c2:	90 e0       	ldi	r25, 0x00	; 0
    30c4:	8c 15       	cp	r24, r12
    30c6:	9d 05       	cpc	r25, r13
    30c8:	6c f3       	brlt	.-38     	; 0x30a4 <ILI9225_drawText+0x22>
		currx += drawChar(currx, y, s[k], color) + 1;
	}
	
	return currx;
}
    30ca:	c7 01       	movw	r24, r14
    30cc:	cf 91       	pop	r28
    30ce:	1f 91       	pop	r17
    30d0:	0f 91       	pop	r16
    30d2:	ff 90       	pop	r15
    30d4:	ef 90       	pop	r14
    30d6:	df 90       	pop	r13
    30d8:	cf 90       	pop	r12
    30da:	bf 90       	pop	r11
    30dc:	af 90       	pop	r10
    30de:	9f 90       	pop	r9
    30e0:	8f 90       	pop	r8
    30e2:	08 95       	ret

000030e4 <main>:
	s[len+1] = '\0';
}

int main(void)
{
	CLKPR = (1 << CLKPCE);
    30e4:	e1 e6       	ldi	r30, 0x61	; 97
    30e6:	f0 e0       	ldi	r31, 0x00	; 0
    30e8:	80 e8       	ldi	r24, 0x80	; 128
    30ea:	80 83       	st	Z, r24
	CLKPR = 0;
    30ec:	10 82       	st	Z, r1
	
	usart_init();
    30ee:	0e 94 ac 18 	call	0x3158	; 0x3158 <usart_init>
	
	eeprom_init();
    30f2:	0e 94 ff 0a 	call	0x15fe	; 0x15fe <eeprom_init>
	
	ILI9225_init();
    30f6:	0e 94 d1 15 	call	0x2ba2	; 0x2ba2 <ILI9225_init>
	
	keypad_init();
    30fa:	0e 94 b9 11 	call	0x2372	; 0x2372 <keypad_init>
	
	while (1) {
		game_init();	
    30fe:	0e 94 84 0f 	call	0x1f08	; 0x1f08 <game_init>
		game_handle();
    3102:	0e 94 a9 11 	call	0x2352	; 0x2352 <game_handle>
    3106:	fb cf       	rjmp	.-10     	; 0x30fe <main+0x1a>

00003108 <serial_tx_char>:

void serial_print(char* str)
{
	for (uint8_t j = 0; j < (strlen(str) + 1); j++)
		serial_tx_char(str[j]);
}
    3108:	90 91 c0 00 	lds	r25, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7f80c0>
    310c:	95 ff       	sbrs	r25, 5
    310e:	fc cf       	rjmp	.-8      	; 0x3108 <serial_tx_char>
    3110:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7f80c6>
    3114:	08 95       	ret

00003116 <serial_println>:

void serial_println(char* str)
{
    3116:	1f 93       	push	r17
    3118:	cf 93       	push	r28
    311a:	df 93       	push	r29
    311c:	ec 01       	movw	r28, r24
	for (uint8_t j = 0; j < (strlen(str) + 1); j++)
    311e:	10 e0       	ldi	r17, 0x00	; 0
    3120:	07 c0       	rjmp	.+14     	; 0x3130 <serial_println+0x1a>
		serial_tx_char(str[j]);
    3122:	fe 01       	movw	r30, r28
    3124:	e8 0f       	add	r30, r24
    3126:	f9 1f       	adc	r31, r25
    3128:	80 81       	ld	r24, Z
    312a:	0e 94 84 18 	call	0x3108	; 0x3108 <serial_tx_char>
		serial_tx_char(str[j]);
}

void serial_println(char* str)
{
	for (uint8_t j = 0; j < (strlen(str) + 1); j++)
    312e:	1f 5f       	subi	r17, 0xFF	; 255
    3130:	81 2f       	mov	r24, r17
    3132:	90 e0       	ldi	r25, 0x00	; 0
    3134:	fe 01       	movw	r30, r28
    3136:	01 90       	ld	r0, Z+
    3138:	00 20       	and	r0, r0
    313a:	e9 f7       	brne	.-6      	; 0x3136 <serial_println+0x20>
    313c:	31 97       	sbiw	r30, 0x01	; 1
    313e:	ec 1b       	sub	r30, r28
    3140:	fd 0b       	sbc	r31, r29
    3142:	31 96       	adiw	r30, 0x01	; 1
    3144:	8e 17       	cp	r24, r30
    3146:	9f 07       	cpc	r25, r31
    3148:	60 f3       	brcs	.-40     	; 0x3122 <serial_println+0xc>
		serial_tx_char(str[j]);
	serial_tx_char(13);
    314a:	8d e0       	ldi	r24, 0x0D	; 13
    314c:	0e 94 84 18 	call	0x3108	; 0x3108 <serial_tx_char>
}
    3150:	df 91       	pop	r29
    3152:	cf 91       	pop	r28
    3154:	1f 91       	pop	r17
    3156:	08 95       	ret

00003158 <usart_init>:
#define BAUD_PRESCALER (((F_CPU / (USART_BAUDRATE * 16UL))) - 1)

void usart_init(void)
{
	// Set Baud Rate
	UBRR0H = BAUD_PRESCALER >> 8;
    3158:	10 92 c5 00 	sts	0x00C5, r1	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7f80c5>
	UBRR0L = BAUD_PRESCALER;
    315c:	87 e6       	ldi	r24, 0x67	; 103
    315e:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7f80c4>
	
	// Set Frame Format
	UCSR0C = ASYNCHRONOUS | PARITY_MODE | STOP_BIT | DATA_BIT;
    3162:	86 e0       	ldi	r24, 0x06	; 6
    3164:	80 93 c2 00 	sts	0x00C2, r24	; 0x8000c2 <__TEXT_REGION_LENGTH__+0x7f80c2>
	
	// Enable Receiver and Transmitter
	UCSR0B = (1<<RXEN0) | (1<<TXEN0);
    3168:	88 e1       	ldi	r24, 0x18	; 24
    316a:	80 93 c1 00 	sts	0x00C1, r24	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7f80c1>
	
	serial_println("Serial begin at Baudrate 9600.");
    316e:	8f e6       	ldi	r24, 0x6F	; 111
    3170:	92 e0       	ldi	r25, 0x02	; 2
    3172:	0e 94 8b 18 	call	0x3116	; 0x3116 <serial_println>
    3176:	08 95       	ret

00003178 <__udivmodhi4>:
    3178:	aa 1b       	sub	r26, r26
    317a:	bb 1b       	sub	r27, r27
    317c:	51 e1       	ldi	r21, 0x11	; 17
    317e:	07 c0       	rjmp	.+14     	; 0x318e <__udivmodhi4_ep>

00003180 <__udivmodhi4_loop>:
    3180:	aa 1f       	adc	r26, r26
    3182:	bb 1f       	adc	r27, r27
    3184:	a6 17       	cp	r26, r22
    3186:	b7 07       	cpc	r27, r23
    3188:	10 f0       	brcs	.+4      	; 0x318e <__udivmodhi4_ep>
    318a:	a6 1b       	sub	r26, r22
    318c:	b7 0b       	sbc	r27, r23

0000318e <__udivmodhi4_ep>:
    318e:	88 1f       	adc	r24, r24
    3190:	99 1f       	adc	r25, r25
    3192:	5a 95       	dec	r21
    3194:	a9 f7       	brne	.-22     	; 0x3180 <__udivmodhi4_loop>
    3196:	80 95       	com	r24
    3198:	90 95       	com	r25
    319a:	bc 01       	movw	r22, r24
    319c:	cd 01       	movw	r24, r26
    319e:	08 95       	ret

000031a0 <__divmodhi4>:
    31a0:	97 fb       	bst	r25, 7
    31a2:	07 2e       	mov	r0, r23
    31a4:	16 f4       	brtc	.+4      	; 0x31aa <__divmodhi4+0xa>
    31a6:	00 94       	com	r0
    31a8:	07 d0       	rcall	.+14     	; 0x31b8 <__divmodhi4_neg1>
    31aa:	77 fd       	sbrc	r23, 7
    31ac:	09 d0       	rcall	.+18     	; 0x31c0 <__divmodhi4_neg2>
    31ae:	0e 94 bc 18 	call	0x3178	; 0x3178 <__udivmodhi4>
    31b2:	07 fc       	sbrc	r0, 7
    31b4:	05 d0       	rcall	.+10     	; 0x31c0 <__divmodhi4_neg2>
    31b6:	3e f4       	brtc	.+14     	; 0x31c6 <__divmodhi4_exit>

000031b8 <__divmodhi4_neg1>:
    31b8:	90 95       	com	r25
    31ba:	81 95       	neg	r24
    31bc:	9f 4f       	sbci	r25, 0xFF	; 255
    31be:	08 95       	ret

000031c0 <__divmodhi4_neg2>:
    31c0:	70 95       	com	r23
    31c2:	61 95       	neg	r22
    31c4:	7f 4f       	sbci	r23, 0xFF	; 255

000031c6 <__divmodhi4_exit>:
    31c6:	08 95       	ret

000031c8 <do_rand>:
    31c8:	8f 92       	push	r8
    31ca:	9f 92       	push	r9
    31cc:	af 92       	push	r10
    31ce:	bf 92       	push	r11
    31d0:	cf 92       	push	r12
    31d2:	df 92       	push	r13
    31d4:	ef 92       	push	r14
    31d6:	ff 92       	push	r15
    31d8:	cf 93       	push	r28
    31da:	df 93       	push	r29
    31dc:	ec 01       	movw	r28, r24
    31de:	68 81       	ld	r22, Y
    31e0:	79 81       	ldd	r23, Y+1	; 0x01
    31e2:	8a 81       	ldd	r24, Y+2	; 0x02
    31e4:	9b 81       	ldd	r25, Y+3	; 0x03
    31e6:	61 15       	cp	r22, r1
    31e8:	71 05       	cpc	r23, r1
    31ea:	81 05       	cpc	r24, r1
    31ec:	91 05       	cpc	r25, r1
    31ee:	21 f4       	brne	.+8      	; 0x31f8 <do_rand+0x30>
    31f0:	64 e2       	ldi	r22, 0x24	; 36
    31f2:	79 ed       	ldi	r23, 0xD9	; 217
    31f4:	8b e5       	ldi	r24, 0x5B	; 91
    31f6:	97 e0       	ldi	r25, 0x07	; 7
    31f8:	2d e1       	ldi	r18, 0x1D	; 29
    31fa:	33 ef       	ldi	r19, 0xF3	; 243
    31fc:	41 e0       	ldi	r20, 0x01	; 1
    31fe:	50 e0       	ldi	r21, 0x00	; 0
    3200:	0e 94 40 19 	call	0x3280	; 0x3280 <__divmodsi4>
    3204:	49 01       	movw	r8, r18
    3206:	5a 01       	movw	r10, r20
    3208:	9b 01       	movw	r18, r22
    320a:	ac 01       	movw	r20, r24
    320c:	a7 ea       	ldi	r26, 0xA7	; 167
    320e:	b1 e4       	ldi	r27, 0x41	; 65
    3210:	0e 94 5f 19 	call	0x32be	; 0x32be <__muluhisi3>
    3214:	6b 01       	movw	r12, r22
    3216:	7c 01       	movw	r14, r24
    3218:	ac ee       	ldi	r26, 0xEC	; 236
    321a:	b4 ef       	ldi	r27, 0xF4	; 244
    321c:	a5 01       	movw	r20, r10
    321e:	94 01       	movw	r18, r8
    3220:	0e 94 6d 19 	call	0x32da	; 0x32da <__mulohisi3>
    3224:	dc 01       	movw	r26, r24
    3226:	cb 01       	movw	r24, r22
    3228:	8c 0d       	add	r24, r12
    322a:	9d 1d       	adc	r25, r13
    322c:	ae 1d       	adc	r26, r14
    322e:	bf 1d       	adc	r27, r15
    3230:	b7 ff       	sbrs	r27, 7
    3232:	03 c0       	rjmp	.+6      	; 0x323a <do_rand+0x72>
    3234:	01 97       	sbiw	r24, 0x01	; 1
    3236:	a1 09       	sbc	r26, r1
    3238:	b0 48       	sbci	r27, 0x80	; 128
    323a:	88 83       	st	Y, r24
    323c:	99 83       	std	Y+1, r25	; 0x01
    323e:	aa 83       	std	Y+2, r26	; 0x02
    3240:	bb 83       	std	Y+3, r27	; 0x03
    3242:	9f 77       	andi	r25, 0x7F	; 127
    3244:	df 91       	pop	r29
    3246:	cf 91       	pop	r28
    3248:	ff 90       	pop	r15
    324a:	ef 90       	pop	r14
    324c:	df 90       	pop	r13
    324e:	cf 90       	pop	r12
    3250:	bf 90       	pop	r11
    3252:	af 90       	pop	r10
    3254:	9f 90       	pop	r9
    3256:	8f 90       	pop	r8
    3258:	08 95       	ret

0000325a <rand_r>:
    325a:	0e 94 e4 18 	call	0x31c8	; 0x31c8 <do_rand>
    325e:	08 95       	ret

00003260 <rand>:
    3260:	80 e0       	ldi	r24, 0x00	; 0
    3262:	91 e0       	ldi	r25, 0x01	; 1
    3264:	0e 94 e4 18 	call	0x31c8	; 0x31c8 <do_rand>
    3268:	08 95       	ret

0000326a <srand>:
    326a:	a0 e0       	ldi	r26, 0x00	; 0
    326c:	b0 e0       	ldi	r27, 0x00	; 0
    326e:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__DATA_REGION_ORIGIN__>
    3272:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
    3276:	a0 93 02 01 	sts	0x0102, r26	; 0x800102 <__DATA_REGION_ORIGIN__+0x2>
    327a:	b0 93 03 01 	sts	0x0103, r27	; 0x800103 <__DATA_REGION_ORIGIN__+0x3>
    327e:	08 95       	ret

00003280 <__divmodsi4>:
    3280:	05 2e       	mov	r0, r21
    3282:	97 fb       	bst	r25, 7
    3284:	1e f4       	brtc	.+6      	; 0x328c <__divmodsi4+0xc>
    3286:	00 94       	com	r0
    3288:	0e 94 57 19 	call	0x32ae	; 0x32ae <__negsi2>
    328c:	57 fd       	sbrc	r21, 7
    328e:	07 d0       	rcall	.+14     	; 0x329e <__divmodsi4_neg2>
    3290:	0e 94 72 19 	call	0x32e4	; 0x32e4 <__udivmodsi4>
    3294:	07 fc       	sbrc	r0, 7
    3296:	03 d0       	rcall	.+6      	; 0x329e <__divmodsi4_neg2>
    3298:	4e f4       	brtc	.+18     	; 0x32ac <__divmodsi4_exit>
    329a:	0c 94 57 19 	jmp	0x32ae	; 0x32ae <__negsi2>

0000329e <__divmodsi4_neg2>:
    329e:	50 95       	com	r21
    32a0:	40 95       	com	r20
    32a2:	30 95       	com	r19
    32a4:	21 95       	neg	r18
    32a6:	3f 4f       	sbci	r19, 0xFF	; 255
    32a8:	4f 4f       	sbci	r20, 0xFF	; 255
    32aa:	5f 4f       	sbci	r21, 0xFF	; 255

000032ac <__divmodsi4_exit>:
    32ac:	08 95       	ret

000032ae <__negsi2>:
    32ae:	90 95       	com	r25
    32b0:	80 95       	com	r24
    32b2:	70 95       	com	r23
    32b4:	61 95       	neg	r22
    32b6:	7f 4f       	sbci	r23, 0xFF	; 255
    32b8:	8f 4f       	sbci	r24, 0xFF	; 255
    32ba:	9f 4f       	sbci	r25, 0xFF	; 255
    32bc:	08 95       	ret

000032be <__muluhisi3>:
    32be:	0e 94 94 19 	call	0x3328	; 0x3328 <__umulhisi3>
    32c2:	a5 9f       	mul	r26, r21
    32c4:	90 0d       	add	r25, r0
    32c6:	b4 9f       	mul	r27, r20
    32c8:	90 0d       	add	r25, r0
    32ca:	a4 9f       	mul	r26, r20
    32cc:	80 0d       	add	r24, r0
    32ce:	91 1d       	adc	r25, r1
    32d0:	11 24       	eor	r1, r1
    32d2:	08 95       	ret

000032d4 <__mulshisi3>:
    32d4:	b7 ff       	sbrs	r27, 7
    32d6:	0c 94 5f 19 	jmp	0x32be	; 0x32be <__muluhisi3>

000032da <__mulohisi3>:
    32da:	0e 94 5f 19 	call	0x32be	; 0x32be <__muluhisi3>
    32de:	82 1b       	sub	r24, r18
    32e0:	93 0b       	sbc	r25, r19
    32e2:	08 95       	ret

000032e4 <__udivmodsi4>:
    32e4:	a1 e2       	ldi	r26, 0x21	; 33
    32e6:	1a 2e       	mov	r1, r26
    32e8:	aa 1b       	sub	r26, r26
    32ea:	bb 1b       	sub	r27, r27
    32ec:	fd 01       	movw	r30, r26
    32ee:	0d c0       	rjmp	.+26     	; 0x330a <__udivmodsi4_ep>

000032f0 <__udivmodsi4_loop>:
    32f0:	aa 1f       	adc	r26, r26
    32f2:	bb 1f       	adc	r27, r27
    32f4:	ee 1f       	adc	r30, r30
    32f6:	ff 1f       	adc	r31, r31
    32f8:	a2 17       	cp	r26, r18
    32fa:	b3 07       	cpc	r27, r19
    32fc:	e4 07       	cpc	r30, r20
    32fe:	f5 07       	cpc	r31, r21
    3300:	20 f0       	brcs	.+8      	; 0x330a <__udivmodsi4_ep>
    3302:	a2 1b       	sub	r26, r18
    3304:	b3 0b       	sbc	r27, r19
    3306:	e4 0b       	sbc	r30, r20
    3308:	f5 0b       	sbc	r31, r21

0000330a <__udivmodsi4_ep>:
    330a:	66 1f       	adc	r22, r22
    330c:	77 1f       	adc	r23, r23
    330e:	88 1f       	adc	r24, r24
    3310:	99 1f       	adc	r25, r25
    3312:	1a 94       	dec	r1
    3314:	69 f7       	brne	.-38     	; 0x32f0 <__udivmodsi4_loop>
    3316:	60 95       	com	r22
    3318:	70 95       	com	r23
    331a:	80 95       	com	r24
    331c:	90 95       	com	r25
    331e:	9b 01       	movw	r18, r22
    3320:	ac 01       	movw	r20, r24
    3322:	bd 01       	movw	r22, r26
    3324:	cf 01       	movw	r24, r30
    3326:	08 95       	ret

00003328 <__umulhisi3>:
    3328:	a2 9f       	mul	r26, r18
    332a:	b0 01       	movw	r22, r0
    332c:	b3 9f       	mul	r27, r19
    332e:	c0 01       	movw	r24, r0
    3330:	a3 9f       	mul	r26, r19
    3332:	70 0d       	add	r23, r0
    3334:	81 1d       	adc	r24, r1
    3336:	11 24       	eor	r1, r1
    3338:	91 1d       	adc	r25, r1
    333a:	b2 9f       	mul	r27, r18
    333c:	70 0d       	add	r23, r0
    333e:	81 1d       	adc	r24, r1
    3340:	11 24       	eor	r1, r1
    3342:	91 1d       	adc	r25, r1
    3344:	08 95       	ret

00003346 <_exit>:
    3346:	f8 94       	cli

00003348 <__stop_program>:
    3348:	ff cf       	rjmp	.-2      	; 0x3348 <__stop_program>
